
Seminarska_vgrs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aee0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f38  0800b0e0  0800b0e0  0001b0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d018  0800d018  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d018  0800d018  0001d018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d020  0800d020  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d020  0800d020  0001d020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d024  0800d024  0001d024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800d028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cc8  2000008c  0800d0b4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d54  0800d0b4  00024d54  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000211f8  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004690  00000000  00000000  000412b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  00045948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a00  00000000  00000000  00047550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000089e2  00000000  00000000  00048f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025aba  00000000  00000000  00051932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016aeb9  00000000  00000000  000773ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e22a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000810c  00000000  00000000  001e22f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000008c 	.word	0x2000008c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b0c8 	.word	0x0800b0c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000090 	.word	0x20000090
 800023c:	0800b0c8 	.word	0x0800b0c8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay(uint16_t time)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <delay+0x30>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < time);
 80005f6:	bf00      	nop
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delay+0x30>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	429a      	cmp	r2, r3
 8000602:	d3f9      	bcc.n	80005f8 <delay+0x14>
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	200000a8 	.word	0x200000a8

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b5b0      	push	{r4, r5, r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f002 f8fd 	bl	800281c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f885 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f943 	bl	80008b0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800062a:	f000 f8ed 	bl	8000808 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 800062e:	4830      	ldr	r0, [pc, #192]	; (80006f0 <main+0xd8>)
 8000630:	f005 fa42 	bl	8005ab8 <HAL_TIM_Base_Start>

  lcd_status = BSP_LCD_Init();
 8000634:	f001 f91f 	bl	8001876 <BSP_LCD_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4b2d      	ldr	r3, [pc, #180]	; (80006f4 <main+0xdc>)
 800063e:	701a      	strb	r2, [r3, #0]
  while(lcd_status != LCD_OK);
 8000640:	bf00      	nop
 8000642:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <main+0xdc>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1fb      	bne.n	8000642 <main+0x2a>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800064a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800064e:	2000      	movs	r0, #0
 8000650:	f001 faae 	bl	8001bb0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000654:	f04f 30ff 	mov.w	r0, #4294967295
 8000658:	f001 fb6c 	bl	8001d34 <BSP_LCD_Clear>

  BSP_LCD_SetFont(&Font24);
 800065c:	4826      	ldr	r0, [pc, #152]	; (80006f8 <main+0xe0>)
 800065e:	f001 fb39 	bl	8001cd4 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8000662:	4826      	ldr	r0, [pc, #152]	; (80006fc <main+0xe4>)
 8000664:	f001 fb04 	bl	8001c70 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000668:	f04f 30ff 	mov.w	r0, #4294967295
 800066c:	f001 fb18 	bl	8001ca0 <BSP_LCD_SetBackColor>

  uint8_t str[] = "Press the button to start !!";
 8000670:	4b23      	ldr	r3, [pc, #140]	; (8000700 <main+0xe8>)
 8000672:	463c      	mov	r4, r7
 8000674:	461d      	mov	r5, r3
 8000676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800067e:	c407      	stmia	r4!, {r0, r1, r2}
 8000680:	7023      	strb	r3, [r4, #0]
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, str, CENTER_MODE);
 8000682:	f001 fa89 	bl	8001b98 <BSP_LCD_GetYSize>
 8000686:	4603      	mov	r3, r0
 8000688:	085b      	lsrs	r3, r3, #1
 800068a:	b299      	uxth	r1, r3
 800068c:	463a      	mov	r2, r7
 800068e:	2301      	movs	r3, #1
 8000690:	2000      	movs	r0, #0
 8000692:	f001 fc1f 	bl	8001ed4 <BSP_LCD_DisplayStringAt>

  queue = osMessageQueueNew(1, sizeof(Distance), NULL);
 8000696:	2200      	movs	r2, #0
 8000698:	2104      	movs	r1, #4
 800069a:	2001      	movs	r0, #1
 800069c:	f006 f88a 	bl	80067b4 <osMessageQueueNew>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a18      	ldr	r2, [pc, #96]	; (8000704 <main+0xec>)
 80006a4:	6013      	str	r3, [r2, #0]
  semaphore = osSemaphoreNew(1U, 0U, NULL);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	2001      	movs	r0, #1
 80006ac:	f005 ff28 	bl	8006500 <osSemaphoreNew>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <main+0xf0>)
 80006b4:	6013      	str	r3, [r2, #0]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006b6:	f005 fde5 	bl	8006284 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  buttonTaskHandle = osThreadNew(StartButtonTask, NULL, &buttonTask_attributes);
 80006ba:	4a14      	ldr	r2, [pc, #80]	; (800070c <main+0xf4>)
 80006bc:	2100      	movs	r1, #0
 80006be:	4814      	ldr	r0, [pc, #80]	; (8000710 <main+0xf8>)
 80006c0:	f005 fe4a 	bl	8006358 <osThreadNew>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <main+0xfc>)
 80006c8:	6013      	str	r3, [r2, #0]
  readDistanceTaskHandle = osThreadNew(StartReadDistanceTask, NULL, &readDistanceTask_attributes);
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <main+0x100>)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4813      	ldr	r0, [pc, #76]	; (800071c <main+0x104>)
 80006d0:	f005 fe42 	bl	8006358 <osThreadNew>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <main+0x108>)
 80006d8:	6013      	str	r3, [r2, #0]
  displayDistanceTaskHandle = osThreadNew(StartDisplayDistanceTask, NULL, &displayDistanceTask_attributes);
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <main+0x10c>)
 80006dc:	2100      	movs	r1, #0
 80006de:	4812      	ldr	r0, [pc, #72]	; (8000728 <main+0x110>)
 80006e0:	f005 fe3a 	bl	8006358 <osThreadNew>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a11      	ldr	r2, [pc, #68]	; (800072c <main+0x114>)
 80006e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006ea:	f005 fdff 	bl	80062ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <main+0xd6>
 80006f0:	200000a8 	.word	0x200000a8
 80006f4:	200000fc 	.word	0x200000fc
 80006f8:	20000008 	.word	0x20000008
 80006fc:	ff000080 	.word	0xff000080
 8000700:	0800b10c 	.word	0x0800b10c
 8000704:	200000f4 	.word	0x200000f4
 8000708:	200000f8 	.word	0x200000f8
 800070c:	0800b180 	.word	0x0800b180
 8000710:	08000f89 	.word	0x08000f89
 8000714:	200000e8 	.word	0x200000e8
 8000718:	0800b1a4 	.word	0x0800b1a4
 800071c:	080009d1 	.word	0x080009d1
 8000720:	200000ec 	.word	0x200000ec
 8000724:	0800b1c8 	.word	0x0800b1c8
 8000728:	08000b01 	.word	0x08000b01
 800072c:	200000f0 	.word	0x200000f0

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b096      	sub	sp, #88	; 0x58
 8000734:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef  ret = HAL_OK;
 8000736:	2300      	movs	r3, #0
 8000738:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	4b30      	ldr	r3, [pc, #192]	; (8000800 <SystemClock_Config+0xd0>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a2f      	ldr	r2, [pc, #188]	; (8000800 <SystemClock_Config+0xd0>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <SystemClock_Config+0xd0>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <SystemClock_Config+0xd4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <SystemClock_Config+0xd4>)
 800075a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <SystemClock_Config+0xd4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076c:	2301      	movs	r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000774:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000780:	2319      	movs	r3, #25
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000784:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800078e:	2309      	movs	r3, #9
 8000790:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000792:	2307      	movs	r3, #7
 8000794:	63fb      	str	r3, [r7, #60]	; 0x3c

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	4618      	mov	r0, r3
 800079c:	f004 f852 	bl	8004844 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 80007a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d000      	beq.n	80007b0 <SystemClock_Config+0x80>
  {
	while(1) { ; }
 80007ae:	e7fe      	b.n	80007ae <SystemClock_Config+0x7e>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 80007b0:	f003 fff8 	bl	80047a4 <HAL_PWREx_EnableOverDrive>
 80007b4:	4603      	mov	r3, r0
 80007b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 80007ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d000      	beq.n	80007c4 <SystemClock_Config+0x94>
  {
	while(1) { ; }
 80007c2:	e7fe      	b.n	80007c2 <SystemClock_Config+0x92>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80007c4:	230f      	movs	r3, #15
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	653b      	str	r3, [r7, #80]	; 0x50

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80007dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007e0:	2107      	movs	r1, #7
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 fadc 	bl	8004da0 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 80007ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d000      	beq.n	80007f8 <SystemClock_Config+0xc8>
  {
	while(1) { ; }
 80007f6:	e7fe      	b.n	80007f6 <SystemClock_Config+0xc6>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3758      	adds	r7, #88	; 0x58
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000828:	4a20      	ldr	r2, [pc, #128]	; (80008ac <MX_TIM1_Init+0xa4>)
 800082a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_TIM1_Init+0xa0>)
 800082e:	22d7      	movs	r2, #215	; 0xd7
 8000830:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_TIM1_Init+0xa0>)
 800083a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800083e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_TIM1_Init+0xa0>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000852:	4815      	ldr	r0, [pc, #84]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000854:	f005 f905 	bl	8005a62 <HAL_TIM_Base_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800085e:	f000 fc35 	bl	80010cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000870:	f005 f94c 	bl	8005b0c <HAL_TIM_ConfigClockSource>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800087a:	f000 fc27 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000890:	f005 fb3c 	bl	8005f0c <HAL_TIMEx_MasterConfigSynchronization>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800089a:	f000 fc17 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000a8 	.word	0x200000a8
 80008ac:	40010000 	.word	0x40010000

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <MX_GPIO_Init+0x110>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a3d      	ldr	r2, [pc, #244]	; (80009c0 <MX_GPIO_Init+0x110>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b3b      	ldr	r3, [pc, #236]	; (80009c0 <MX_GPIO_Init+0x110>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b38      	ldr	r3, [pc, #224]	; (80009c0 <MX_GPIO_Init+0x110>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a37      	ldr	r2, [pc, #220]	; (80009c0 <MX_GPIO_Init+0x110>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b35      	ldr	r3, [pc, #212]	; (80009c0 <MX_GPIO_Init+0x110>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b32      	ldr	r3, [pc, #200]	; (80009c0 <MX_GPIO_Init+0x110>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a31      	ldr	r2, [pc, #196]	; (80009c0 <MX_GPIO_Init+0x110>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <MX_GPIO_Init+0x110>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800090e:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <MX_GPIO_Init+0x110>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a2b      	ldr	r2, [pc, #172]	; (80009c0 <MX_GPIO_Init+0x110>)
 8000914:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x110>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800092c:	4825      	ldr	r0, [pc, #148]	; (80009c4 <MX_GPIO_Init+0x114>)
 800092e:	f003 fc1d 	bl	800416c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000932:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4820      	ldr	r0, [pc, #128]	; (80009c8 <MX_GPIO_Init+0x118>)
 8000948:	f003 fa4c 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800094c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4817      	ldr	r0, [pc, #92]	; (80009c4 <MX_GPIO_Init+0x114>)
 8000966:	f003 fa3d 	bl	8003de4 <HAL_GPIO_Init>

  // Button
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800096a:	2301      	movs	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4812      	ldr	r0, [pc, #72]	; (80009c8 <MX_GPIO_Init+0x118>)
 800097e:	f003 fa31 	bl	8003de4 <HAL_GPIO_Init>

  // Green/Red light
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_13;
 8000982:	f242 0320 	movw	r3, #8224	; 0x2020
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_GPIO_Init+0x11c>)
 800099c:	f003 fa22 	bl	8003de4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2120      	movs	r1, #32
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <MX_GPIO_Init+0x11c>)
 80009a6:	f003 fbe1 	bl	800416c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b0:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_GPIO_Init+0x11c>)
 80009b2:	f003 fbdb 	bl	800416c <HAL_GPIO_WritePin>

}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	; 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020400 	.word	0x40020400
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40022400 	.word	0x40022400

080009d0 <StartReadDistanceTask>:

/* USER CODE BEGIN 4 */
void StartReadDistanceTask(void *argument)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
    uint32_t start_time;
    uint32_t end_time;
    uint32_t tick;

    Distance d;
    d.saved_distance = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	817b      	strh	r3, [r7, #10]

    for (;;)
    {
        if (osSemaphoreAcquire(semaphore, osWaitForever) == osOK) {
 80009dc:	4b42      	ldr	r3, [pc, #264]	; (8000ae8 <StartReadDistanceTask+0x118>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f04f 31ff 	mov.w	r1, #4294967295
 80009e4:	4618      	mov	r0, r3
 80009e6:	f005 fe27 	bl	8006638 <osSemaphoreAcquire>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d171      	bne.n	8000ad4 <StartReadDistanceTask+0x104>
            HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f6:	483d      	ldr	r0, [pc, #244]	; (8000aec <StartReadDistanceTask+0x11c>)
 80009f8:	f003 fbb8 	bl	800416c <HAL_GPIO_WritePin>
            delay(2); // wait 2 us
 80009fc:	2002      	movs	r0, #2
 80009fe:	f7ff fdf1 	bl	80005e4 <delay>
            HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a08:	4838      	ldr	r0, [pc, #224]	; (8000aec <StartReadDistanceTask+0x11c>)
 8000a0a:	f003 fbaf 	bl	800416c <HAL_GPIO_WritePin>
            delay(10); // wait 10 us
 8000a0e:	200a      	movs	r0, #10
 8000a10:	f7ff fde8 	bl	80005e4 <delay>
            HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1a:	4834      	ldr	r0, [pc, #208]	; (8000aec <StartReadDistanceTask+0x11c>)
 8000a1c:	f003 fba6 	bl	800416c <HAL_GPIO_WritePin>

            tick = HAL_GetTick();
 8000a20:	f001 ff4e 	bl	80028c0 <HAL_GetTick>
 8000a24:	6178      	str	r0, [r7, #20]
            while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && tick + 10 > 0); // wait for echo to go to high state
 8000a26:	bf00      	nop
 8000a28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a2c:	4830      	ldr	r0, [pc, #192]	; (8000af0 <StartReadDistanceTask+0x120>)
 8000a2e:	f003 fb85 	bl	800413c <HAL_GPIO_ReadPin>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d103      	bne.n	8000a40 <StartReadDistanceTask+0x70>
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	f113 0f0a 	cmn.w	r3, #10
 8000a3e:	d1f3      	bne.n	8000a28 <StartReadDistanceTask+0x58>
            start_time = __HAL_TIM_GET_COUNTER(&htim1);
 8000a40:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <StartReadDistanceTask+0x124>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a46:	613b      	str	r3, [r7, #16]

            tick = HAL_GetTick();
 8000a48:	f001 ff3a 	bl	80028c0 <HAL_GetTick>
 8000a4c:	6178      	str	r0, [r7, #20]
            while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && tick + 50 > 0); // wait for echo to go to low state
 8000a4e:	bf00      	nop
 8000a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a54:	4826      	ldr	r0, [pc, #152]	; (8000af0 <StartReadDistanceTask+0x120>)
 8000a56:	f003 fb71 	bl	800413c <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <StartReadDistanceTask+0x98>
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8000a66:	d1f3      	bne.n	8000a50 <StartReadDistanceTask+0x80>
            end_time = __HAL_TIM_GET_COUNTER(&htim1);
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <StartReadDistanceTask+0x124>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6e:	60fb      	str	r3, [r7, #12]

            // Update the distance structure because of the saved distance
            osMessageQueueGet(queue, &d, NULL, 10);
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <StartReadDistanceTask+0x128>)
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	f107 0108 	add.w	r1, r7, #8
 8000a78:	230a      	movs	r3, #10
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f005 ff94 	bl	80069a8 <osMessageQueueGet>

            d.distance = (end_time - start_time) * 0.034 / 2;
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	ee07 3a90 	vmov	s15, r3
 8000a8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000a8e:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8000ae0 <StartReadDistanceTask+0x110>
 8000a92:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a96:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000a9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a9e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aa2:	ee17 3a90 	vmov	r3, s15
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	813b      	strh	r3, [r7, #8]

            // Save the current distance if it's below the threshold
            if (d.distance < THRESHOLD) {
 8000aaa:	893a      	ldrh	r2, [r7, #8]
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <StartReadDistanceTask+0x12c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d201      	bcs.n	8000aba <StartReadDistanceTask+0xea>
                d.saved_distance = d.distance;
 8000ab6:	893b      	ldrh	r3, [r7, #8]
 8000ab8:	817b      	strh	r3, [r7, #10]
            }

            osMessageQueuePut(queue, &d, 0, 10);
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <StartReadDistanceTask+0x128>)
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	f107 0108 	add.w	r1, r7, #8
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f005 fefb 	bl	80068c0 <osMessageQueuePut>
            osSemaphoreRelease(semaphore);
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <StartReadDistanceTask+0x118>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f005 fe18 	bl	8006704 <osSemaphoreRelease>
        }
        HAL_Delay(150);
 8000ad4:	2096      	movs	r0, #150	; 0x96
 8000ad6:	f001 feff 	bl	80028d8 <HAL_Delay>
        if (osSemaphoreAcquire(semaphore, osWaitForever) == osOK) {
 8000ada:	e77f      	b.n	80009dc <StartReadDistanceTask+0xc>
 8000adc:	f3af 8000 	nop.w
 8000ae0:	b020c49c 	.word	0xb020c49c
 8000ae4:	3fa16872 	.word	0x3fa16872
 8000ae8:	200000f8 	.word	0x200000f8
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40020000 	.word	0x40020000
 8000af4:	200000a8 	.word	0x200000a8
 8000af8:	200000f4 	.word	0x200000f4
 8000afc:	20000000 	.word	0x20000000

08000b00 <StartDisplayDistanceTask>:
    }
}


void StartDisplayDistanceTask(void *argument)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
    Distance d;
    d.saved_distance = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	83fb      	strh	r3, [r7, #30]
    unsigned char str[20];

    for (;;) {
        osMessageQueueGet(queue, &d, NULL, osWaitForever);
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <StartDisplayDistanceTask+0xfc>)
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	f107 011c 	add.w	r1, r7, #28
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f005 ff45 	bl	80069a8 <osMessageQueueGet>
        if (osSemaphoreAcquire(semaphore, osWaitForever) == osOK) {
 8000b1e:	4b38      	ldr	r3, [pc, #224]	; (8000c00 <StartDisplayDistanceTask+0x100>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f04f 31ff 	mov.w	r1, #4294967295
 8000b26:	4618      	mov	r0, r3
 8000b28:	f005 fd86 	bl	8006638 <osSemaphoreAcquire>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d160      	bne.n	8000bf4 <StartDisplayDistanceTask+0xf4>
            osMessageQueuePut(queue, &d, NULL, 10);
 8000b32:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <StartDisplayDistanceTask+0xfc>)
 8000b34:	6818      	ldr	r0, [r3, #0]
 8000b36:	f107 011c 	add.w	r1, r7, #28
 8000b3a:	230a      	movs	r3, #10
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f005 febf 	bl	80068c0 <osMessageQueuePut>
            osSemaphoreRelease(semaphore);
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <StartDisplayDistanceTask+0x100>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f005 fddc 	bl	8006704 <osSemaphoreRelease>

            sprintf((char*)str, "    %d    ", d.distance);
 8000b4c:	8bbb      	ldrh	r3, [r7, #28]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	492b      	ldr	r1, [pc, #172]	; (8000c04 <StartDisplayDistanceTask+0x104>)
 8000b56:	4618      	mov	r0, r3
 8000b58:	f009 f8ee 	bl	8009d38 <siprintf>
            BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 20, str, CENTER_MODE);
 8000b5c:	f001 f81c 	bl	8001b98 <BSP_LCD_GetYSize>
 8000b60:	4603      	mov	r3, r0
 8000b62:	085b      	lsrs	r3, r3, #1
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	3314      	adds	r3, #20
 8000b68:	b299      	uxth	r1, r3
 8000b6a:	f107 0208 	add.w	r2, r7, #8
 8000b6e:	2301      	movs	r3, #1
 8000b70:	2000      	movs	r0, #0
 8000b72:	f001 f9af 	bl	8001ed4 <BSP_LCD_DisplayStringAt>

            if (d.saved_distance && d.distance < d.saved_distance) {
 8000b76:	8bfb      	ldrh	r3, [r7, #30]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00f      	beq.n	8000b9c <StartDisplayDistanceTask+0x9c>
 8000b7c:	8bba      	ldrh	r2, [r7, #28]
 8000b7e:	8bfb      	ldrh	r3, [r7, #30]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d20b      	bcs.n	8000b9c <StartDisplayDistanceTask+0x9c>
                HAL_GPIO_WritePin(LED_PORT, RED_PIN, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8a:	481f      	ldr	r0, [pc, #124]	; (8000c08 <StartDisplayDistanceTask+0x108>)
 8000b8c:	f003 faee 	bl	800416c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LED_PORT, GREEN_PIN, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2120      	movs	r1, #32
 8000b94:	481c      	ldr	r0, [pc, #112]	; (8000c08 <StartDisplayDistanceTask+0x108>)
 8000b96:	f003 fae9 	bl	800416c <HAL_GPIO_WritePin>
 8000b9a:	e00d      	b.n	8000bb8 <StartDisplayDistanceTask+0xb8>
            } else if (d.saved_distance) {
 8000b9c:	8bfb      	ldrh	r3, [r7, #30]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00a      	beq.n	8000bb8 <StartDisplayDistanceTask+0xb8>
                HAL_GPIO_WritePin(LED_PORT, RED_PIN, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba8:	4817      	ldr	r0, [pc, #92]	; (8000c08 <StartDisplayDistanceTask+0x108>)
 8000baa:	f003 fadf 	bl	800416c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LED_PORT, GREEN_PIN, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	4815      	ldr	r0, [pc, #84]	; (8000c08 <StartDisplayDistanceTask+0x108>)
 8000bb4:	f003 fada 	bl	800416c <HAL_GPIO_WritePin>
            }

            // Check if distance exceeds the threshold
            if (d.distance > THRESHOLD) {
 8000bb8:	8bba      	ldrh	r2, [r7, #28]
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <StartDisplayDistanceTask+0x10c>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d90f      	bls.n	8000be4 <StartDisplayDistanceTask+0xe4>
                // Simulate an alarm (e.g., display a message or sound a buzzer)
                BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000bc4:	4812      	ldr	r0, [pc, #72]	; (8000c10 <StartDisplayDistanceTask+0x110>)
 8000bc6:	f001 f853 	bl	8001c70 <BSP_LCD_SetTextColor>
                BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 60, (uint8_t*)"ALARM!", CENTER_MODE);
 8000bca:	f000 ffe5 	bl	8001b98 <BSP_LCD_GetYSize>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	085b      	lsrs	r3, r3, #1
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	333c      	adds	r3, #60	; 0x3c
 8000bd6:	b299      	uxth	r1, r3
 8000bd8:	2301      	movs	r3, #1
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <StartDisplayDistanceTask+0x114>)
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f001 f979 	bl	8001ed4 <BSP_LCD_DisplayStringAt>
 8000be2:	e007      	b.n	8000bf4 <StartDisplayDistanceTask+0xf4>
            } else {
                // Clear the alarm
                BSP_LCD_ClearStringLine(BSP_LCD_GetYSize() / 2 + 60);
 8000be4:	f000 ffd8 	bl	8001b98 <BSP_LCD_GetYSize>
 8000be8:	4603      	mov	r3, r0
 8000bea:	085b      	lsrs	r3, r3, #1
 8000bec:	333c      	adds	r3, #60	; 0x3c
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 f8c8 	bl	8001d84 <BSP_LCD_ClearStringLine>
            }
        }
        osDelay(150);
 8000bf4:	2096      	movs	r0, #150	; 0x96
 8000bf6:	f005 fc55 	bl	80064a4 <osDelay>
        osMessageQueueGet(queue, &d, NULL, osWaitForever);
 8000bfa:	e787      	b.n	8000b0c <StartDisplayDistanceTask+0xc>
 8000bfc:	200000f4 	.word	0x200000f4
 8000c00:	200000f8 	.word	0x200000f8
 8000c04:	0800b12c 	.word	0x0800b12c
 8000c08:	40022400 	.word	0x40022400
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	ffff0000 	.word	0xffff0000
 8000c14:	0800b138 	.word	0x0800b138

08000c18 <getRndRect>:
    }
}



Rectangle getRndRect() {
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	uint32_t x = rand()%BSP_LCD_GetXSize();
 8000c20:	f009 f84c 	bl	8009cbc <rand>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461c      	mov	r4, r3
 8000c28:	f000 ffaa 	bl	8001b80 <BSP_LCD_GetXSize>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	fbb4 f2f3 	udiv	r2, r4, r3
 8000c32:	fb02 f303 	mul.w	r3, r2, r3
 8000c36:	1ae3      	subs	r3, r4, r3
 8000c38:	61fb      	str	r3, [r7, #28]
	uint32_t y = rand()%BSP_LCD_GetYSize()/3;
 8000c3a:	f009 f83f 	bl	8009cbc <rand>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461c      	mov	r4, r3
 8000c42:	f000 ffa9 	bl	8001b98 <BSP_LCD_GetYSize>
 8000c46:	4603      	mov	r3, r0
 8000c48:	fbb4 f2f3 	udiv	r2, r4, r3
 8000c4c:	fb02 f303 	mul.w	r3, r2, r3
 8000c50:	1ae3      	subs	r3, r4, r3
 8000c52:	4a2f      	ldr	r2, [pc, #188]	; (8000d10 <getRndRect+0xf8>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	085b      	lsrs	r3, r3, #1
 8000c5a:	61bb      	str	r3, [r7, #24]
	uint8_t width = 3+rand()%5;
 8000c5c:	f009 f82e 	bl	8009cbc <rand>
 8000c60:	4602      	mov	r2, r0
 8000c62:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <getRndRect+0xfc>)
 8000c64:	fb83 1302 	smull	r1, r3, r3, r2
 8000c68:	1059      	asrs	r1, r3, #1
 8000c6a:	17d3      	asrs	r3, r2, #31
 8000c6c:	1ac9      	subs	r1, r1, r3
 8000c6e:	460b      	mov	r3, r1
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	1ad1      	subs	r1, r2, r3
 8000c76:	b2cb      	uxtb	r3, r1
 8000c78:	3303      	adds	r3, #3
 8000c7a:	75fb      	strb	r3, [r7, #23]
	uint8_t height = 7*width+rand()%30;
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	00d2      	lsls	r2, r2, #3
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	b2dc      	uxtb	r4, r3
 8000c86:	f009 f819 	bl	8009cbc <rand>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <getRndRect+0x100>)
 8000c8e:	fb83 1302 	smull	r1, r3, r3, r2
 8000c92:	4413      	add	r3, r2
 8000c94:	1119      	asrs	r1, r3, #4
 8000c96:	17d3      	asrs	r3, r2, #31
 8000c98:	1ac9      	subs	r1, r1, r3
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	011b      	lsls	r3, r3, #4
 8000c9e:	1a5b      	subs	r3, r3, r1
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	1ad1      	subs	r1, r2, r3
 8000ca4:	b2cb      	uxtb	r3, r1
 8000ca6:	4423      	add	r3, r4
 8000ca8:	75bb      	strb	r3, [r7, #22]
	uint8_t speed = height/3+rand()%20;
 8000caa:	7dbb      	ldrb	r3, [r7, #22]
 8000cac:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <getRndRect+0xf8>)
 8000cae:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb2:	085b      	lsrs	r3, r3, #1
 8000cb4:	b2dc      	uxtb	r4, r3
 8000cb6:	f009 f801 	bl	8009cbc <rand>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <getRndRect+0xfc>)
 8000cbe:	fb83 1302 	smull	r1, r3, r3, r2
 8000cc2:	10d9      	asrs	r1, r3, #3
 8000cc4:	17d3      	asrs	r3, r2, #31
 8000cc6:	1ac9      	subs	r1, r1, r3
 8000cc8:	460b      	mov	r3, r1
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	440b      	add	r3, r1
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	1ad1      	subs	r1, r2, r3
 8000cd2:	b2cb      	uxtb	r3, r1
 8000cd4:	4423      	add	r3, r4
 8000cd6:	757b      	strb	r3, [r7, #21]

	Rectangle rect = {x, y, width, height, speed};
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	813b      	strh	r3, [r7, #8]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	817b      	strh	r3, [r7, #10]
 8000ce4:	7dfb      	ldrb	r3, [r7, #23]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	81bb      	strh	r3, [r7, #12]
 8000cea:	7dbb      	ldrb	r3, [r7, #22]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	81fb      	strh	r3, [r7, #14]
 8000cf0:	7d7b      	ldrb	r3, [r7, #21]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	823b      	strh	r3, [r7, #16]
	return rect;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	cb03      	ldmia	r3!, {r0, r1}
 8000d00:	6010      	str	r0, [r2, #0]
 8000d02:	6051      	str	r1, [r2, #4]
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	8113      	strh	r3, [r2, #8]

}
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	3724      	adds	r7, #36	; 0x24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	aaaaaaab 	.word	0xaaaaaaab
 8000d14:	66666667 	.word	0x66666667
 8000d18:	88888889 	.word	0x88888889

08000d1c <displayRain>:

void displayRain(void)
{
 8000d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d20:	b091      	sub	sp, #68	; 0x44
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	466b      	mov	r3, sp
 8000d26:	607b      	str	r3, [r7, #4]
	uint8_t N_RECTS = 20;
 8000d28:	2314      	movs	r3, #20
 8000d2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	Rectangle rects[N_RECTS];
 8000d2e:	f897 6037 	ldrb.w	r6, [r7, #55]	; 0x37
 8000d32:	4633      	mov	r3, r6
 8000d34:	3b01      	subs	r3, #1
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
 8000d38:	b2f3      	uxtb	r3, r6
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	461c      	mov	r4, r3
 8000d3e:	4615      	mov	r5, r2
 8000d40:	4622      	mov	r2, r4
 8000d42:	462b      	mov	r3, r5
 8000d44:	f04f 0800 	mov.w	r8, #0
 8000d48:	f04f 0900 	mov.w	r9, #0
 8000d4c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8000d50:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 8000d54:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8000d58:	4642      	mov	r2, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	46a0      	mov	r8, r4
 8000d5e:	46a9      	mov	r9, r5
 8000d60:	4644      	mov	r4, r8
 8000d62:	1910      	adds	r0, r2, r4
 8000d64:	464c      	mov	r4, r9
 8000d66:	eb43 0404 	adc.w	r4, r3, r4
 8000d6a:	4621      	mov	r1, r4
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	010b      	lsls	r3, r1, #4
 8000d76:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000d7a:	0102      	lsls	r2, r0, #4
 8000d7c:	b2f3      	uxtb	r3, r6
 8000d7e:	2200      	movs	r2, #0
 8000d80:	469a      	mov	sl, r3
 8000d82:	4693      	mov	fp, r2
 8000d84:	4652      	mov	r2, sl
 8000d86:	465b      	mov	r3, fp
 8000d88:	f04f 0000 	mov.w	r0, #0
 8000d8c:	f04f 0100 	mov.w	r1, #0
 8000d90:	0099      	lsls	r1, r3, #2
 8000d92:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000d96:	0090      	lsls	r0, r2, #2
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	eb12 010a 	adds.w	r1, r2, sl
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	eb43 030b 	adc.w	r3, r3, fp
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000db4:	4629      	mov	r1, r5
 8000db6:	010b      	lsls	r3, r1, #4
 8000db8:	4621      	mov	r1, r4
 8000dba:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 8000dbe:	4621      	mov	r1, r4
 8000dc0:	010a      	lsls	r2, r1, #4
 8000dc2:	4632      	mov	r2, r6
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	3307      	adds	r3, #7
 8000dce:	08db      	lsrs	r3, r3, #3
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	ebad 0d03 	sub.w	sp, sp, r3
 8000dd6:	466b      	mov	r3, sp
 8000dd8:	3301      	adds	r3, #1
 8000dda:	085b      	lsrs	r3, r3, #1
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
	Rectangle rect;

	for (int k=0; k<N_RECTS; k++) {
 8000de0:	2300      	movs	r3, #0
 8000de2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000de4:	e016      	b.n	8000e14 <displayRain+0xf8>
		rect = getRndRect();
 8000de6:	f107 0320 	add.w	r3, r7, #32
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff14 	bl	8000c18 <getRndRect>
		rects[k] = rect;
 8000df0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000df2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	440b      	add	r3, r1
 8000dfe:	461a      	mov	r2, r3
 8000e00:	f107 0320 	add.w	r3, r7, #32
 8000e04:	cb03      	ldmia	r3!, {r0, r1}
 8000e06:	6010      	str	r0, [r2, #0]
 8000e08:	6051      	str	r1, [r2, #4]
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	8113      	strh	r3, [r2, #8]
	for (int k=0; k<N_RECTS; k++) {
 8000e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e10:	3301      	adds	r3, #1
 8000e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	dbe3      	blt.n	8000de6 <displayRain+0xca>
	}

	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000e1e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e22:	f000 ff87 	bl	8001d34 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8000e26:	4856      	ldr	r0, [pc, #344]	; (8000f80 <displayRain+0x264>)
 8000e28:	f000 ff22 	bl	8001c70 <BSP_LCD_SetTextColor>
	while(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN));
 8000e2c:	bf00      	nop
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4854      	ldr	r0, [pc, #336]	; (8000f84 <displayRain+0x268>)
 8000e32:	f003 f983 	bl	800413c <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1f8      	bne.n	8000e2e <displayRain+0x112>

	for (;;)
	{
		if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)) {
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	4851      	ldr	r0, [pc, #324]	; (8000f84 <displayRain+0x268>)
 8000e40:	f003 f97c 	bl	800413c <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <displayRain+0x134>
 8000e4a:	f8d7 d004 	ldr.w	sp, [r7, #4]
			return;
 8000e4e:	e092      	b.n	8000f76 <displayRain+0x25a>
		}
		BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000e50:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e54:	f000 ff6e 	bl	8001d34 <BSP_LCD_Clear>

		for (int i=0; i<N_RECTS; i++){
 8000e58:	2300      	movs	r3, #0
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e5c:	e081      	b.n	8000f62 <displayRain+0x246>

			BSP_LCD_FillRect(rects[i].x, rects[i].y, rects[i].width, rects[i].height);
 8000e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	440b      	add	r3, r1
 8000e6c:	8818      	ldrh	r0, [r3, #0]
 8000e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	440b      	add	r3, r1
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	881c      	ldrh	r4, [r3, #0]
 8000e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	440b      	add	r3, r1
 8000e8e:	3304      	adds	r3, #4
 8000e90:	881d      	ldrh	r5, [r3, #0]
 8000e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3306      	adds	r3, #6
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	462a      	mov	r2, r5
 8000ea6:	4621      	mov	r1, r4
 8000ea8:	f001 f8f4 	bl	8002094 <BSP_LCD_FillRect>
			rects[i].y+=rects[i].speed;
 8000eac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000eae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	440b      	add	r3, r1
 8000eba:	3302      	adds	r3, #2
 8000ebc:	8819      	ldrh	r1, [r3, #0]
 8000ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ec0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4403      	add	r3, r0
 8000ecc:	3308      	adds	r3, #8
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	440b      	add	r3, r1
 8000ed2:	b298      	uxth	r0, r3
 8000ed4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ed6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	440b      	add	r3, r1
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	801a      	strh	r2, [r3, #0]
			if (rects[i].y+rects[i].height >= BSP_LCD_GetYSize()) {
 8000ee8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000eea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000eec:	4613      	mov	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	440b      	add	r3, r1
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000efe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	440b      	add	r3, r1
 8000f0a:	3306      	adds	r3, #6
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	4403      	add	r3, r0
 8000f10:	461c      	mov	r4, r3
 8000f12:	f000 fe41 	bl	8001b98 <BSP_LCD_GetYSize>
 8000f16:	4603      	mov	r3, r0
 8000f18:	429c      	cmp	r4, r3
 8000f1a:	d31c      	bcc.n	8000f56 <displayRain+0x23a>
				rect = getRndRect();
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fe79 	bl	8000c18 <getRndRect>
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	f107 0210 	add.w	r2, r7, #16
 8000f2e:	6810      	ldr	r0, [r2, #0]
 8000f30:	6851      	ldr	r1, [r2, #4]
 8000f32:	c303      	stmia	r3!, {r0, r1}
 8000f34:	8912      	ldrh	r2, [r2, #8]
 8000f36:	801a      	strh	r2, [r3, #0]
				rects[i] = rect;
 8000f38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	440b      	add	r3, r1
 8000f46:	461a      	mov	r2, r3
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	cb03      	ldmia	r3!, {r0, r1}
 8000f4e:	6010      	str	r0, [r2, #0]
 8000f50:	6051      	str	r1, [r2, #4]
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	8113      	strh	r3, [r2, #8]
			}
			osDelay(1);
 8000f56:	2001      	movs	r0, #1
 8000f58:	f005 faa4 	bl	80064a4 <osDelay>
		for (int i=0; i<N_RECTS; i++){
 8000f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f5e:	3301      	adds	r3, #1
 8000f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f6ff af78 	blt.w	8000e5e <displayRain+0x142>
		}
		osDelay(10);
 8000f6e:	200a      	movs	r0, #10
 8000f70:	f005 fa98 	bl	80064a4 <osDelay>
		if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)) {
 8000f74:	e762      	b.n	8000e3c <displayRain+0x120>
	}
}
 8000f76:	3744      	adds	r7, #68	; 0x44
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f7e:	bf00      	nop
 8000f80:	ff000080 	.word	0xff000080
 8000f84:	40020000 	.word	0x40020000

08000f88 <StartButtonTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartButtonTask(void *argument)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	unsigned char str[20];
	Distance d;
	uint8_t started = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
//	uint32_t start_time;
//	uint32_t end_time;
	uint32_t time;
	for(;;)
    {
		if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)) {
 8000f96:	2101      	movs	r1, #1
 8000f98:	4847      	ldr	r0, [pc, #284]	; (80010b8 <StartButtonTask+0x130>)
 8000f9a:	f003 f8cf 	bl	800413c <HAL_GPIO_ReadPin>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 8085 	beq.w	80010b0 <StartButtonTask+0x128>
			time=0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
			while(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)){
 8000faa:	e02b      	b.n	8001004 <StartButtonTask+0x7c>
				time++;
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	623b      	str	r3, [r7, #32]
				osDelay(1);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f005 fa76 	bl	80064a4 <osDelay>
				if (time > 2000) {
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fbe:	d921      	bls.n	8001004 <StartButtonTask+0x7c>
					//while(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN));
					if (osSemaphoreAcquire(semaphore, osWaitForever) == osOK) {
 8000fc0:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <StartButtonTask+0x134>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f005 fb35 	bl	8006638 <osSemaphoreAcquire>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d11f      	bne.n	8001014 <StartButtonTask+0x8c>
						displayRain();
 8000fd4:	f7ff fea2 	bl	8000d1c <displayRain>
						osSemaphoreRelease(semaphore);
 8000fd8:	4b38      	ldr	r3, [pc, #224]	; (80010bc <StartButtonTask+0x134>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f005 fb91 	bl	8006704 <osSemaphoreRelease>
						BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe6:	f000 fea5 	bl	8001d34 <BSP_LCD_Clear>
						BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2-20, (uint8_t *) "Distance (cm):", CENTER_MODE);
 8000fea:	f000 fdd5 	bl	8001b98 <BSP_LCD_GetYSize>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	085b      	lsrs	r3, r3, #1
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	3b14      	subs	r3, #20
 8000ff6:	b299      	uxth	r1, r3
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <StartButtonTask+0x138>)
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 ff69 	bl	8001ed4 <BSP_LCD_DisplayStringAt>
//						started = 0;
					}
					break;
 8001002:	e007      	b.n	8001014 <StartButtonTask+0x8c>
			while(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)){
 8001004:	2101      	movs	r1, #1
 8001006:	482c      	ldr	r0, [pc, #176]	; (80010b8 <StartButtonTask+0x130>)
 8001008:	f003 f898 	bl	800413c <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1cc      	bne.n	8000fac <StartButtonTask+0x24>
 8001012:	e000      	b.n	8001016 <StartButtonTask+0x8e>
					break;
 8001014:	bf00      	nop
				}

			} // Wait to release the button

			if (started) {
 8001016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800101a:	2b00      	cmp	r3, #0
 800101c:	d030      	beq.n	8001080 <StartButtonTask+0xf8>
				osMessageQueueGet(queue, &d, NULL, osWaitForever);
 800101e:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <StartButtonTask+0x13c>)
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	f107 0108 	add.w	r1, r7, #8
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	2200      	movs	r2, #0
 800102c:	f005 fcbc 	bl	80069a8 <osMessageQueueGet>
				if (osSemaphoreAcquire(semaphore, osWaitForever) == osOK) {
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <StartButtonTask+0x134>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	4618      	mov	r0, r3
 800103a:	f005 fafd 	bl	8006638 <osSemaphoreAcquire>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10e      	bne.n	8001062 <StartButtonTask+0xda>
					d.saved_distance = d.distance;
 8001044:	893b      	ldrh	r3, [r7, #8]
 8001046:	817b      	strh	r3, [r7, #10]
					osMessageQueuePut(queue, &d, NULL, 10U);
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <StartButtonTask+0x13c>)
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	f107 0108 	add.w	r1, r7, #8
 8001050:	230a      	movs	r3, #10
 8001052:	2200      	movs	r2, #0
 8001054:	f005 fc34 	bl	80068c0 <osMessageQueuePut>
					osSemaphoreRelease(semaphore);
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <StartButtonTask+0x134>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f005 fb51 	bl	8006704 <osSemaphoreRelease>
				}
				sprintf(&str,"Saved distance: %d    ", d.saved_distance);
 8001062:	897b      	ldrh	r3, [r7, #10]
 8001064:	461a      	mov	r2, r3
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4917      	ldr	r1, [pc, #92]	; (80010c8 <StartButtonTask+0x140>)
 800106c:	4618      	mov	r0, r3
 800106e:	f008 fe63 	bl	8009d38 <siprintf>
				BSP_LCD_DisplayStringAtLine(19, str);
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	4619      	mov	r1, r3
 8001078:	2013      	movs	r0, #19
 800107a:	f000 fff3 	bl	8002064 <BSP_LCD_DisplayStringAtLine>
 800107e:	e017      	b.n	80010b0 <StartButtonTask+0x128>
	    	} else {
	    		started = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001086:	f04f 30ff 	mov.w	r0, #4294967295
 800108a:	f000 fe53 	bl	8001d34 <BSP_LCD_Clear>
				BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2-20, (uint8_t *) "Distance (cm):", CENTER_MODE);
 800108e:	f000 fd83 	bl	8001b98 <BSP_LCD_GetYSize>
 8001092:	4603      	mov	r3, r0
 8001094:	085b      	lsrs	r3, r3, #1
 8001096:	b29b      	uxth	r3, r3
 8001098:	3b14      	subs	r3, #20
 800109a:	b299      	uxth	r1, r3
 800109c:	2301      	movs	r3, #1
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <StartButtonTask+0x138>)
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 ff17 	bl	8001ed4 <BSP_LCD_DisplayStringAt>
			    osSemaphoreRelease(semaphore);
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <StartButtonTask+0x134>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fb2a 	bl	8006704 <osSemaphoreRelease>
	    	}
	    }
	    osDelay(150);
 80010b0:	2096      	movs	r0, #150	; 0x96
 80010b2:	f005 f9f7 	bl	80064a4 <osDelay>
		if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)) {
 80010b6:	e76e      	b.n	8000f96 <StartButtonTask+0xe>
 80010b8:	40020000 	.word	0x40020000
 80010bc:	200000f8 	.word	0x200000f8
 80010c0:	0800b140 	.word	0x0800b140
 80010c4:	200000f4 	.word	0x200000f4
 80010c8:	0800b150 	.word	0x0800b150

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
}
 80010d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <Error_Handler+0x8>
	...

080010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_MspInit+0x4c>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_MspInit+0x4c>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_MspInit+0x4c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_MspInit+0x4c>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	210f      	movs	r1, #15
 8001112:	f06f 0001 	mvn.w	r0, #1
 8001116:	f001 fcde 	bl	8002ad6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800

08001128 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <HAL_TIM_Base_MspInit+0x38>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d10b      	bne.n	8001152 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_TIM_Base_MspInit+0x3c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <HAL_TIM_Base_MspInit+0x3c>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_TIM_Base_MspInit+0x3c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40010000 	.word	0x40010000
 8001164:	40023800 	.word	0x40023800

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001198:	f001 fb7e 	bl	8002898 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800119c:	f007 fbf2 	bl	8008984 <xTaskGetSchedulerState>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d001      	beq.n	80011aa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011a6:	f008 facf 	bl	8009748 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
	return 1;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_kill>:

int _kill(int pid, int sig)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011c8:	f008 fd38 	bl	8009c3c <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2216      	movs	r2, #22
 80011d0:	601a      	str	r2, [r3, #0]
	return -1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_exit>:

void _exit (int status)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011e6:	f04f 31ff 	mov.w	r1, #4294967295
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffe7 	bl	80011be <_kill>
	while (1) {}		/* Make sure we hang here */
 80011f0:	e7fe      	b.n	80011f0 <_exit+0x12>

080011f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e00a      	b.n	800121a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001204:	f3af 8000 	nop.w
 8001208:	4601      	mov	r1, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	60ba      	str	r2, [r7, #8]
 8001210:	b2ca      	uxtb	r2, r1
 8001212:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	dbf0      	blt.n	8001204 <_read+0x12>
	}

return len;
 8001222:	687b      	ldr	r3, [r7, #4]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e009      	b.n	8001252 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	60ba      	str	r2, [r7, #8]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	429a      	cmp	r2, r3
 8001258:	dbf1      	blt.n	800123e <_write+0x12>
	}
	return len;
 800125a:	687b      	ldr	r3, [r7, #4]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <_close>:

int _close(int file)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	return -1;
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800128c:	605a      	str	r2, [r3, #4]
	return 0;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <_isatty>:

int _isatty(int file)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	return 1;
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
	return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <_sbrk+0x5c>)
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <_sbrk+0x60>)
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <_sbrk+0x64>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <_sbrk+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d207      	bcs.n	800130c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012fc:	f008 fc9e 	bl	8009c3c <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	220c      	movs	r2, #12
 8001304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	e009      	b.n	8001320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <_sbrk+0x64>)
 800131c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20080000 	.word	0x20080000
 800132c:	00000400 	.word	0x00000400
 8001330:	20000100 	.word	0x20000100
 8001334:	20004d58 	.word	0x20004d58

08001338 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <SystemInit+0x20>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <SystemInit+0x20>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001394 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001362:	490e      	ldr	r1, [pc, #56]	; (800139c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001378:	4c0b      	ldr	r4, [pc, #44]	; (80013a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001386:	f7ff ffd7 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138a:	f008 fc5d 	bl	8009c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff f943 	bl	8000618 <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001394:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80013a0:	0800d028 	.word	0x0800d028
  ldr r2, =_sbss
 80013a4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80013a8:	20004d54 	.word	0x20004d54

080013ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC_IRQHandler>
	...

080013b0 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80013ba:	49c1      	ldr	r1, [pc, #772]	; (80016c0 <OTM8009A_Init+0x310>)
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 fec3 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80013c2:	49c0      	ldr	r1, [pc, #768]	; (80016c4 <OTM8009A_Init+0x314>)
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 febf 	bl	8002148 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80013ca:	49bf      	ldr	r1, [pc, #764]	; (80016c8 <OTM8009A_Init+0x318>)
 80013cc:	2000      	movs	r0, #0
 80013ce:	f000 febb 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 80013d2:	49be      	ldr	r1, [pc, #760]	; (80016cc <OTM8009A_Init+0x31c>)
 80013d4:	2002      	movs	r0, #2
 80013d6:	f000 feb7 	bl	8002148 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80013da:	49bb      	ldr	r1, [pc, #748]	; (80016c8 <OTM8009A_Init+0x318>)
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 feb3 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80013e2:	49bb      	ldr	r1, [pc, #748]	; (80016d0 <OTM8009A_Init+0x320>)
 80013e4:	2000      	movs	r0, #0
 80013e6:	f000 feaf 	bl	8002148 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80013ea:	200a      	movs	r0, #10
 80013ec:	f000 fa38 	bl	8001860 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80013f0:	49b8      	ldr	r1, [pc, #736]	; (80016d4 <OTM8009A_Init+0x324>)
 80013f2:	2000      	movs	r0, #0
 80013f4:	f000 fea8 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80013f8:	49b7      	ldr	r1, [pc, #732]	; (80016d8 <OTM8009A_Init+0x328>)
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 fea4 	bl	8002148 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8001400:	200a      	movs	r0, #10
 8001402:	f000 fa2d 	bl	8001860 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8001406:	49b5      	ldr	r1, [pc, #724]	; (80016dc <OTM8009A_Init+0x32c>)
 8001408:	2000      	movs	r0, #0
 800140a:	f000 fe9d 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800140e:	49b4      	ldr	r1, [pc, #720]	; (80016e0 <OTM8009A_Init+0x330>)
 8001410:	2000      	movs	r0, #0
 8001412:	f000 fe99 	bl	8002148 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8001416:	49b3      	ldr	r1, [pc, #716]	; (80016e4 <OTM8009A_Init+0x334>)
 8001418:	2000      	movs	r0, #0
 800141a:	f000 fe95 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800141e:	49b2      	ldr	r1, [pc, #712]	; (80016e8 <OTM8009A_Init+0x338>)
 8001420:	2000      	movs	r0, #0
 8001422:	f000 fe91 	bl	8002148 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8001426:	49b1      	ldr	r1, [pc, #708]	; (80016ec <OTM8009A_Init+0x33c>)
 8001428:	2000      	movs	r0, #0
 800142a:	f000 fe8d 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 800142e:	49b0      	ldr	r1, [pc, #704]	; (80016f0 <OTM8009A_Init+0x340>)
 8001430:	2000      	movs	r0, #0
 8001432:	f000 fe89 	bl	8002148 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001436:	49a2      	ldr	r1, [pc, #648]	; (80016c0 <OTM8009A_Init+0x310>)
 8001438:	2000      	movs	r0, #0
 800143a:	f000 fe85 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 800143e:	49ad      	ldr	r1, [pc, #692]	; (80016f4 <OTM8009A_Init+0x344>)
 8001440:	2000      	movs	r0, #0
 8001442:	f000 fe81 	bl	8002148 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001446:	49ac      	ldr	r1, [pc, #688]	; (80016f8 <OTM8009A_Init+0x348>)
 8001448:	2000      	movs	r0, #0
 800144a:	f000 fe7d 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 800144e:	49ab      	ldr	r1, [pc, #684]	; (80016fc <OTM8009A_Init+0x34c>)
 8001450:	2000      	movs	r0, #0
 8001452:	f000 fe79 	bl	8002148 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001456:	49aa      	ldr	r1, [pc, #680]	; (8001700 <OTM8009A_Init+0x350>)
 8001458:	2000      	movs	r0, #0
 800145a:	f000 fe75 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800145e:	49a9      	ldr	r1, [pc, #676]	; (8001704 <OTM8009A_Init+0x354>)
 8001460:	2000      	movs	r0, #0
 8001462:	f000 fe71 	bl	8002148 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8001466:	49a8      	ldr	r1, [pc, #672]	; (8001708 <OTM8009A_Init+0x358>)
 8001468:	2000      	movs	r0, #0
 800146a:	f000 fe6d 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800146e:	49a7      	ldr	r1, [pc, #668]	; (800170c <OTM8009A_Init+0x35c>)
 8001470:	2000      	movs	r0, #0
 8001472:	f000 fe69 	bl	8002148 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001476:	49a6      	ldr	r1, [pc, #664]	; (8001710 <OTM8009A_Init+0x360>)
 8001478:	2000      	movs	r0, #0
 800147a:	f000 fe65 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800147e:	499a      	ldr	r1, [pc, #616]	; (80016e8 <OTM8009A_Init+0x338>)
 8001480:	2000      	movs	r0, #0
 8001482:	f000 fe61 	bl	8002148 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001486:	498e      	ldr	r1, [pc, #568]	; (80016c0 <OTM8009A_Init+0x310>)
 8001488:	2000      	movs	r0, #0
 800148a:	f000 fe5d 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800148e:	49a1      	ldr	r1, [pc, #644]	; (8001714 <OTM8009A_Init+0x364>)
 8001490:	2002      	movs	r0, #2
 8001492:	f000 fe59 	bl	8002148 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8001496:	49a0      	ldr	r1, [pc, #640]	; (8001718 <OTM8009A_Init+0x368>)
 8001498:	2000      	movs	r0, #0
 800149a:	f000 fe55 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800149e:	499f      	ldr	r1, [pc, #636]	; (800171c <OTM8009A_Init+0x36c>)
 80014a0:	2000      	movs	r0, #0
 80014a2:	f000 fe51 	bl	8002148 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80014a6:	499e      	ldr	r1, [pc, #632]	; (8001720 <OTM8009A_Init+0x370>)
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 fe4d 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80014ae:	499d      	ldr	r1, [pc, #628]	; (8001724 <OTM8009A_Init+0x374>)
 80014b0:	2000      	movs	r0, #0
 80014b2:	f000 fe49 	bl	8002148 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80014b6:	499c      	ldr	r1, [pc, #624]	; (8001728 <OTM8009A_Init+0x378>)
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 fe45 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80014be:	499b      	ldr	r1, [pc, #620]	; (800172c <OTM8009A_Init+0x37c>)
 80014c0:	2000      	movs	r0, #0
 80014c2:	f000 fe41 	bl	8002148 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80014c6:	498c      	ldr	r1, [pc, #560]	; (80016f8 <OTM8009A_Init+0x348>)
 80014c8:	2000      	movs	r0, #0
 80014ca:	f000 fe3d 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80014ce:	4998      	ldr	r1, [pc, #608]	; (8001730 <OTM8009A_Init+0x380>)
 80014d0:	2000      	movs	r0, #0
 80014d2:	f000 fe39 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80014d6:	498a      	ldr	r1, [pc, #552]	; (8001700 <OTM8009A_Init+0x350>)
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 fe35 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 80014de:	4995      	ldr	r1, [pc, #596]	; (8001734 <OTM8009A_Init+0x384>)
 80014e0:	2000      	movs	r0, #0
 80014e2:	f000 fe31 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 80014e6:	4994      	ldr	r1, [pc, #592]	; (8001738 <OTM8009A_Init+0x388>)
 80014e8:	2000      	movs	r0, #0
 80014ea:	f000 fe2d 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80014ee:	4993      	ldr	r1, [pc, #588]	; (800173c <OTM8009A_Init+0x38c>)
 80014f0:	2002      	movs	r0, #2
 80014f2:	f000 fe29 	bl	8002148 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80014f6:	4974      	ldr	r1, [pc, #464]	; (80016c8 <OTM8009A_Init+0x318>)
 80014f8:	2000      	movs	r0, #0
 80014fa:	f000 fe25 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80014fe:	4990      	ldr	r1, [pc, #576]	; (8001740 <OTM8009A_Init+0x390>)
 8001500:	2006      	movs	r0, #6
 8001502:	f000 fe21 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001506:	498f      	ldr	r1, [pc, #572]	; (8001744 <OTM8009A_Init+0x394>)
 8001508:	2000      	movs	r0, #0
 800150a:	f000 fe1d 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800150e:	498e      	ldr	r1, [pc, #568]	; (8001748 <OTM8009A_Init+0x398>)
 8001510:	200e      	movs	r0, #14
 8001512:	f000 fe19 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001516:	498d      	ldr	r1, [pc, #564]	; (800174c <OTM8009A_Init+0x39c>)
 8001518:	2000      	movs	r0, #0
 800151a:	f000 fe15 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800151e:	498c      	ldr	r1, [pc, #560]	; (8001750 <OTM8009A_Init+0x3a0>)
 8001520:	200e      	movs	r0, #14
 8001522:	f000 fe11 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001526:	498b      	ldr	r1, [pc, #556]	; (8001754 <OTM8009A_Init+0x3a4>)
 8001528:	2000      	movs	r0, #0
 800152a:	f000 fe0d 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 800152e:	498a      	ldr	r1, [pc, #552]	; (8001758 <OTM8009A_Init+0x3a8>)
 8001530:	200a      	movs	r0, #10
 8001532:	f000 fe09 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001536:	4989      	ldr	r1, [pc, #548]	; (800175c <OTM8009A_Init+0x3ac>)
 8001538:	2000      	movs	r0, #0
 800153a:	f000 fe05 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 800153e:	4988      	ldr	r1, [pc, #544]	; (8001760 <OTM8009A_Init+0x3b0>)
 8001540:	2000      	movs	r0, #0
 8001542:	f000 fe01 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001546:	4960      	ldr	r1, [pc, #384]	; (80016c8 <OTM8009A_Init+0x318>)
 8001548:	2000      	movs	r0, #0
 800154a:	f000 fdfd 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 800154e:	4985      	ldr	r1, [pc, #532]	; (8001764 <OTM8009A_Init+0x3b4>)
 8001550:	200a      	movs	r0, #10
 8001552:	f000 fdf9 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001556:	4984      	ldr	r1, [pc, #528]	; (8001768 <OTM8009A_Init+0x3b8>)
 8001558:	2000      	movs	r0, #0
 800155a:	f000 fdf5 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 800155e:	4983      	ldr	r1, [pc, #524]	; (800176c <OTM8009A_Init+0x3bc>)
 8001560:	200f      	movs	r0, #15
 8001562:	f000 fdf1 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001566:	4977      	ldr	r1, [pc, #476]	; (8001744 <OTM8009A_Init+0x394>)
 8001568:	2000      	movs	r0, #0
 800156a:	f000 fded 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 800156e:	4980      	ldr	r1, [pc, #512]	; (8001770 <OTM8009A_Init+0x3c0>)
 8001570:	200f      	movs	r0, #15
 8001572:	f000 fde9 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001576:	4975      	ldr	r1, [pc, #468]	; (800174c <OTM8009A_Init+0x39c>)
 8001578:	2000      	movs	r0, #0
 800157a:	f000 fde5 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 800157e:	497d      	ldr	r1, [pc, #500]	; (8001774 <OTM8009A_Init+0x3c4>)
 8001580:	200a      	movs	r0, #10
 8001582:	f000 fde1 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001586:	4973      	ldr	r1, [pc, #460]	; (8001754 <OTM8009A_Init+0x3a4>)
 8001588:	2000      	movs	r0, #0
 800158a:	f000 fddd 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 800158e:	497a      	ldr	r1, [pc, #488]	; (8001778 <OTM8009A_Init+0x3c8>)
 8001590:	200f      	movs	r0, #15
 8001592:	f000 fdd9 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001596:	4971      	ldr	r1, [pc, #452]	; (800175c <OTM8009A_Init+0x3ac>)
 8001598:	2000      	movs	r0, #0
 800159a:	f000 fdd5 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 800159e:	4977      	ldr	r1, [pc, #476]	; (800177c <OTM8009A_Init+0x3cc>)
 80015a0:	200f      	movs	r0, #15
 80015a2:	f000 fdd1 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80015a6:	4976      	ldr	r1, [pc, #472]	; (8001780 <OTM8009A_Init+0x3d0>)
 80015a8:	2000      	movs	r0, #0
 80015aa:	f000 fdcd 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80015ae:	4975      	ldr	r1, [pc, #468]	; (8001784 <OTM8009A_Init+0x3d4>)
 80015b0:	200a      	movs	r0, #10
 80015b2:	f000 fdc9 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80015b6:	4974      	ldr	r1, [pc, #464]	; (8001788 <OTM8009A_Init+0x3d8>)
 80015b8:	2000      	movs	r0, #0
 80015ba:	f000 fdc5 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 80015be:	4973      	ldr	r1, [pc, #460]	; (800178c <OTM8009A_Init+0x3dc>)
 80015c0:	200a      	movs	r0, #10
 80015c2:	f000 fdc1 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80015c6:	4940      	ldr	r1, [pc, #256]	; (80016c8 <OTM8009A_Init+0x318>)
 80015c8:	2000      	movs	r0, #0
 80015ca:	f000 fdbd 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80015ce:	4970      	ldr	r1, [pc, #448]	; (8001790 <OTM8009A_Init+0x3e0>)
 80015d0:	200a      	movs	r0, #10
 80015d2:	f000 fdb9 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80015d6:	4964      	ldr	r1, [pc, #400]	; (8001768 <OTM8009A_Init+0x3b8>)
 80015d8:	2000      	movs	r0, #0
 80015da:	f000 fdb5 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 80015de:	496d      	ldr	r1, [pc, #436]	; (8001794 <OTM8009A_Init+0x3e4>)
 80015e0:	200f      	movs	r0, #15
 80015e2:	f000 fdb1 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80015e6:	4957      	ldr	r1, [pc, #348]	; (8001744 <OTM8009A_Init+0x394>)
 80015e8:	2000      	movs	r0, #0
 80015ea:	f000 fdad 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80015ee:	496a      	ldr	r1, [pc, #424]	; (8001798 <OTM8009A_Init+0x3e8>)
 80015f0:	200f      	movs	r0, #15
 80015f2:	f000 fda9 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80015f6:	4955      	ldr	r1, [pc, #340]	; (800174c <OTM8009A_Init+0x39c>)
 80015f8:	2000      	movs	r0, #0
 80015fa:	f000 fda5 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80015fe:	4967      	ldr	r1, [pc, #412]	; (800179c <OTM8009A_Init+0x3ec>)
 8001600:	200a      	movs	r0, #10
 8001602:	f000 fda1 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001606:	4953      	ldr	r1, [pc, #332]	; (8001754 <OTM8009A_Init+0x3a4>)
 8001608:	2000      	movs	r0, #0
 800160a:	f000 fd9d 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800160e:	4964      	ldr	r1, [pc, #400]	; (80017a0 <OTM8009A_Init+0x3f0>)
 8001610:	200f      	movs	r0, #15
 8001612:	f000 fd99 	bl	8002148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001616:	4951      	ldr	r1, [pc, #324]	; (800175c <OTM8009A_Init+0x3ac>)
 8001618:	2000      	movs	r0, #0
 800161a:	f000 fd95 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800161e:	4961      	ldr	r1, [pc, #388]	; (80017a4 <OTM8009A_Init+0x3f4>)
 8001620:	200f      	movs	r0, #15
 8001622:	f000 fd91 	bl	8002148 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001626:	4934      	ldr	r1, [pc, #208]	; (80016f8 <OTM8009A_Init+0x348>)
 8001628:	2000      	movs	r0, #0
 800162a:	f000 fd8d 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800162e:	495e      	ldr	r1, [pc, #376]	; (80017a8 <OTM8009A_Init+0x3f8>)
 8001630:	2000      	movs	r0, #0
 8001632:	f000 fd89 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8001636:	495d      	ldr	r1, [pc, #372]	; (80017ac <OTM8009A_Init+0x3fc>)
 8001638:	2000      	movs	r0, #0
 800163a:	f000 fd85 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 800163e:	495c      	ldr	r1, [pc, #368]	; (80017b0 <OTM8009A_Init+0x400>)
 8001640:	2000      	movs	r0, #0
 8001642:	f000 fd81 	bl	8002148 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8001646:	495b      	ldr	r1, [pc, #364]	; (80017b4 <OTM8009A_Init+0x404>)
 8001648:	2000      	movs	r0, #0
 800164a:	f000 fd7d 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 800164e:	495a      	ldr	r1, [pc, #360]	; (80017b8 <OTM8009A_Init+0x408>)
 8001650:	2000      	movs	r0, #0
 8001652:	f000 fd79 	bl	8002148 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001656:	491a      	ldr	r1, [pc, #104]	; (80016c0 <OTM8009A_Init+0x310>)
 8001658:	2000      	movs	r0, #0
 800165a:	f000 fd75 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 800165e:	4957      	ldr	r1, [pc, #348]	; (80017bc <OTM8009A_Init+0x40c>)
 8001660:	2003      	movs	r0, #3
 8001662:	f000 fd71 	bl	8002148 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001666:	4916      	ldr	r1, [pc, #88]	; (80016c0 <OTM8009A_Init+0x310>)
 8001668:	2000      	movs	r0, #0
 800166a:	f000 fd6d 	bl	8002148 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800166e:	4914      	ldr	r1, [pc, #80]	; (80016c0 <OTM8009A_Init+0x310>)
 8001670:	2000      	movs	r0, #0
 8001672:	f000 fd69 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8001676:	4952      	ldr	r1, [pc, #328]	; (80017c0 <OTM8009A_Init+0x410>)
 8001678:	2010      	movs	r0, #16
 800167a:	f000 fd65 	bl	8002148 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800167e:	4910      	ldr	r1, [pc, #64]	; (80016c0 <OTM8009A_Init+0x310>)
 8001680:	2000      	movs	r0, #0
 8001682:	f000 fd61 	bl	8002148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8001686:	494f      	ldr	r1, [pc, #316]	; (80017c4 <OTM8009A_Init+0x414>)
 8001688:	2010      	movs	r0, #16
 800168a:	f000 fd5d 	bl	8002148 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 800168e:	494e      	ldr	r1, [pc, #312]	; (80017c8 <OTM8009A_Init+0x418>)
 8001690:	2000      	movs	r0, #0
 8001692:	f000 fd59 	bl	8002148 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8001696:	2078      	movs	r0, #120	; 0x78
 8001698:	f000 f8e2 	bl	8001860 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <OTM8009A_Init+0x304>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	f040 8095 	bne.w	80017d4 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 80016aa:	4948      	ldr	r1, [pc, #288]	; (80017cc <OTM8009A_Init+0x41c>)
 80016ac:	2000      	movs	r0, #0
 80016ae:	f000 fd4b 	bl	8002148 <DSI_IO_WriteCmd>
    break;
 80016b2:	e090      	b.n	80017d6 <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80016b4:	4946      	ldr	r1, [pc, #280]	; (80017d0 <OTM8009A_Init+0x420>)
 80016b6:	2000      	movs	r0, #0
 80016b8:	f000 fd46 	bl	8002148 <DSI_IO_WriteCmd>
    break;
 80016bc:	e08b      	b.n	80017d6 <OTM8009A_Init+0x426>
 80016be:	bf00      	nop
 80016c0:	0800b344 	.word	0x0800b344
 80016c4:	0800b1fc 	.word	0x0800b1fc
 80016c8:	0800b348 	.word	0x0800b348
 80016cc:	0800b200 	.word	0x0800b200
 80016d0:	0800b34c 	.word	0x0800b34c
 80016d4:	0800b350 	.word	0x0800b350
 80016d8:	0800b354 	.word	0x0800b354
 80016dc:	0800b358 	.word	0x0800b358
 80016e0:	0800b35c 	.word	0x0800b35c
 80016e4:	0800b360 	.word	0x0800b360
 80016e8:	0800b364 	.word	0x0800b364
 80016ec:	0800b368 	.word	0x0800b368
 80016f0:	0800b36c 	.word	0x0800b36c
 80016f4:	0800b370 	.word	0x0800b370
 80016f8:	0800b374 	.word	0x0800b374
 80016fc:	0800b378 	.word	0x0800b378
 8001700:	0800b37c 	.word	0x0800b37c
 8001704:	0800b380 	.word	0x0800b380
 8001708:	0800b384 	.word	0x0800b384
 800170c:	0800b388 	.word	0x0800b388
 8001710:	0800b38c 	.word	0x0800b38c
 8001714:	0800b22c 	.word	0x0800b22c
 8001718:	0800b390 	.word	0x0800b390
 800171c:	0800b394 	.word	0x0800b394
 8001720:	0800b398 	.word	0x0800b398
 8001724:	0800b39c 	.word	0x0800b39c
 8001728:	0800b3a0 	.word	0x0800b3a0
 800172c:	0800b3a4 	.word	0x0800b3a4
 8001730:	0800b3a8 	.word	0x0800b3a8
 8001734:	0800b3ac 	.word	0x0800b3ac
 8001738:	0800b3b0 	.word	0x0800b3b0
 800173c:	0800b230 	.word	0x0800b230
 8001740:	0800b234 	.word	0x0800b234
 8001744:	0800b3b4 	.word	0x0800b3b4
 8001748:	0800b23c 	.word	0x0800b23c
 800174c:	0800b3b8 	.word	0x0800b3b8
 8001750:	0800b24c 	.word	0x0800b24c
 8001754:	0800b3bc 	.word	0x0800b3bc
 8001758:	0800b25c 	.word	0x0800b25c
 800175c:	0800b3c0 	.word	0x0800b3c0
 8001760:	0800b3f8 	.word	0x0800b3f8
 8001764:	0800b268 	.word	0x0800b268
 8001768:	0800b3c4 	.word	0x0800b3c4
 800176c:	0800b274 	.word	0x0800b274
 8001770:	0800b284 	.word	0x0800b284
 8001774:	0800b294 	.word	0x0800b294
 8001778:	0800b2a0 	.word	0x0800b2a0
 800177c:	0800b2b0 	.word	0x0800b2b0
 8001780:	0800b3c8 	.word	0x0800b3c8
 8001784:	0800b2c0 	.word	0x0800b2c0
 8001788:	0800b3cc 	.word	0x0800b3cc
 800178c:	0800b2cc 	.word	0x0800b2cc
 8001790:	0800b2d8 	.word	0x0800b2d8
 8001794:	0800b2e4 	.word	0x0800b2e4
 8001798:	0800b2f4 	.word	0x0800b2f4
 800179c:	0800b304 	.word	0x0800b304
 80017a0:	0800b310 	.word	0x0800b310
 80017a4:	0800b320 	.word	0x0800b320
 80017a8:	0800b3fc 	.word	0x0800b3fc
 80017ac:	0800b400 	.word	0x0800b400
 80017b0:	0800b404 	.word	0x0800b404
 80017b4:	0800b408 	.word	0x0800b408
 80017b8:	0800b40c 	.word	0x0800b40c
 80017bc:	0800b330 	.word	0x0800b330
 80017c0:	0800b204 	.word	0x0800b204
 80017c4:	0800b218 	.word	0x0800b218
 80017c8:	0800b3d0 	.word	0x0800b3d0
 80017cc:	0800b3d4 	.word	0x0800b3d4
 80017d0:	0800b3d8 	.word	0x0800b3d8
  default :
    break;
 80017d4:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d10b      	bne.n	80017f4 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 80017dc:	4916      	ldr	r1, [pc, #88]	; (8001838 <OTM8009A_Init+0x488>)
 80017de:	2000      	movs	r0, #0
 80017e0:	f000 fcb2 	bl	8002148 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 80017e4:	4915      	ldr	r1, [pc, #84]	; (800183c <OTM8009A_Init+0x48c>)
 80017e6:	2004      	movs	r0, #4
 80017e8:	f000 fcae 	bl	8002148 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 80017ec:	4914      	ldr	r1, [pc, #80]	; (8001840 <OTM8009A_Init+0x490>)
 80017ee:	2004      	movs	r0, #4
 80017f0:	f000 fcaa 	bl	8002148 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 80017f4:	4913      	ldr	r1, [pc, #76]	; (8001844 <OTM8009A_Init+0x494>)
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 fca6 	bl	8002148 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 80017fc:	4912      	ldr	r1, [pc, #72]	; (8001848 <OTM8009A_Init+0x498>)
 80017fe:	2000      	movs	r0, #0
 8001800:	f000 fca2 	bl	8002148 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8001804:	4911      	ldr	r1, [pc, #68]	; (800184c <OTM8009A_Init+0x49c>)
 8001806:	2000      	movs	r0, #0
 8001808:	f000 fc9e 	bl	8002148 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 800180c:	4910      	ldr	r1, [pc, #64]	; (8001850 <OTM8009A_Init+0x4a0>)
 800180e:	2000      	movs	r0, #0
 8001810:	f000 fc9a 	bl	8002148 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8001814:	490f      	ldr	r1, [pc, #60]	; (8001854 <OTM8009A_Init+0x4a4>)
 8001816:	2000      	movs	r0, #0
 8001818:	f000 fc96 	bl	8002148 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800181c:	490e      	ldr	r1, [pc, #56]	; (8001858 <OTM8009A_Init+0x4a8>)
 800181e:	2000      	movs	r0, #0
 8001820:	f000 fc92 	bl	8002148 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8001824:	490d      	ldr	r1, [pc, #52]	; (800185c <OTM8009A_Init+0x4ac>)
 8001826:	2000      	movs	r0, #0
 8001828:	f000 fc8e 	bl	8002148 <DSI_IO_WriteCmd>

  return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	0800b3dc 	.word	0x0800b3dc
 800183c:	0800b334 	.word	0x0800b334
 8001840:	0800b33c 	.word	0x0800b33c
 8001844:	0800b3e0 	.word	0x0800b3e0
 8001848:	0800b3e4 	.word	0x0800b3e4
 800184c:	0800b3e8 	.word	0x0800b3e8
 8001850:	0800b3ec 	.word	0x0800b3ec
 8001854:	0800b3f0 	.word	0x0800b3f0
 8001858:	0800b344 	.word	0x0800b344
 800185c:	0800b3f4 	.word	0x0800b3f4

08001860 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f001 f835 	bl	80028d8 <HAL_Delay>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800187a:	2001      	movs	r0, #1
 800187c:	f000 f804 	bl	8001888 <BSP_LCD_InitEx>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b090      	sub	sp, #64	; 0x40
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8001892:	f646 3325 	movw	r3, #27429	; 0x6b25
 8001896:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 80018a0:	f000 f936 	bl	8001b10 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 80018a4:	f000 fc7a 	bl	800219c <LCD_IO_GetID>
 80018a8:	4603      	mov	r3, r0
 80018aa:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 80018ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80018ae:	2b11      	cmp	r3, #17
 80018b0:	d001      	beq.n	80018b6 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 80018b2:	2301      	movs	r3, #1
 80018b4:	e113      	b.n	8001ade <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 80018b6:	f000 fc79 	bl	80021ac <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 80018ba:	4b8b      	ldr	r3, [pc, #556]	; (8001ae8 <BSP_LCD_InitEx+0x260>)
 80018bc:	4a8b      	ldr	r2, [pc, #556]	; (8001aec <BSP_LCD_InitEx+0x264>)
 80018be:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 80018c0:	4889      	ldr	r0, [pc, #548]	; (8001ae8 <BSP_LCD_InitEx+0x260>)
 80018c2:	f001 ff11 	bl	80036e8 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 80018c6:	2364      	movs	r3, #100	; 0x64
 80018c8:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 80018ca:	2305      	movs	r3, #5
 80018cc:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 80018d2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80018d8:	4b83      	ldr	r3, [pc, #524]	; (8001ae8 <BSP_LCD_InitEx+0x260>)
 80018da:	2201      	movs	r2, #1
 80018dc:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 80018de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	4a83      	ldr	r2, [pc, #524]	; (8001af0 <BSP_LCD_InitEx+0x268>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	0a9b      	lsrs	r3, r3, #10
 80018ea:	4a7f      	ldr	r2, [pc, #508]	; (8001ae8 <BSP_LCD_InitEx+0x260>)
 80018ec:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	4619      	mov	r1, r3
 80018f4:	487c      	ldr	r0, [pc, #496]	; (8001ae8 <BSP_LCD_InitEx+0x260>)
 80018f6:	f001 fddd 	bl	80034b4 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d108      	bne.n	8001912 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001900:	4b7c      	ldr	r3, [pc, #496]	; (8001af4 <BSP_LCD_InitEx+0x26c>)
 8001902:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001906:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8001908:	4b7b      	ldr	r3, [pc, #492]	; (8001af8 <BSP_LCD_InitEx+0x270>)
 800190a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e007      	b.n	8001922 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001912:	4b78      	ldr	r3, [pc, #480]	; (8001af4 <BSP_LCD_InitEx+0x26c>)
 8001914:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001918:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800191a:	4b77      	ldr	r3, [pc, #476]	; (8001af8 <BSP_LCD_InitEx+0x270>)
 800191c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001920:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8001922:	4b74      	ldr	r3, [pc, #464]	; (8001af4 <BSP_LCD_InitEx+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8001928:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <BSP_LCD_InitEx+0x270>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 800192e:	2301      	movs	r3, #1
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8001932:	230f      	movs	r3, #15
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 8001936:	2310      	movs	r3, #16
 8001938:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800193a:	2302      	movs	r3, #2
 800193c:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 800193e:	2322      	movs	r3, #34	; 0x22
 8001940:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8001942:	2322      	movs	r3, #34	; 0x22
 8001944:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8001946:	4b6d      	ldr	r3, [pc, #436]	; (8001afc <BSP_LCD_InitEx+0x274>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 800194c:	4b6b      	ldr	r3, [pc, #428]	; (8001afc <BSP_LCD_InitEx+0x274>)
 800194e:	2205      	movs	r2, #5
 8001950:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001952:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <BSP_LCD_InitEx+0x274>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8001958:	4b68      	ldr	r3, [pc, #416]	; (8001afc <BSP_LCD_InitEx+0x274>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 800195e:	4b67      	ldr	r3, [pc, #412]	; (8001afc <BSP_LCD_InitEx+0x274>)
 8001960:	2200      	movs	r2, #0
 8001962:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8001964:	4b65      	ldr	r3, [pc, #404]	; (8001afc <BSP_LCD_InitEx+0x274>)
 8001966:	2202      	movs	r2, #2
 8001968:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800196a:	4b64      	ldr	r3, [pc, #400]	; (8001afc <BSP_LCD_InitEx+0x274>)
 800196c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001970:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8001972:	4b62      	ldr	r3, [pc, #392]	; (8001afc <BSP_LCD_InitEx+0x274>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8001978:	4a60      	ldr	r2, [pc, #384]	; (8001afc <BSP_LCD_InitEx+0x274>)
 800197a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197c:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001982:	fb03 f202 	mul.w	r2, r3, r2
 8001986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	4a5b      	ldr	r2, [pc, #364]	; (8001afc <BSP_LCD_InitEx+0x274>)
 800198e:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001994:	fb03 f202 	mul.w	r2, r3, r2
 8001998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4a57      	ldr	r2, [pc, #348]	; (8001afc <BSP_LCD_InitEx+0x274>)
 80019a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80019a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	441a      	add	r2, r3
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	441a      	add	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	4413      	add	r3, r2
 80019b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019b2:	fb03 f202 	mul.w	r2, r3, r2
 80019b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	4a4f      	ldr	r2, [pc, #316]	; (8001afc <BSP_LCD_InitEx+0x274>)
 80019be:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 80019c0:	4a4e      	ldr	r2, [pc, #312]	; (8001afc <BSP_LCD_InitEx+0x274>)
 80019c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c4:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 80019c6:	4a4d      	ldr	r2, [pc, #308]	; (8001afc <BSP_LCD_InitEx+0x274>)
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 80019cc:	4a4b      	ldr	r2, [pc, #300]	; (8001afc <BSP_LCD_InitEx+0x274>)
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 80019d2:	4a4a      	ldr	r2, [pc, #296]	; (8001afc <BSP_LCD_InitEx+0x274>)
 80019d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d6:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 80019d8:	4b48      	ldr	r3, [pc, #288]	; (8001afc <BSP_LCD_InitEx+0x274>)
 80019da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 80019e0:	4b46      	ldr	r3, [pc, #280]	; (8001afc <BSP_LCD_InitEx+0x274>)
 80019e2:	2210      	movs	r2, #16
 80019e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 80019e6:	4b45      	ldr	r3, [pc, #276]	; (8001afc <BSP_LCD_InitEx+0x274>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 80019ec:	4b43      	ldr	r3, [pc, #268]	; (8001afc <BSP_LCD_InitEx+0x274>)
 80019ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f2:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 80019f4:	4b41      	ldr	r3, [pc, #260]	; (8001afc <BSP_LCD_InitEx+0x274>)
 80019f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019fa:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 80019fc:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <BSP_LCD_InitEx+0x274>)
 80019fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a02:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001a04:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <BSP_LCD_InitEx+0x274>)
 8001a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0a:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <BSP_LCD_InitEx+0x274>)
 8001a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a12:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <BSP_LCD_InitEx+0x274>)
 8001a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001a1c:	4937      	ldr	r1, [pc, #220]	; (8001afc <BSP_LCD_InitEx+0x274>)
 8001a1e:	4832      	ldr	r0, [pc, #200]	; (8001ae8 <BSP_LCD_InitEx+0x260>)
 8001a20:	f001 feea 	bl	80037f8 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	4a35      	ldr	r2, [pc, #212]	; (8001b00 <BSP_LCD_InitEx+0x278>)
 8001a2a:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4413      	add	r3, r2
 8001a32:	3b01      	subs	r3, #1
 8001a34:	4a32      	ldr	r2, [pc, #200]	; (8001b00 <BSP_LCD_InitEx+0x278>)
 8001a36:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8001a38:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <BSP_LCD_InitEx+0x26c>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	441a      	add	r2, r3
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	4413      	add	r3, r2
 8001a44:	3b01      	subs	r3, #1
 8001a46:	4a2e      	ldr	r2, [pc, #184]	; (8001b00 <BSP_LCD_InitEx+0x278>)
 8001a48:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <BSP_LCD_InitEx+0x26c>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	441a      	add	r2, r3
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	441a      	add	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	4413      	add	r3, r2
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	4a28      	ldr	r2, [pc, #160]	; (8001b00 <BSP_LCD_InitEx+0x278>)
 8001a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8001a60:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <BSP_LCD_InitEx+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <BSP_LCD_InitEx+0x278>)
 8001a66:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <BSP_LCD_InitEx+0x270>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a24      	ldr	r2, [pc, #144]	; (8001b00 <BSP_LCD_InitEx+0x278>)
 8001a6e:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <BSP_LCD_InitEx+0x27c>)
 8001a72:	2208      	movs	r2, #8
 8001a74:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <BSP_LCD_InitEx+0x27c>)
 8001a78:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001a7c:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <BSP_LCD_InitEx+0x27c>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <BSP_LCD_InitEx+0x27c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001a8a:	481e      	ldr	r0, [pc, #120]	; (8001b04 <BSP_LCD_InitEx+0x27c>)
 8001a8c:	f003 fb3a 	bl	8005104 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <BSP_LCD_InitEx+0x278>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <BSP_LCD_InitEx+0x278>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <BSP_LCD_InitEx+0x278>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <BSP_LCD_InitEx+0x278>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8001aae:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <BSP_LCD_InitEx+0x278>)
 8001ab0:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <BSP_LCD_InitEx+0x280>)
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8001ab4:	4911      	ldr	r1, [pc, #68]	; (8001afc <BSP_LCD_InitEx+0x274>)
 8001ab6:	4812      	ldr	r0, [pc, #72]	; (8001b00 <BSP_LCD_InitEx+0x278>)
 8001ab8:	f002 fe24 	bl	8004704 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8001abc:	4810      	ldr	r0, [pc, #64]	; (8001b00 <BSP_LCD_InitEx+0x278>)
 8001abe:	f002 fb6f 	bl	80041a0 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8001ac2:	4809      	ldr	r0, [pc, #36]	; (8001ae8 <BSP_LCD_InitEx+0x260>)
 8001ac4:	f002 f898 	bl	8003bf8 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001ac8:	f000 fcf0 	bl	80024ac <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001acc:	480f      	ldr	r0, [pc, #60]	; (8001b0c <BSP_LCD_InitEx+0x284>)
 8001ace:	f000 f901 	bl	8001cd4 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fc6a 	bl	80013b0 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3740      	adds	r7, #64	; 0x40
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000270 	.word	0x20000270
 8001aec:	40016c00 	.word	0x40016c00
 8001af0:	43215e57 	.word	0x43215e57
 8001af4:	20000010 	.word	0x20000010
 8001af8:	20000014 	.word	0x20000014
 8001afc:	20000104 	.word	0x20000104
 8001b00:	200001c8 	.word	0x200001c8
 8001b04:	200002a8 	.word	0x200002a8
 8001b08:	40016800 	.word	0x40016800
 8001b0c:	20000008 	.word	0x20000008

08001b10 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <BSP_LCD_Reset+0x68>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <BSP_LCD_Reset+0x68>)
 8001b1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <BSP_LCD_Reset+0x68>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8001b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b32:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4619      	mov	r1, r3
 8001b44:	480d      	ldr	r0, [pc, #52]	; (8001b7c <BSP_LCD_Reset+0x6c>)
 8001b46:	f002 f94d 	bl	8003de4 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b50:	480a      	ldr	r0, [pc, #40]	; (8001b7c <BSP_LCD_Reset+0x6c>)
 8001b52:	f002 fb0b 	bl	800416c <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8001b56:	2014      	movs	r0, #20
 8001b58:	f000 febe 	bl	80028d8 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b62:	4806      	ldr	r0, [pc, #24]	; (8001b7c <BSP_LCD_Reset+0x6c>)
 8001b64:	f002 fb02 	bl	800416c <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8001b68:	200a      	movs	r0, #10
 8001b6a:	f000 feb5 	bl	80028d8 <HAL_Delay>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40022400 	.word	0x40022400

08001b80 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <BSP_LCD_GetXSize+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000010 	.word	0x20000010

08001b98 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <BSP_LCD_GetYSize+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000014 	.word	0x20000014

08001bb0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b090      	sub	sp, #64	; 0x40
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001bc0:	f7ff ffde 	bl	8001b80 <BSP_LCD_GetXSize>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001bcc:	f7ff ffe4 	bl	8001b98 <BSP_LCD_GetYSize>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001bdc:	23ff      	movs	r3, #255	; 0xff
 8001bde:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001bf6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001bfc:	2307      	movs	r3, #7
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001c00:	f7ff ffbe 	bl	8001b80 <BSP_LCD_GetXSize>
 8001c04:	4603      	mov	r3, r0
 8001c06:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001c08:	f7ff ffc6 	bl	8001b98 <BSP_LCD_GetYSize>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001c10:	88fa      	ldrh	r2, [r7, #6]
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4619      	mov	r1, r3
 8001c18:	4812      	ldr	r0, [pc, #72]	; (8001c64 <BSP_LCD_LayerDefaultInit+0xb4>)
 8001c1a:	f002 fb9b 	bl	8004354 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001c1e:	88fa      	ldrh	r2, [r7, #6]
 8001c20:	4911      	ldr	r1, [pc, #68]	; (8001c68 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001c22:	4613      	mov	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c32:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001c34:	88fa      	ldrh	r2, [r7, #6]
 8001c36:	490c      	ldr	r1, [pc, #48]	; (8001c68 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	3308      	adds	r3, #8
 8001c44:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <BSP_LCD_LayerDefaultInit+0xbc>)
 8001c46:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001c48:	88fa      	ldrh	r2, [r7, #6]
 8001c4a:	4907      	ldr	r1, [pc, #28]	; (8001c68 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001c5a:	601a      	str	r2, [r3, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	3740      	adds	r7, #64	; 0x40
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	200001c8 	.word	0x200001c8
 8001c68:	20000290 	.word	0x20000290
 8001c6c:	20000008 	.word	0x20000008

08001c70 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <BSP_LCD_SetTextColor+0x28>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4907      	ldr	r1, [pc, #28]	; (8001c9c <BSP_LCD_SetTextColor+0x2c>)
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	601a      	str	r2, [r3, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	2000028c 	.word	0x2000028c
 8001c9c:	20000290 	.word	0x20000290

08001ca0 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <BSP_LCD_SetBackColor+0x2c>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4908      	ldr	r1, [pc, #32]	; (8001cd0 <BSP_LCD_SetBackColor+0x30>)
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3304      	adds	r3, #4
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	601a      	str	r2, [r3, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2000028c 	.word	0x2000028c
 8001cd0:	20000290 	.word	0x20000290

08001cd4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <BSP_LCD_SetFont+0x2c>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4908      	ldr	r1, [pc, #32]	; (8001d04 <BSP_LCD_SetFont+0x30>)
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	3308      	adds	r3, #8
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	601a      	str	r2, [r3, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	2000028c 	.word	0x2000028c
 8001d04:	20000290 	.word	0x20000290

08001d08 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <BSP_LCD_GetFont+0x24>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4907      	ldr	r1, [pc, #28]	; (8001d30 <BSP_LCD_GetFont+0x28>)
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3308      	adds	r3, #8
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	2000028c 	.word	0x2000028c
 8001d30:	20000290 	.word	0x20000290

08001d34 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <BSP_LCD_Clear+0x48>)
 8001d3e:	681c      	ldr	r4, [r3, #0]
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <BSP_LCD_Clear+0x48>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <BSP_LCD_Clear+0x4c>)
 8001d46:	2134      	movs	r1, #52	; 0x34
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	335c      	adds	r3, #92	; 0x5c
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	461e      	mov	r6, r3
 8001d54:	f7ff ff14 	bl	8001b80 <BSP_LCD_GetXSize>
 8001d58:	4605      	mov	r5, r0
 8001d5a:	f7ff ff1d 	bl	8001b98 <BSP_LCD_GetYSize>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	2300      	movs	r3, #0
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	462a      	mov	r2, r5
 8001d6c:	4631      	mov	r1, r6
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f000 fb64 	bl	800243c <LL_FillBuffer>
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d7c:	2000028c 	.word	0x2000028c
 8001d80:	200001c8 	.word	0x200001c8

08001d84 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line in currently active layer.
  * @param  Line: Line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <BSP_LCD_ClearStringLine+0xc0>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	492d      	ldr	r1, [pc, #180]	; (8001e48 <BSP_LCD_ClearStringLine+0xc4>)
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001da0:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <BSP_LCD_ClearStringLine+0xc0>)
 8001da2:	6819      	ldr	r1, [r3, #0]
 8001da4:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <BSP_LCD_ClearStringLine+0xc0>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4827      	ldr	r0, [pc, #156]	; (8001e48 <BSP_LCD_ClearStringLine+0xc4>)
 8001daa:	460b      	mov	r3, r1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	440b      	add	r3, r1
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4403      	add	r3, r0
 8001db4:	3304      	adds	r3, #4
 8001db6:	6819      	ldr	r1, [r3, #0]
 8001db8:	4823      	ldr	r0, [pc, #140]	; (8001e48 <BSP_LCD_ClearStringLine+0xc4>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4403      	add	r3, r0
 8001dc4:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <BSP_LCD_ClearStringLine+0xc0>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	491f      	ldr	r1, [pc, #124]	; (8001e48 <BSP_LCD_ClearStringLine+0xc4>)
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3308      	adds	r3, #8
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	88da      	ldrh	r2, [r3, #6]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	fb12 f303 	smulbb	r3, r2, r3
 8001de4:	b29c      	uxth	r4, r3
 8001de6:	f7ff fecb 	bl	8001b80 <BSP_LCD_GetXSize>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b299      	uxth	r1, r3
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <BSP_LCD_ClearStringLine+0xc0>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4815      	ldr	r0, [pc, #84]	; (8001e48 <BSP_LCD_ClearStringLine+0xc4>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4403      	add	r3, r0
 8001dfe:	3308      	adds	r3, #8
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	88db      	ldrh	r3, [r3, #6]
 8001e04:	460a      	mov	r2, r1
 8001e06:	4621      	mov	r1, r4
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f000 f943 	bl	8002094 <BSP_LCD_FillRect>

  DrawProp[ActiveLayer].TextColor = color_backup;
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <BSP_LCD_ClearStringLine+0xc0>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	490d      	ldr	r1, [pc, #52]	; (8001e48 <BSP_LCD_ClearStringLine+0xc4>)
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <BSP_LCD_ClearStringLine+0xc0>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4908      	ldr	r1, [pc, #32]	; (8001e48 <BSP_LCD_ClearStringLine+0xc4>)
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff1b 	bl	8001c70 <BSP_LCD_SetTextColor>
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd90      	pop	{r4, r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000028c 	.word	0x2000028c
 8001e48:	20000290 	.word	0x20000290

08001e4c <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
 8001e56:	460b      	mov	r3, r1
 8001e58:	80bb      	strh	r3, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <BSP_LCD_DisplayChar+0x80>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	491b      	ldr	r1, [pc, #108]	; (8001ed0 <BSP_LCD_DisplayChar+0x84>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3308      	adds	r3, #8
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6819      	ldr	r1, [r3, #0]
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <BSP_LCD_DisplayChar+0x80>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4c14      	ldr	r4, [pc, #80]	; (8001ed0 <BSP_LCD_DisplayChar+0x84>)
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4423      	add	r3, r4
 8001e8a:	3308      	adds	r3, #8
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e90:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <BSP_LCD_DisplayChar+0x80>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4c0d      	ldr	r4, [pc, #52]	; (8001ed0 <BSP_LCD_DisplayChar+0x84>)
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4423      	add	r3, r4
 8001ea4:	3308      	adds	r3, #8
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	889b      	ldrh	r3, [r3, #4]
 8001eaa:	3307      	adds	r3, #7
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	da00      	bge.n	8001eb2 <BSP_LCD_DisplayChar+0x66>
 8001eb0:	3307      	adds	r3, #7
 8001eb2:	10db      	asrs	r3, r3, #3
 8001eb4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001eb8:	18ca      	adds	r2, r1, r3
 8001eba:	88b9      	ldrh	r1, [r7, #4]
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fa04 	bl	80022cc <DrawChar>
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	2000028c 	.word	0x2000028c
 8001ed0:	20000290 	.word	0x20000290

08001ed4 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60ba      	str	r2, [r7, #8]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4603      	mov	r3, r0
 8001ee0:	81fb      	strh	r3, [r7, #14]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	81bb      	strh	r3, [r7, #12]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001eea:	2301      	movs	r3, #1
 8001eec:	83fb      	strh	r3, [r7, #30]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001efe:	e002      	b.n	8001f06 <BSP_LCD_DisplayStringAt+0x32>
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	3301      	adds	r3, #1
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	617a      	str	r2, [r7, #20]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f6      	bne.n	8001f00 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001f12:	f7ff fe35 	bl	8001b80 <BSP_LCD_GetXSize>
 8001f16:	4601      	mov	r1, r0
 8001f18:	4b50      	ldr	r3, [pc, #320]	; (800205c <BSP_LCD_DisplayStringAt+0x188>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4850      	ldr	r0, [pc, #320]	; (8002060 <BSP_LCD_DisplayStringAt+0x18c>)
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4403      	add	r3, r0
 8001f28:	3308      	adds	r3, #8
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	889b      	ldrh	r3, [r3, #4]
 8001f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f32:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d01c      	beq.n	8001f74 <BSP_LCD_DisplayStringAt+0xa0>
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	dc33      	bgt.n	8001fa6 <BSP_LCD_DisplayStringAt+0xd2>
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d002      	beq.n	8001f48 <BSP_LCD_DisplayStringAt+0x74>
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d019      	beq.n	8001f7a <BSP_LCD_DisplayStringAt+0xa6>
 8001f46:	e02e      	b.n	8001fa6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	1ad1      	subs	r1, r2, r3
 8001f4e:	4b43      	ldr	r3, [pc, #268]	; (800205c <BSP_LCD_DisplayStringAt+0x188>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4843      	ldr	r0, [pc, #268]	; (8002060 <BSP_LCD_DisplayStringAt+0x18c>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4403      	add	r3, r0
 8001f5e:	3308      	adds	r3, #8
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	889b      	ldrh	r3, [r3, #4]
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	89fb      	ldrh	r3, [r7, #14]
 8001f6e:	4413      	add	r3, r2
 8001f70:	83fb      	strh	r3, [r7, #30]
      break;
 8001f72:	e01b      	b.n	8001fac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001f74:	89fb      	ldrh	r3, [r7, #14]
 8001f76:	83fb      	strh	r3, [r7, #30]
      break;
 8001f78:	e018      	b.n	8001fac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	b299      	uxth	r1, r3
 8001f82:	4b36      	ldr	r3, [pc, #216]	; (800205c <BSP_LCD_DisplayStringAt+0x188>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4836      	ldr	r0, [pc, #216]	; (8002060 <BSP_LCD_DisplayStringAt+0x18c>)
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4403      	add	r3, r0
 8001f92:	3308      	adds	r3, #8
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	889b      	ldrh	r3, [r3, #4]
 8001f98:	fb11 f303 	smulbb	r3, r1, r3
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	89fb      	ldrh	r3, [r7, #14]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	83fb      	strh	r3, [r7, #30]
      break;
 8001fa4:	e002      	b.n	8001fac <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8001fa6:	89fb      	ldrh	r3, [r7, #14]
 8001fa8:	83fb      	strh	r3, [r7, #30]
      break;
 8001faa:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001fac:	8bfb      	ldrh	r3, [r7, #30]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <BSP_LCD_DisplayStringAt+0xe6>
 8001fb2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da1d      	bge.n	8001ff6 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001fbe:	e01a      	b.n	8001ff6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	89b9      	ldrh	r1, [r7, #12]
 8001fc6:	8bfb      	ldrh	r3, [r7, #30]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff3f 	bl	8001e4c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001fce:	4b23      	ldr	r3, [pc, #140]	; (800205c <BSP_LCD_DisplayStringAt+0x188>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4923      	ldr	r1, [pc, #140]	; (8002060 <BSP_LCD_DisplayStringAt+0x18c>)
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	3308      	adds	r3, #8
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	889a      	ldrh	r2, [r3, #4]
 8001fe4:	8bfb      	ldrh	r3, [r7, #30]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3301      	adds	r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
    i++;
 8001ff0:	8bbb      	ldrh	r3, [r7, #28]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf14      	ite	ne
 8001ffe:	2301      	movne	r3, #1
 8002000:	2300      	moveq	r3, #0
 8002002:	b2dc      	uxtb	r4, r3
 8002004:	f7ff fdbc 	bl	8001b80 <BSP_LCD_GetXSize>
 8002008:	8bb9      	ldrh	r1, [r7, #28]
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <BSP_LCD_DisplayStringAt+0x188>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4d14      	ldr	r5, [pc, #80]	; (8002060 <BSP_LCD_DisplayStringAt+0x18c>)
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	442b      	add	r3, r5
 800201a:	3308      	adds	r3, #8
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	889b      	ldrh	r3, [r3, #4]
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	1ac3      	subs	r3, r0, r3
 8002026:	b299      	uxth	r1, r3
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <BSP_LCD_DisplayStringAt+0x188>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	480c      	ldr	r0, [pc, #48]	; (8002060 <BSP_LCD_DisplayStringAt+0x18c>)
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4403      	add	r3, r0
 8002038:	3308      	adds	r3, #8
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	889b      	ldrh	r3, [r3, #4]
 800203e:	4299      	cmp	r1, r3
 8002040:	bf2c      	ite	cs
 8002042:	2301      	movcs	r3, #1
 8002044:	2300      	movcc	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	4023      	ands	r3, r4
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1b7      	bne.n	8001fc0 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3720      	adds	r7, #32
 8002056:	46bd      	mov	sp, r7
 8002058:	bdb0      	pop	{r4, r5, r7, pc}
 800205a:	bf00      	nop
 800205c:	2000028c 	.word	0x2000028c
 8002060:	20000290 	.word	0x20000290

08002064 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002070:	f7ff fe4a 	bl	8001d08 <BSP_LCD_GetFont>
 8002074:	4603      	mov	r3, r0
 8002076:	88db      	ldrh	r3, [r3, #6]
 8002078:	88fa      	ldrh	r2, [r7, #6]
 800207a:	fb12 f303 	smulbb	r3, r2, r3
 800207e:	b299      	uxth	r1, r3
 8002080:	2303      	movs	r3, #3
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	2000      	movs	r0, #0
 8002086:	f7ff ff25 	bl	8001ed4 <BSP_LCD_DisplayStringAt>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af02      	add	r7, sp, #8
 800209c:	4604      	mov	r4, r0
 800209e:	4608      	mov	r0, r1
 80020a0:	4611      	mov	r1, r2
 80020a2:	461a      	mov	r2, r3
 80020a4:	4623      	mov	r3, r4
 80020a6:	80fb      	strh	r3, [r7, #6]
 80020a8:	4603      	mov	r3, r0
 80020aa:	80bb      	strh	r3, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
 80020b0:	4613      	mov	r3, r2
 80020b2:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80020b8:	4b20      	ldr	r3, [pc, #128]	; (800213c <BSP_LCD_FillRect+0xa8>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4920      	ldr	r1, [pc, #128]	; (8002140 <BSP_LCD_FillRect+0xac>)
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fdd0 	bl	8001c70 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80020d0:	4b1a      	ldr	r3, [pc, #104]	; (800213c <BSP_LCD_FillRect+0xa8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1b      	ldr	r2, [pc, #108]	; (8002144 <BSP_LCD_FillRect+0xb0>)
 80020d6:	2134      	movs	r1, #52	; 0x34
 80020d8:	fb01 f303 	mul.w	r3, r1, r3
 80020dc:	4413      	add	r3, r2
 80020de:	335c      	adds	r3, #92	; 0x5c
 80020e0:	681c      	ldr	r4, [r3, #0]
 80020e2:	f7ff fd4d 	bl	8001b80 <BSP_LCD_GetXSize>
 80020e6:	4602      	mov	r2, r0
 80020e8:	88bb      	ldrh	r3, [r7, #4]
 80020ea:	fb03 f202 	mul.w	r2, r3, r2
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4423      	add	r3, r4
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <BSP_LCD_FillRect+0xa8>)
 80020fa:	681c      	ldr	r4, [r3, #0]
 80020fc:	68fd      	ldr	r5, [r7, #12]
 80020fe:	887e      	ldrh	r6, [r7, #2]
 8002100:	f8b7 8000 	ldrh.w	r8, [r7]
 8002104:	f7ff fd3c 	bl	8001b80 <BSP_LCD_GetXSize>
 8002108:	4602      	mov	r2, r0
 800210a:	887b      	ldrh	r3, [r7, #2]
 800210c:	1ad1      	subs	r1, r2, r3
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <BSP_LCD_FillRect+0xa8>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	480b      	ldr	r0, [pc, #44]	; (8002140 <BSP_LCD_FillRect+0xac>)
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4403      	add	r3, r0
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	9100      	str	r1, [sp, #0]
 8002124:	4643      	mov	r3, r8
 8002126:	4632      	mov	r2, r6
 8002128:	4629      	mov	r1, r5
 800212a:	4620      	mov	r0, r4
 800212c:	f000 f986 	bl	800243c <LL_FillBuffer>
}
 8002130:	bf00      	nop
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800213a:	bf00      	nop
 800213c:	2000028c 	.word	0x2000028c
 8002140:	20000290 	.word	0x20000290
 8002144:	200001c8 	.word	0x200001c8

08002148 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af02      	add	r7, sp, #8
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d80d      	bhi.n	8002174 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	4613      	mov	r3, r2
 8002168:	2215      	movs	r2, #21
 800216a:	2100      	movs	r1, #0
 800216c:	480a      	ldr	r0, [pc, #40]	; (8002198 <DSI_IO_WriteCmd+0x50>)
 800216e:	f001 fd7f 	bl	8003c70 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8002172:	e00d      	b.n	8002190 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	9200      	str	r2, [sp, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2239      	movs	r2, #57	; 0x39
 8002188:	2100      	movs	r1, #0
 800218a:	4803      	ldr	r0, [pc, #12]	; (8002198 <DSI_IO_WriteCmd+0x50>)
 800218c:	f001 fd92 	bl	8003cb4 <HAL_DSI_LongWrite>
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000270 	.word	0x20000270

0800219c <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 80021a0:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80021b2:	4b32      	ldr	r3, [pc, #200]	; (800227c <BSP_LCD_MspInit+0xd0>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a31      	ldr	r2, [pc, #196]	; (800227c <BSP_LCD_MspInit+0xd0>)
 80021b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b2f      	ldr	r3, [pc, #188]	; (800227c <BSP_LCD_MspInit+0xd0>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 80021ca:	4b2c      	ldr	r3, [pc, #176]	; (800227c <BSP_LCD_MspInit+0xd0>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	4a2b      	ldr	r2, [pc, #172]	; (800227c <BSP_LCD_MspInit+0xd0>)
 80021d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021d4:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 80021d6:	4b29      	ldr	r3, [pc, #164]	; (800227c <BSP_LCD_MspInit+0xd0>)
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	4a28      	ldr	r2, [pc, #160]	; (800227c <BSP_LCD_MspInit+0xd0>)
 80021dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021e0:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <BSP_LCD_MspInit+0xd0>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a25      	ldr	r2, [pc, #148]	; (800227c <BSP_LCD_MspInit+0xd0>)
 80021e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b23      	ldr	r3, [pc, #140]	; (800227c <BSP_LCD_MspInit+0xd0>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <BSP_LCD_MspInit+0xd0>)
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	4a1f      	ldr	r2, [pc, #124]	; (800227c <BSP_LCD_MspInit+0xd0>)
 8002200:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002204:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <BSP_LCD_MspInit+0xd0>)
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	4a1c      	ldr	r2, [pc, #112]	; (800227c <BSP_LCD_MspInit+0xd0>)
 800220c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002210:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <BSP_LCD_MspInit+0xd0>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	4a19      	ldr	r2, [pc, #100]	; (800227c <BSP_LCD_MspInit+0xd0>)
 8002218:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <BSP_LCD_MspInit+0xd0>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <BSP_LCD_MspInit+0xd0>)
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	4a13      	ldr	r2, [pc, #76]	; (800227c <BSP_LCD_MspInit+0xd0>)
 8002230:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002234:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <BSP_LCD_MspInit+0xd0>)
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	4a10      	ldr	r2, [pc, #64]	; (800227c <BSP_LCD_MspInit+0xd0>)
 800223c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002240:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2103      	movs	r1, #3
 8002246:	2058      	movs	r0, #88	; 0x58
 8002248:	f000 fc45 	bl	8002ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800224c:	2058      	movs	r0, #88	; 0x58
 800224e:	f000 fc5e 	bl	8002b0e <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2103      	movs	r1, #3
 8002256:	205a      	movs	r0, #90	; 0x5a
 8002258:	f000 fc3d 	bl	8002ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800225c:	205a      	movs	r0, #90	; 0x5a
 800225e:	f000 fc56 	bl	8002b0e <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2103      	movs	r1, #3
 8002266:	2062      	movs	r0, #98	; 0x62
 8002268:	f000 fc35 	bl	8002ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800226c:	2062      	movs	r0, #98	; 0x62
 800226e:	f000 fc4e 	bl	8002b0e <HAL_NVIC_EnableIRQ>
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800

08002280 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002280:	b5b0      	push	{r4, r5, r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	603a      	str	r2, [r7, #0]
 800228a:	80fb      	strh	r3, [r7, #6]
 800228c:	460b      	mov	r3, r1
 800228e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <BSP_LCD_DrawPixel+0x44>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <BSP_LCD_DrawPixel+0x48>)
 8002296:	2134      	movs	r1, #52	; 0x34
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	335c      	adds	r3, #92	; 0x5c
 80022a0:	681c      	ldr	r4, [r3, #0]
 80022a2:	88bd      	ldrh	r5, [r7, #4]
 80022a4:	f7ff fc6c 	bl	8001b80 <BSP_LCD_GetXSize>
 80022a8:	4603      	mov	r3, r0
 80022aa:	fb03 f205 	mul.w	r2, r3, r5
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4423      	add	r3, r4
 80022b6:	461a      	mov	r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bdb0      	pop	{r4, r5, r7, pc}
 80022c4:	2000028c 	.word	0x2000028c
 80022c8:	200001c8 	.word	0x200001c8

080022cc <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	603a      	str	r2, [r7, #0]
 80022d6:	80fb      	strh	r3, [r7, #6]
 80022d8:	460b      	mov	r3, r1
 80022da:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 80022e4:	4b53      	ldr	r3, [pc, #332]	; (8002434 <DrawChar+0x168>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4953      	ldr	r1, [pc, #332]	; (8002438 <DrawChar+0x16c>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3308      	adds	r3, #8
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	88db      	ldrh	r3, [r3, #6]
 80022fa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80022fc:	4b4d      	ldr	r3, [pc, #308]	; (8002434 <DrawChar+0x168>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	494d      	ldr	r1, [pc, #308]	; (8002438 <DrawChar+0x16c>)
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	3308      	adds	r3, #8
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	889b      	ldrh	r3, [r3, #4]
 8002312:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8002314:	8a3b      	ldrh	r3, [r7, #16]
 8002316:	3307      	adds	r3, #7
 8002318:	2b00      	cmp	r3, #0
 800231a:	da00      	bge.n	800231e <DrawChar+0x52>
 800231c:	3307      	adds	r3, #7
 800231e:	10db      	asrs	r3, r3, #3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	b2da      	uxtb	r2, r3
 8002326:	8a3b      	ldrh	r3, [r7, #16]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	e076      	b.n	8002422 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002334:	8a3b      	ldrh	r3, [r7, #16]
 8002336:	3307      	adds	r3, #7
 8002338:	2b00      	cmp	r3, #0
 800233a:	da00      	bge.n	800233e <DrawChar+0x72>
 800233c:	3307      	adds	r3, #7
 800233e:	10db      	asrs	r3, r3, #3
 8002340:	461a      	mov	r2, r3
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fb02 f303 	mul.w	r3, r2, r3
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	4413      	add	r3, r2
 800234c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800234e:	8a3b      	ldrh	r3, [r7, #16]
 8002350:	3307      	adds	r3, #7
 8002352:	2b00      	cmp	r3, #0
 8002354:	da00      	bge.n	8002358 <DrawChar+0x8c>
 8002356:	3307      	adds	r3, #7
 8002358:	10db      	asrs	r3, r3, #3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d002      	beq.n	8002364 <DrawChar+0x98>
 800235e:	2b02      	cmp	r3, #2
 8002360:	d004      	beq.n	800236c <DrawChar+0xa0>
 8002362:	e00c      	b.n	800237e <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	617b      	str	r3, [r7, #20]
      break;
 800236a:	e016      	b.n	800239a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	3201      	adds	r2, #1
 8002376:	7812      	ldrb	r2, [r2, #0]
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
      break;
 800237c:	e00d      	b.n	800239a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	041a      	lsls	r2, r3, #16
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	3301      	adds	r3, #1
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	4313      	orrs	r3, r2
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	3202      	adds	r2, #2
 8002392:	7812      	ldrb	r2, [r2, #0]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
      break;
 8002398:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	e036      	b.n	800240e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 80023a0:	8a3a      	ldrh	r2, [r7, #16]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	1ad2      	subs	r2, r2, r3
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	4413      	add	r3, r2
 80023aa:	3b01      	subs	r3, #1
 80023ac:	2201      	movs	r2, #1
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d012      	beq.n	80023e2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	4413      	add	r3, r2
 80023c4:	b298      	uxth	r0, r3
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <DrawChar+0x168>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	491b      	ldr	r1, [pc, #108]	; (8002438 <DrawChar+0x16c>)
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	88bb      	ldrh	r3, [r7, #4]
 80023da:	4619      	mov	r1, r3
 80023dc:	f7ff ff50 	bl	8002280 <BSP_LCD_DrawPixel>
 80023e0:	e012      	b.n	8002408 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	4413      	add	r3, r2
 80023ea:	b298      	uxth	r0, r3
 80023ec:	4b11      	ldr	r3, [pc, #68]	; (8002434 <DrawChar+0x168>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4911      	ldr	r1, [pc, #68]	; (8002438 <DrawChar+0x16c>)
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	3304      	adds	r3, #4
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	88bb      	ldrh	r3, [r7, #4]
 8002402:	4619      	mov	r1, r3
 8002404:	f7ff ff3c 	bl	8002280 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	3301      	adds	r3, #1
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	8a3b      	ldrh	r3, [r7, #16]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	429a      	cmp	r2, r3
 8002414:	d3c4      	bcc.n	80023a0 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8002416:	88bb      	ldrh	r3, [r7, #4]
 8002418:	3301      	adds	r3, #1
 800241a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	3301      	adds	r3, #1
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	8a7b      	ldrh	r3, [r7, #18]
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	429a      	cmp	r2, r3
 8002428:	d384      	bcc.n	8002334 <DrawChar+0x68>
  }
}
 800242a:	bf00      	nop
 800242c:	bf00      	nop
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	2000028c 	.word	0x2000028c
 8002438:	20000290 	.word	0x20000290

0800243c <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <LL_FillBuffer+0x68>)
 800244c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002450:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <LL_FillBuffer+0x68>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8002458:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <LL_FillBuffer+0x68>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <LL_FillBuffer+0x68>)
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <LL_FillBuffer+0x6c>)
 8002462:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8002464:	480f      	ldr	r0, [pc, #60]	; (80024a4 <LL_FillBuffer+0x68>)
 8002466:	f000 fd2b 	bl	8002ec0 <HAL_DMA2D_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d115      	bne.n	800249c <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8002470:	68f9      	ldr	r1, [r7, #12]
 8002472:	480c      	ldr	r0, [pc, #48]	; (80024a4 <LL_FillBuffer+0x68>)
 8002474:	f000 fe9c 	bl	80031b0 <HAL_DMA2D_ConfigLayer>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10e      	bne.n	800249c <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69f9      	ldr	r1, [r7, #28]
 8002488:	4806      	ldr	r0, [pc, #24]	; (80024a4 <LL_FillBuffer+0x68>)
 800248a:	f000 fd7d 	bl	8002f88 <HAL_DMA2D_Start>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d103      	bne.n	800249c <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8002494:	210a      	movs	r1, #10
 8002496:	4803      	ldr	r0, [pc, #12]	; (80024a4 <LL_FillBuffer+0x68>)
 8002498:	f000 fda1 	bl	8002fde <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000170 	.word	0x20000170
 80024a8:	4002b000 	.word	0x4002b000

080024ac <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80024b0:	4b29      	ldr	r3, [pc, #164]	; (8002558 <BSP_SDRAM_Init+0xac>)
 80024b2:	4a2a      	ldr	r2, [pc, #168]	; (800255c <BSP_SDRAM_Init+0xb0>)
 80024b4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <BSP_SDRAM_Init+0xb4>)
 80024b8:	2202      	movs	r2, #2
 80024ba:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80024bc:	4b28      	ldr	r3, [pc, #160]	; (8002560 <BSP_SDRAM_Init+0xb4>)
 80024be:	2207      	movs	r2, #7
 80024c0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80024c2:	4b27      	ldr	r3, [pc, #156]	; (8002560 <BSP_SDRAM_Init+0xb4>)
 80024c4:	2204      	movs	r2, #4
 80024c6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <BSP_SDRAM_Init+0xb4>)
 80024ca:	2207      	movs	r2, #7
 80024cc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <BSP_SDRAM_Init+0xb4>)
 80024d0:	2202      	movs	r2, #2
 80024d2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80024d4:	4b22      	ldr	r3, [pc, #136]	; (8002560 <BSP_SDRAM_Init+0xb4>)
 80024d6:	2202      	movs	r2, #2
 80024d8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80024da:	4b21      	ldr	r3, [pc, #132]	; (8002560 <BSP_SDRAM_Init+0xb4>)
 80024dc:	2202      	movs	r2, #2
 80024de:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <BSP_SDRAM_Init+0xac>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <BSP_SDRAM_Init+0xac>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80024ec:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <BSP_SDRAM_Init+0xac>)
 80024ee:	2204      	movs	r2, #4
 80024f0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <BSP_SDRAM_Init+0xac>)
 80024f4:	2220      	movs	r2, #32
 80024f6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80024f8:	4b17      	ldr	r3, [pc, #92]	; (8002558 <BSP_SDRAM_Init+0xac>)
 80024fa:	2240      	movs	r2, #64	; 0x40
 80024fc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80024fe:	4b16      	ldr	r3, [pc, #88]	; (8002558 <BSP_SDRAM_Init+0xac>)
 8002500:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002504:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <BSP_SDRAM_Init+0xac>)
 8002508:	2200      	movs	r2, #0
 800250a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <BSP_SDRAM_Init+0xac>)
 800250e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002512:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <BSP_SDRAM_Init+0xac>)
 8002516:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800251a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <BSP_SDRAM_Init+0xac>)
 800251e:	2200      	movs	r2, #0
 8002520:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002522:	2100      	movs	r1, #0
 8002524:	480c      	ldr	r0, [pc, #48]	; (8002558 <BSP_SDRAM_Init+0xac>)
 8002526:	f000 f87f 	bl	8002628 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800252a:	490d      	ldr	r1, [pc, #52]	; (8002560 <BSP_SDRAM_Init+0xb4>)
 800252c:	480a      	ldr	r0, [pc, #40]	; (8002558 <BSP_SDRAM_Init+0xac>)
 800252e:	f003 fa0f 	bl	8005950 <HAL_SDRAM_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <BSP_SDRAM_Init+0xb8>)
 800253a:	2201      	movs	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	e002      	b.n	8002546 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <BSP_SDRAM_Init+0xb8>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002546:	f240 6003 	movw	r0, #1539	; 0x603
 800254a:	f000 f80d 	bl	8002568 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <BSP_SDRAM_Init+0xb8>)
 8002550:	781b      	ldrb	r3, [r3, #0]
}
 8002552:	4618      	mov	r0, r3
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000338 	.word	0x20000338
 800255c:	a0000140 	.word	0xa0000140
 8002560:	2000036c 	.word	0x2000036c
 8002564:	20000018 	.word	0x20000018

08002568 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002574:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002576:	2201      	movs	r2, #1
 8002578:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800257a:	4b29      	ldr	r3, [pc, #164]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800257c:	2210      	movs	r2, #16
 800257e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002582:	2201      	movs	r2, #1
 8002584:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002586:	4b26      	ldr	r3, [pc, #152]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002588:	2200      	movs	r2, #0
 800258a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800258c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002590:	4923      	ldr	r1, [pc, #140]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002592:	4824      	ldr	r0, [pc, #144]	; (8002624 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002594:	f003 fa1a 	bl	80059cc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002598:	2001      	movs	r0, #1
 800259a:	f000 f99d 	bl	80028d8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800259e:	4b20      	ldr	r3, [pc, #128]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025a0:	2202      	movs	r2, #2
 80025a2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80025a4:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025a6:	2210      	movs	r2, #16
 80025a8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80025b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ba:	4919      	ldr	r1, [pc, #100]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025bc:	4819      	ldr	r0, [pc, #100]	; (8002624 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80025be:	f003 fa05 	bl	80059cc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025c4:	2203      	movs	r2, #3
 80025c6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80025c8:	4b15      	ldr	r3, [pc, #84]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025ca:	2210      	movs	r2, #16
 80025cc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025d0:	2208      	movs	r2, #8
 80025d2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80025da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025de:	4910      	ldr	r1, [pc, #64]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025e0:	4810      	ldr	r0, [pc, #64]	; (8002624 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80025e2:	f003 f9f3 	bl	80059cc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80025e6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80025ea:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025ee:	2204      	movs	r2, #4
 80025f0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025f4:	2210      	movs	r2, #16
 80025f6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002602:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002608:	4905      	ldr	r1, [pc, #20]	; (8002620 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800260a:	4806      	ldr	r0, [pc, #24]	; (8002624 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800260c:	f003 f9de 	bl	80059cc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4804      	ldr	r0, [pc, #16]	; (8002624 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002614:	f003 fa05 	bl	8005a22 <HAL_SDRAM_ProgramRefreshRate>
}
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000388 	.word	0x20000388
 8002624:	20000338 	.word	0x20000338

08002628 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002628:	b580      	push	{r7, lr}
 800262a:	b090      	sub	sp, #64	; 0x40
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002632:	4b71      	ldr	r3, [pc, #452]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	4a70      	ldr	r2, [pc, #448]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6393      	str	r3, [r2, #56]	; 0x38
 800263e:	4b6e      	ldr	r3, [pc, #440]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800264a:	4b6b      	ldr	r3, [pc, #428]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a6a      	ldr	r2, [pc, #424]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 8002650:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b68      	ldr	r3, [pc, #416]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002662:	4b65      	ldr	r3, [pc, #404]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a64      	ldr	r2, [pc, #400]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 8002668:	f043 0308 	orr.w	r3, r3, #8
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b62      	ldr	r3, [pc, #392]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800267a:	4b5f      	ldr	r3, [pc, #380]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a5e      	ldr	r2, [pc, #376]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 8002680:	f043 0310 	orr.w	r3, r3, #16
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b5c      	ldr	r3, [pc, #368]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002692:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a58      	ldr	r2, [pc, #352]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 8002698:	f043 0320 	orr.w	r3, r3, #32
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b56      	ldr	r3, [pc, #344]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026aa:	4b53      	ldr	r3, [pc, #332]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a52      	ldr	r2, [pc, #328]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 80026b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026c2:	4b4d      	ldr	r3, [pc, #308]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 80026c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b4a      	ldr	r3, [pc, #296]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a46      	ldr	r2, [pc, #280]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b44      	ldr	r3, [pc, #272]	; (80027f8 <BSP_SDRAM_MspInit+0x1d0>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80026f6:	2301      	movs	r3, #1
 80026f8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80026fa:	2303      	movs	r3, #3
 80026fc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80026fe:	230c      	movs	r3, #12
 8002700:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002702:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800270c:	4619      	mov	r1, r3
 800270e:	483b      	ldr	r0, [pc, #236]	; (80027fc <BSP_SDRAM_MspInit+0x1d4>)
 8002710:	f001 fb68 	bl	8003de4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002714:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002718:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800271a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800271e:	4619      	mov	r1, r3
 8002720:	4837      	ldr	r0, [pc, #220]	; (8002800 <BSP_SDRAM_MspInit+0x1d8>)
 8002722:	f001 fb5f 	bl	8003de4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002726:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800272c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002730:	4619      	mov	r1, r3
 8002732:	4834      	ldr	r0, [pc, #208]	; (8002804 <BSP_SDRAM_MspInit+0x1dc>)
 8002734:	f001 fb56 	bl	8003de4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8002738:	f248 1337 	movw	r3, #33079	; 0x8137
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800273e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002742:	4619      	mov	r1, r3
 8002744:	4830      	ldr	r0, [pc, #192]	; (8002808 <BSP_SDRAM_MspInit+0x1e0>)
 8002746:	f001 fb4d 	bl	8003de4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800274a:	f64f 732c 	movw	r3, #65324	; 0xff2c
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002754:	4619      	mov	r1, r3
 8002756:	482d      	ldr	r0, [pc, #180]	; (800280c <BSP_SDRAM_MspInit+0x1e4>)
 8002758:	f001 fb44 	bl	8003de4 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800275c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8002762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002766:	4619      	mov	r1, r3
 8002768:	4829      	ldr	r0, [pc, #164]	; (8002810 <BSP_SDRAM_MspInit+0x1e8>)
 800276a:	f001 fb3b 	bl	8003de4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800276e:	4b29      	ldr	r3, [pc, #164]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 8002770:	2200      	movs	r2, #0
 8002772:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800277a:	4b26      	ldr	r3, [pc, #152]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 800277c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002780:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 8002784:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002788:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800278a:	4b22      	ldr	r3, [pc, #136]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 800278c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002790:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 8002794:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002798:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800279a:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 800279c:	2200      	movs	r2, #0
 800279e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80027a0:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 80027a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027a6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80027a8:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80027ae:	4b19      	ldr	r3, [pc, #100]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 80027b0:	2203      	movs	r2, #3
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 80027c2:	4a15      	ldr	r2, [pc, #84]	; (8002818 <BSP_SDRAM_MspInit+0x1f0>)
 80027c4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a12      	ldr	r2, [pc, #72]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
 80027cc:	4a11      	ldr	r2, [pc, #68]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80027d2:	4810      	ldr	r0, [pc, #64]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 80027d4:	f000 fa64 	bl	8002ca0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80027d8:	480e      	ldr	r0, [pc, #56]	; (8002814 <BSP_SDRAM_MspInit+0x1ec>)
 80027da:	f000 f9b3 	bl	8002b44 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	210f      	movs	r1, #15
 80027e2:	2038      	movs	r0, #56	; 0x38
 80027e4:	f000 f977 	bl	8002ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80027e8:	2038      	movs	r0, #56	; 0x38
 80027ea:	f000 f990 	bl	8002b0e <HAL_NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3740      	adds	r7, #64	; 0x40
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40021c00 	.word	0x40021c00
 8002810:	40022000 	.word	0x40022000
 8002814:	20000398 	.word	0x20000398
 8002818:	40026410 	.word	0x40026410

0800281c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002820:	2003      	movs	r0, #3
 8002822:	f000 f94d 	bl	8002ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002826:	200f      	movs	r0, #15
 8002828:	f000 f806 	bl	8002838 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800282c:	f7fe fc54 	bl	80010d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_InitTick+0x54>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_InitTick+0x58>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4619      	mov	r1, r3
 800284a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	4618      	mov	r0, r3
 8002858:	f000 f967 	bl	8002b2a <HAL_SYSTICK_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e00e      	b.n	8002884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b0f      	cmp	r3, #15
 800286a:	d80a      	bhi.n	8002882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800286c:	2200      	movs	r2, #0
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	f000 f92f 	bl	8002ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002878:	4a06      	ldr	r2, [pc, #24]	; (8002894 <HAL_InitTick+0x5c>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000004 	.word	0x20000004
 8002890:	20000020 	.word	0x20000020
 8002894:	2000001c 	.word	0x2000001c

08002898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_IncTick+0x20>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_IncTick+0x24>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_IncTick+0x24>)
 80028aa:	6013      	str	r3, [r2, #0]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000020 	.word	0x20000020
 80028bc:	200003f8 	.word	0x200003f8

080028c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return uwTick;
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <HAL_GetTick+0x14>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	200003f8 	.word	0x200003f8

080028d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff ffee 	bl	80028c0 <HAL_GetTick>
 80028e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d005      	beq.n	80028fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <HAL_Delay+0x44>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028fe:	bf00      	nop
 8002900:	f7ff ffde 	bl	80028c0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	429a      	cmp	r2, r3
 800290e:	d8f7      	bhi.n	8002900 <HAL_Delay+0x28>
  {
  }
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000020 	.word	0x20000020

08002920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <__NVIC_SetPriorityGrouping+0x40>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 800294a:	4313      	orrs	r3, r2
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__NVIC_SetPriorityGrouping+0x40>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00
 8002964:	05fa0000 	.word	0x05fa0000

08002968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <__NVIC_GetPriorityGrouping+0x18>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	f003 0307 	and.w	r3, r3, #7
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0b      	blt.n	80029ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4907      	ldr	r1, [pc, #28]	; (80029bc <__NVIC_EnableIRQ+0x38>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2001      	movs	r0, #1
 80029a6:	fa00 f202 	lsl.w	r2, r0, r2
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000e100 	.word	0xe000e100

080029c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	6039      	str	r1, [r7, #0]
 80029ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	db0a      	blt.n	80029ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	490c      	ldr	r1, [pc, #48]	; (8002a0c <__NVIC_SetPriority+0x4c>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	0112      	lsls	r2, r2, #4
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	440b      	add	r3, r1
 80029e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e8:	e00a      	b.n	8002a00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4908      	ldr	r1, [pc, #32]	; (8002a10 <__NVIC_SetPriority+0x50>)
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	3b04      	subs	r3, #4
 80029f8:	0112      	lsls	r2, r2, #4
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	440b      	add	r3, r1
 80029fe:	761a      	strb	r2, [r3, #24]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000e100 	.word	0xe000e100
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	; 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f1c3 0307 	rsb	r3, r3, #7
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	bf28      	it	cs
 8002a32:	2304      	movcs	r3, #4
 8002a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d902      	bls.n	8002a44 <NVIC_EncodePriority+0x30>
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3b03      	subs	r3, #3
 8002a42:	e000      	b.n	8002a46 <NVIC_EncodePriority+0x32>
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43da      	mvns	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	401a      	ands	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	43d9      	mvns	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6c:	4313      	orrs	r3, r2
         );
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3724      	adds	r7, #36	; 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a8c:	d301      	bcc.n	8002a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00f      	b.n	8002ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <SysTick_Config+0x40>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a9a:	210f      	movs	r1, #15
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa0:	f7ff ff8e 	bl	80029c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <SysTick_Config+0x40>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aaa:	4b04      	ldr	r3, [pc, #16]	; (8002abc <SysTick_Config+0x40>)
 8002aac:	2207      	movs	r2, #7
 8002aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	e000e010 	.word	0xe000e010

08002ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ff29 	bl	8002920 <__NVIC_SetPriorityGrouping>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	4603      	mov	r3, r0
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae8:	f7ff ff3e 	bl	8002968 <__NVIC_GetPriorityGrouping>
 8002aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	6978      	ldr	r0, [r7, #20]
 8002af4:	f7ff ff8e 	bl	8002a14 <NVIC_EncodePriority>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff5d 	bl	80029c0 <__NVIC_SetPriority>
}
 8002b06:	bf00      	nop
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4603      	mov	r3, r0
 8002b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff31 	bl	8002984 <__NVIC_EnableIRQ>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ffa2 	bl	8002a7c <SysTick_Config>
 8002b38:	4603      	mov	r3, r0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff feb6 	bl	80028c0 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e099      	b.n	8002c94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b80:	e00f      	b.n	8002ba2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b82:	f7ff fe9d 	bl	80028c0 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d908      	bls.n	8002ba2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e078      	b.n	8002c94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e8      	bne.n	8002b82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4b38      	ldr	r3, [pc, #224]	; (8002c9c <HAL_DMA_Init+0x158>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d107      	bne.n	8002c0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	4313      	orrs	r3, r2
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 0307 	bic.w	r3, r3, #7
 8002c22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d117      	bne.n	8002c66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00e      	beq.n	8002c66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f8bd 	bl	8002dc8 <DMA_CheckFifoParam>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2240      	movs	r2, #64	; 0x40
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c62:	2301      	movs	r3, #1
 8002c64:	e016      	b.n	8002c94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f874 	bl	8002d5c <DMA_CalcBaseAndBitshift>
 8002c74:	4603      	mov	r3, r0
 8002c76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	223f      	movs	r2, #63	; 0x3f
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	e010803f 	.word	0xe010803f

08002ca0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e050      	b.n	8002d54 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e048      	b.n	8002d54 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2221      	movs	r2, #33	; 0x21
 8002d00:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f82a 	bl	8002d5c <DMA_CalcBaseAndBitshift>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	223f      	movs	r2, #63	; 0x3f
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3b10      	subs	r3, #16
 8002d6c:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <DMA_CalcBaseAndBitshift+0x60>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d908      	bls.n	8002d9c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <DMA_CalcBaseAndBitshift+0x68>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	1d1a      	adds	r2, r3, #4
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	659a      	str	r2, [r3, #88]	; 0x58
 8002d9a:	e006      	b.n	8002daa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <DMA_CalcBaseAndBitshift+0x68>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	aaaaaaab 	.word	0xaaaaaaab
 8002dc0:	0800cec8 	.word	0x0800cec8
 8002dc4:	fffffc00 	.word	0xfffffc00

08002dc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d11f      	bne.n	8002e22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d856      	bhi.n	8002e96 <DMA_CheckFifoParam+0xce>
 8002de8:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <DMA_CheckFifoParam+0x28>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e13 	.word	0x08002e13
 8002df8:	08002e01 	.word	0x08002e01
 8002dfc:	08002e97 	.word	0x08002e97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d046      	beq.n	8002e9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e10:	e043      	b.n	8002e9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e1a:	d140      	bne.n	8002e9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e20:	e03d      	b.n	8002e9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e2a:	d121      	bne.n	8002e70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d837      	bhi.n	8002ea2 <DMA_CheckFifoParam+0xda>
 8002e32:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <DMA_CheckFifoParam+0x70>)
 8002e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e38:	08002e49 	.word	0x08002e49
 8002e3c:	08002e4f 	.word	0x08002e4f
 8002e40:	08002e49 	.word	0x08002e49
 8002e44:	08002e61 	.word	0x08002e61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4c:	e030      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d025      	beq.n	8002ea6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e5e:	e022      	b.n	8002ea6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e68:	d11f      	bne.n	8002eaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e6e:	e01c      	b.n	8002eaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d903      	bls.n	8002e7e <DMA_CheckFifoParam+0xb6>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d003      	beq.n	8002e84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e7c:	e018      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
      break;
 8002e82:	e015      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
      break;
 8002e94:	e00b      	b.n	8002eae <DMA_CheckFifoParam+0xe6>
      break;
 8002e96:	bf00      	nop
 8002e98:	e00a      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002e9a:	bf00      	nop
 8002e9c:	e008      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e006      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e004      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e002      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eae:	bf00      	nop
    }
  } 
  
  return status; 
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop

08002ec0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e049      	b.n	8002f66 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f844 	bl	8002f74 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f10:	f023 0107 	bic.w	r1, r3, #7
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f26:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <HAL_DMA2D_Init+0xb0>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68d1      	ldr	r1, [r2, #12]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	430b      	orrs	r3, r1
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	051a      	lsls	r2, r3, #20
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	055b      	lsls	r3, r3, #21
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	ffffc000 	.word	0xffffc000

08002f74 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_DMA2D_Start+0x1c>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e018      	b.n	8002fd6 <HAL_DMA2D_Start+0x4e>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f994 	bl	80032ec <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d056      	beq.n	80030a8 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002ffa:	f7ff fc61 	bl	80028c0 <HAL_GetTick>
 8002ffe:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003000:	e04b      	b.n	800309a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003010:	2b00      	cmp	r3, #0
 8003012:	d023      	beq.n	800305c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	f043 0202 	orr.w	r2, r3, #2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	f043 0201 	orr.w	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2221      	movs	r2, #33	; 0x21
 8003046:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2204      	movs	r2, #4
 800304c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0a5      	b.n	80031a8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003062:	d01a      	beq.n	800309a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003064:	f7ff fc2c 	bl	80028c0 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d302      	bcc.n	800307a <HAL_DMA2D_PollForTransfer+0x9c>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10f      	bne.n	800309a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	f043 0220 	orr.w	r2, r3, #32
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2203      	movs	r2, #3
 800308a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e086      	b.n	80031a8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0ac      	beq.n	8003002 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d061      	beq.n	800318e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80030ca:	f7ff fbf9 	bl	80028c0 <HAL_GetTick>
 80030ce:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80030d0:	e056      	b.n	8003180 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d02e      	beq.n	8003142 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f043 0204 	orr.w	r2, r3, #4
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003108:	f043 0202 	orr.w	r2, r3, #2
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2229      	movs	r2, #41	; 0x29
 800312c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2204      	movs	r2, #4
 8003132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e032      	b.n	80031a8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d01a      	beq.n	8003180 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800314a:	f7ff fbb9 	bl	80028c0 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <HAL_DMA2D_PollForTransfer+0x182>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10f      	bne.n	8003180 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2203      	movs	r2, #3
 8003170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e013      	b.n	80031a8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0a1      	beq.n	80030d2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2212      	movs	r2, #18
 8003194:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_DMA2D_ConfigLayer+0x20>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e084      	b.n	80032da <HAL_DMA2D_ConfigLayer+0x12a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	3320      	adds	r3, #32
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	041b      	lsls	r3, r3, #16
 80031fc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003204:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800320c:	4313      	orrs	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <HAL_DMA2D_ConfigLayer+0x138>)
 8003212:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b0a      	cmp	r3, #10
 800321a:	d003      	beq.n	8003224 <HAL_DMA2D_ConfigLayer+0x74>
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b09      	cmp	r3, #9
 8003222:	d107      	bne.n	8003234 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	e005      	b.n	8003240 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	061b      	lsls	r3, r3, #24
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d120      	bne.n	8003288 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43db      	mvns	r3, r3
 8003250:	ea02 0103 	and.w	r1, r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	430a      	orrs	r2, r1
 800325c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b0a      	cmp	r3, #10
 800326e:	d003      	beq.n	8003278 <HAL_DMA2D_ConfigLayer+0xc8>
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b09      	cmp	r3, #9
 8003276:	d127      	bne.n	80032c8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003284:	629a      	str	r2, [r3, #40]	; 0x28
 8003286:	e01f      	b.n	80032c8 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	43db      	mvns	r3, r3
 8003292:	ea02 0103 	and.w	r1, r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	430a      	orrs	r2, r1
 800329e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b0a      	cmp	r3, #10
 80032b0:	d003      	beq.n	80032ba <HAL_DMA2D_ConfigLayer+0x10a>
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b09      	cmp	r3, #9
 80032b8:	d106      	bne.n	80032c8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80032c6:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	ff33000f 	.word	0xff33000f

080032ec <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b08b      	sub	sp, #44	; 0x2c
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003300:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	041a      	lsls	r2, r3, #16
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	431a      	orrs	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003324:	d174      	bne.n	8003410 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800332c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003334:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800333c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d108      	bne.n	800335e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	431a      	orrs	r2, r3
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	4313      	orrs	r3, r2
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
 800335c:	e053      	b.n	8003406 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d106      	bne.n	8003374 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	4313      	orrs	r3, r2
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
 8003372:	e048      	b.n	8003406 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d111      	bne.n	80033a0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	0cdb      	lsrs	r3, r3, #19
 8003380:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	0a9b      	lsrs	r3, r3, #10
 8003386:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	08db      	lsrs	r3, r3, #3
 800338c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	02db      	lsls	r3, r3, #11
 8003396:	4313      	orrs	r3, r2
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
 800339e:	e032      	b.n	8003406 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d117      	bne.n	80033d8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	0fdb      	lsrs	r3, r3, #31
 80033ac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	0cdb      	lsrs	r3, r3, #19
 80033b2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	0adb      	lsrs	r3, r3, #11
 80033b8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	08db      	lsrs	r3, r3, #3
 80033be:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	029b      	lsls	r3, r3, #10
 80033c8:	431a      	orrs	r2, r3
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	03db      	lsls	r3, r3, #15
 80033ce:	4313      	orrs	r3, r2
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
 80033d6:	e016      	b.n	8003406 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	0f1b      	lsrs	r3, r3, #28
 80033dc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	0d1b      	lsrs	r3, r3, #20
 80033e2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	0b1b      	lsrs	r3, r3, #12
 80033e8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	011a      	lsls	r2, r3, #4
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	431a      	orrs	r2, r3
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	031b      	lsls	r3, r3, #12
 80033fe:	4313      	orrs	r3, r2
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800340e:	e003      	b.n	8003418 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	60da      	str	r2, [r3, #12]
}
 8003418:	bf00      	nop
 800341a:	372c      	adds	r7, #44	; 0x2c
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	019a      	lsls	r2, r3, #6
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	431a      	orrs	r2, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	431a      	orrs	r2, r3
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	041b      	lsls	r3, r3, #16
 8003444:	431a      	orrs	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800344a:	bf00      	nop
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003464:	f7ff fa2c 	bl	80028c0 <HAL_GetTick>
 8003468:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800346a:	e009      	b.n	8003480 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800346c:	f7ff fa28 	bl	80028c0 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800347a:	d901      	bls.n	8003480 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e015      	b.n	80034ac <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0ee      	beq.n	800346c <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	019a      	lsls	r2, r3, #6
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	431a      	orrs	r2, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	ea42 0103 	orr.w	r1, r2, r3
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	041a      	lsls	r2, r3, #16
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e106      	b.n	80036d6 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	7c5b      	ldrb	r3, [r3, #17]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d102      	bne.n	80034d8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f97c 	bl	80037d0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2203      	movs	r2, #3
 80034dc:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80034f2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80034fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003506:	f7ff f9db 	bl	80028c0 <HAL_GetTick>
 800350a:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800350c:	e009      	b.n	8003522 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800350e:	f7ff f9d7 	bl	80028c0 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800351c:	d901      	bls.n	8003522 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e0d9      	b.n	80036d6 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800352a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0ed      	beq.n	800350e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b68      	ldr	r3, [pc, #416]	; (80036e0 <HAL_DSI_Init+0x22c>)
 8003540:	400b      	ands	r3, r1
 8003542:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	009a      	lsls	r2, r3, #2
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	02db      	lsls	r3, r3, #11
 800355a:	431a      	orrs	r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003596:	f7ff f993 	bl	80028c0 <HAL_GetTick>
 800359a:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800359c:	e009      	b.n	80035b2 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800359e:	f7ff f98f 	bl	80028c0 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ac:	d901      	bls.n	80035b2 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e091      	b.n	80036d6 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0ed      	beq.n	800359e <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0206 	orr.w	r2, r2, #6
 80035d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0203 	bic.w	r2, r2, #3
 80035e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0203 	bic.w	r2, r2, #3
 8003614:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800363c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6899      	ldr	r1, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_DSI_Init+0x1aa>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	e000      	b.n	8003660 <HAL_DSI_Init+0x1ac>
 800365e:	2301      	movs	r3, #1
 8003660:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	4a1f      	ldr	r2, [pc, #124]	; (80036e4 <HAL_DSI_Init+0x230>)
 8003666:	fb03 f202 	mul.w	r2, r3, r2
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	409a      	lsls	r2, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003696:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2200      	movs	r2, #0
 80036be:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3720      	adds	r7, #32
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	fffc8603 	.word	0xfffc8603
 80036e4:	003d0900 	.word	0x003d0900

080036e8 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e066      	b.n	80037c8 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2203      	movs	r2, #3
 80036fe:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0208 	bic.w	r2, r2, #8
 8003714:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	605a      	str	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0206 	bic.w	r2, r2, #6
 800375a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800379a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80037a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f818 	bl	80037e4 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	7c1b      	ldrb	r3, [r3, #16]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_DSI_ConfigVideoMode+0x16>
 800380a:	2302      	movs	r3, #2
 800380c:	e1ee      	b.n	8003bec <HAL_DSI_ConfigVideoMode+0x3f4>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0203 	bic.w	r2, r2, #3
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b8b      	ldr	r3, [pc, #556]	; (8003a94 <HAL_DSI_ConfigVideoMode+0x29c>)
 8003866:	400b      	ands	r3, r1
 8003868:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	4b84      	ldr	r3, [pc, #528]	; (8003a98 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003888:	400b      	ands	r3, r1
 800388a:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b7b      	ldr	r3, [pc, #492]	; (8003a98 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80038aa:	400b      	ands	r3, r1
 80038ac:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699a      	ldr	r2, [r3, #24]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0203 	bic.w	r2, r2, #3
 80038ce:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68d9      	ldr	r1, [r3, #12]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0207 	bic.w	r2, r2, #7
 80038f0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6959      	ldr	r1, [r3, #20]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	431a      	orrs	r2, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 020f 	bic.w	r2, r2, #15
 800391e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6919      	ldr	r1, [r3, #16]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 020e 	bic.w	r2, r2, #14
 8003942:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	005a      	lsls	r2, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b03      	cmp	r3, #3
 8003964:	d110      	bne.n	8003988 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003974:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6919      	ldr	r1, [r3, #16]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4b42      	ldr	r3, [pc, #264]	; (8003a9c <HAL_DSI_ConfigVideoMode+0x2a4>)
 8003994:	400b      	ands	r3, r1
 8003996:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4b39      	ldr	r3, [pc, #228]	; (8003a9c <HAL_DSI_ConfigVideoMode+0x2a4>)
 80039b6:	400b      	ands	r3, r1
 80039b8:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <HAL_DSI_ConfigVideoMode+0x2a8>)
 80039d8:	400b      	ands	r3, r1
 80039da:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b2a      	ldr	r3, [pc, #168]	; (8003aa4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80039fa:	400b      	ands	r3, r1
 80039fc:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003a3e:	400b      	ands	r3, r1
 8003a40:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <HAL_DSI_ConfigVideoMode+0x29c>)
 8003a60:	400b      	ands	r3, r1
 8003a62:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a90:	e00a      	b.n	8003aa8 <HAL_DSI_ConfigVideoMode+0x2b0>
 8003a92:	bf00      	nop
 8003a94:	ffffc000 	.word	0xffffc000
 8003a98:	ffffe000 	.word	0xffffe000
 8003a9c:	fffff000 	.word	0xfffff000
 8003aa0:	ffff8000 	.word	0xffff8000
 8003aa4:	fffffc00 	.word	0xfffffc00
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003abe:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6999      	ldr	r1, [r3, #24]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aca:	041a      	lsls	r2, r3, #16
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ae2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6999      	ldr	r1, [r3, #24]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b04:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b26:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	7c1b      	ldrb	r3, [r3, #16]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_DSI_Start+0x14>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e02b      	b.n	8003c64 <HAL_DSI_Start+0x6c>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003c34:	2300      	movs	r3, #0
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0208 	orr.w	r2, r2, #8
 8003c48:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	7c1b      	ldrb	r3, [r3, #16]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_DSI_ShortWrite+0x1a>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e010      	b.n	8003cac <HAL_DSI_ShortWrite+0x3c>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7ff fbdb 	bl	8003456 <DSI_ShortWrite>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	741a      	strb	r2, [r3, #16]

  return status;
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08c      	sub	sp, #48	; 0x30
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc4:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	7c1b      	ldrb	r3, [r3, #16]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_DSI_LongWrite+0x1e>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e084      	b.n	8003ddc <HAL_DSI_LongWrite+0x128>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cd8:	f7fe fdf2 	bl	80028c0 <HAL_GetTick>
 8003cdc:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003cde:	e00c      	b.n	8003cfa <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003ce0:	f7fe fdee 	bl	80028c0 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cee:	d904      	bls.n	8003cfa <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e070      	b.n	8003ddc <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0eb      	beq.n	8003ce0 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	bf28      	it	cs
 8003d12:	2303      	movcs	r3, #3
 8003d14:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003d16:	2300      	movs	r3, #0
 8003d18:	623b      	str	r3, [r7, #32]
 8003d1a:	e00f      	b.n	8003d3c <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	4413      	add	r3, r2
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	461a      	mov	r2, r3
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	623b      	str	r3, [r7, #32]
 8003d3c:	6a3a      	ldr	r2, [r7, #32]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d3eb      	bcc.n	8003d1c <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4413      	add	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003d5c:	e028      	b.n	8003db0 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	bf28      	it	cs
 8003d64:	2304      	movcs	r3, #4
 8003d66:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	623b      	str	r3, [r7, #32]
 8003d70:	e00e      	b.n	8003d90 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	4413      	add	r3, r2
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	623b      	str	r3, [r7, #32]
 8003d90:	6a3a      	ldr	r2, [r7, #32]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d3ec      	bcc.n	8003d72 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4413      	add	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1d3      	bne.n	8003d5e <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003dbe:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	f7ff fb28 	bl	8003424 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3728      	adds	r7, #40	; 0x28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b089      	sub	sp, #36	; 0x24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	e175      	b.n	80040f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e04:	2201      	movs	r2, #1
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4013      	ands	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	f040 8164 	bne.w	80040ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d00b      	beq.n	8003e42 <HAL_GPIO_Init+0x5e>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d007      	beq.n	8003e42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e36:	2b11      	cmp	r3, #17
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b12      	cmp	r3, #18
 8003e40:	d130      	bne.n	8003ea4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43db      	mvns	r3, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4013      	ands	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e78:	2201      	movs	r2, #1
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 0201 	and.w	r2, r3, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	2203      	movs	r2, #3
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d003      	beq.n	8003ee4 <HAL_GPIO_Init+0x100>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b12      	cmp	r3, #18
 8003ee2:	d123      	bne.n	8003f2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	08da      	lsrs	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3208      	adds	r2, #8
 8003eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	220f      	movs	r2, #15
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	08da      	lsrs	r2, r3, #3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3208      	adds	r2, #8
 8003f26:	69b9      	ldr	r1, [r7, #24]
 8003f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	2203      	movs	r2, #3
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 0203 	and.w	r2, r3, #3
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80be 	beq.w	80040ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f6e:	4b66      	ldr	r3, [pc, #408]	; (8004108 <HAL_GPIO_Init+0x324>)
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	4a65      	ldr	r2, [pc, #404]	; (8004108 <HAL_GPIO_Init+0x324>)
 8003f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f78:	6453      	str	r3, [r2, #68]	; 0x44
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <HAL_GPIO_Init+0x324>)
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f86:	4a61      	ldr	r2, [pc, #388]	; (800410c <HAL_GPIO_Init+0x328>)
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	089b      	lsrs	r3, r3, #2
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	220f      	movs	r2, #15
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a58      	ldr	r2, [pc, #352]	; (8004110 <HAL_GPIO_Init+0x32c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d037      	beq.n	8004022 <HAL_GPIO_Init+0x23e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a57      	ldr	r2, [pc, #348]	; (8004114 <HAL_GPIO_Init+0x330>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d031      	beq.n	800401e <HAL_GPIO_Init+0x23a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a56      	ldr	r2, [pc, #344]	; (8004118 <HAL_GPIO_Init+0x334>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d02b      	beq.n	800401a <HAL_GPIO_Init+0x236>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a55      	ldr	r2, [pc, #340]	; (800411c <HAL_GPIO_Init+0x338>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d025      	beq.n	8004016 <HAL_GPIO_Init+0x232>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a54      	ldr	r2, [pc, #336]	; (8004120 <HAL_GPIO_Init+0x33c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01f      	beq.n	8004012 <HAL_GPIO_Init+0x22e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a53      	ldr	r2, [pc, #332]	; (8004124 <HAL_GPIO_Init+0x340>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d019      	beq.n	800400e <HAL_GPIO_Init+0x22a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a52      	ldr	r2, [pc, #328]	; (8004128 <HAL_GPIO_Init+0x344>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_GPIO_Init+0x226>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a51      	ldr	r2, [pc, #324]	; (800412c <HAL_GPIO_Init+0x348>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00d      	beq.n	8004006 <HAL_GPIO_Init+0x222>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a50      	ldr	r2, [pc, #320]	; (8004130 <HAL_GPIO_Init+0x34c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <HAL_GPIO_Init+0x21e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a4f      	ldr	r2, [pc, #316]	; (8004134 <HAL_GPIO_Init+0x350>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <HAL_GPIO_Init+0x21a>
 8003ffa:	2309      	movs	r3, #9
 8003ffc:	e012      	b.n	8004024 <HAL_GPIO_Init+0x240>
 8003ffe:	230a      	movs	r3, #10
 8004000:	e010      	b.n	8004024 <HAL_GPIO_Init+0x240>
 8004002:	2308      	movs	r3, #8
 8004004:	e00e      	b.n	8004024 <HAL_GPIO_Init+0x240>
 8004006:	2307      	movs	r3, #7
 8004008:	e00c      	b.n	8004024 <HAL_GPIO_Init+0x240>
 800400a:	2306      	movs	r3, #6
 800400c:	e00a      	b.n	8004024 <HAL_GPIO_Init+0x240>
 800400e:	2305      	movs	r3, #5
 8004010:	e008      	b.n	8004024 <HAL_GPIO_Init+0x240>
 8004012:	2304      	movs	r3, #4
 8004014:	e006      	b.n	8004024 <HAL_GPIO_Init+0x240>
 8004016:	2303      	movs	r3, #3
 8004018:	e004      	b.n	8004024 <HAL_GPIO_Init+0x240>
 800401a:	2302      	movs	r3, #2
 800401c:	e002      	b.n	8004024 <HAL_GPIO_Init+0x240>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <HAL_GPIO_Init+0x240>
 8004022:	2300      	movs	r3, #0
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	f002 0203 	and.w	r2, r2, #3
 800402a:	0092      	lsls	r2, r2, #2
 800402c:	4093      	lsls	r3, r2
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004034:	4935      	ldr	r1, [pc, #212]	; (800410c <HAL_GPIO_Init+0x328>)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	3302      	adds	r3, #2
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004042:	4b3d      	ldr	r3, [pc, #244]	; (8004138 <HAL_GPIO_Init+0x354>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004066:	4a34      	ldr	r2, [pc, #208]	; (8004138 <HAL_GPIO_Init+0x354>)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800406c:	4b32      	ldr	r3, [pc, #200]	; (8004138 <HAL_GPIO_Init+0x354>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004090:	4a29      	ldr	r2, [pc, #164]	; (8004138 <HAL_GPIO_Init+0x354>)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004096:	4b28      	ldr	r3, [pc, #160]	; (8004138 <HAL_GPIO_Init+0x354>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ba:	4a1f      	ldr	r2, [pc, #124]	; (8004138 <HAL_GPIO_Init+0x354>)
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040c0:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <HAL_GPIO_Init+0x354>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040e4:	4a14      	ldr	r2, [pc, #80]	; (8004138 <HAL_GPIO_Init+0x354>)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3301      	adds	r3, #1
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b0f      	cmp	r3, #15
 80040f4:	f67f ae86 	bls.w	8003e04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	3724      	adds	r7, #36	; 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
 800410c:	40013800 	.word	0x40013800
 8004110:	40020000 	.word	0x40020000
 8004114:	40020400 	.word	0x40020400
 8004118:	40020800 	.word	0x40020800
 800411c:	40020c00 	.word	0x40020c00
 8004120:	40021000 	.word	0x40021000
 8004124:	40021400 	.word	0x40021400
 8004128:	40021800 	.word	0x40021800
 800412c:	40021c00 	.word	0x40021c00
 8004130:	40022000 	.word	0x40022000
 8004134:	40022400 	.word	0x40022400
 8004138:	40013c00 	.word	0x40013c00

0800413c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	887b      	ldrh	r3, [r7, #2]
 800414e:	4013      	ands	r3, r2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
 8004158:	e001      	b.n	800415e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800415a:	2300      	movs	r3, #0
 800415c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800415e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
 8004178:	4613      	mov	r3, r2
 800417a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800417c:	787b      	ldrb	r3, [r7, #1]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004182:	887a      	ldrh	r2, [r7, #2]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004188:	e003      	b.n	8004192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800418a:	887b      	ldrh	r3, [r7, #2]
 800418c:	041a      	lsls	r2, r3, #16
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	619a      	str	r2, [r3, #24]
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e0bf      	b.n	8004332 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f8ba 	bl	8004340 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80041e2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6999      	ldr	r1, [r3, #24]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80041f8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6899      	ldr	r1, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b4a      	ldr	r3, [pc, #296]	; (800433c <HAL_LTDC_Init+0x19c>)
 8004214:	400b      	ands	r3, r1
 8004216:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	041b      	lsls	r3, r3, #16
 800421e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6899      	ldr	r1, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68d9      	ldr	r1, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b3e      	ldr	r3, [pc, #248]	; (800433c <HAL_LTDC_Init+0x19c>)
 8004242:	400b      	ands	r3, r1
 8004244:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	041b      	lsls	r3, r3, #16
 800424c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68d9      	ldr	r1, [r3, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1a      	ldr	r2, [r3, #32]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6919      	ldr	r1, [r3, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b33      	ldr	r3, [pc, #204]	; (800433c <HAL_LTDC_Init+0x19c>)
 8004270:	400b      	ands	r3, r1
 8004272:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6919      	ldr	r1, [r3, #16]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6959      	ldr	r1, [r3, #20]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b27      	ldr	r3, [pc, #156]	; (800433c <HAL_LTDC_Init+0x19c>)
 800429e:	400b      	ands	r3, r1
 80042a0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6959      	ldr	r1, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0206 	orr.w	r2, r2, #6
 800430e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	f000f800 	.word	0xf000f800

08004340 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004354:	b5b0      	push	{r4, r5, r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_LTDC_ConfigLayer+0x1a>
 800436a:	2302      	movs	r3, #2
 800436c:	e02c      	b.n	80043c8 <HAL_LTDC_ConfigLayer+0x74>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2202      	movs	r2, #2
 800437a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2134      	movs	r1, #52	; 0x34
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	4413      	add	r3, r2
 800438a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4614      	mov	r4, r2
 8004392:	461d      	mov	r5, r3
 8004394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800439a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800439c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800439e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043a0:	682b      	ldr	r3, [r5, #0]
 80043a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f811 	bl	80043d0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2201      	movs	r2, #1
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bdb0      	pop	{r4, r5, r7, pc}

080043d0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b089      	sub	sp, #36	; 0x24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	0c1b      	lsrs	r3, r3, #16
 80043e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ec:	4413      	add	r3, r2
 80043ee:	041b      	lsls	r3, r3, #16
 80043f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	01db      	lsls	r3, r3, #7
 80043fc:	4413      	add	r3, r2
 80043fe:	3384      	adds	r3, #132	; 0x84
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	4611      	mov	r1, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	01d2      	lsls	r2, r2, #7
 800440c:	440a      	add	r2, r1
 800440e:	3284      	adds	r2, #132	; 0x84
 8004410:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004414:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004426:	4413      	add	r3, r2
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4619      	mov	r1, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	01db      	lsls	r3, r3, #7
 8004434:	440b      	add	r3, r1
 8004436:	3384      	adds	r3, #132	; 0x84
 8004438:	4619      	mov	r1, r3
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4313      	orrs	r3, r2
 800443e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800444e:	4413      	add	r3, r2
 8004450:	041b      	lsls	r3, r3, #16
 8004452:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	01db      	lsls	r3, r3, #7
 800445e:	4413      	add	r3, r2
 8004460:	3384      	adds	r3, #132	; 0x84
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	4611      	mov	r1, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	01d2      	lsls	r2, r2, #7
 800446e:	440a      	add	r2, r1
 8004470:	3284      	adds	r2, #132	; 0x84
 8004472:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004476:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004486:	4413      	add	r3, r2
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4619      	mov	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	01db      	lsls	r3, r3, #7
 8004494:	440b      	add	r3, r1
 8004496:	3384      	adds	r3, #132	; 0x84
 8004498:	4619      	mov	r1, r3
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	4313      	orrs	r3, r2
 800449e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	01db      	lsls	r3, r3, #7
 80044aa:	4413      	add	r3, r2
 80044ac:	3384      	adds	r3, #132	; 0x84
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	4611      	mov	r1, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	01d2      	lsls	r2, r2, #7
 80044ba:	440a      	add	r2, r1
 80044bc:	3284      	adds	r2, #132	; 0x84
 80044be:	f023 0307 	bic.w	r3, r3, #7
 80044c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	01db      	lsls	r3, r3, #7
 80044ce:	4413      	add	r3, r2
 80044d0:	3384      	adds	r3, #132	; 0x84
 80044d2:	461a      	mov	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044e0:	021b      	lsls	r3, r3, #8
 80044e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80044ea:	041b      	lsls	r3, r3, #16
 80044ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	01db      	lsls	r3, r3, #7
 8004500:	4413      	add	r3, r2
 8004502:	3384      	adds	r3, #132	; 0x84
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	01db      	lsls	r3, r3, #7
 8004510:	4413      	add	r3, r2
 8004512:	3384      	adds	r3, #132	; 0x84
 8004514:	461a      	mov	r2, r3
 8004516:	2300      	movs	r3, #0
 8004518:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004520:	461a      	mov	r2, r3
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	431a      	orrs	r2, r3
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	431a      	orrs	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4619      	mov	r1, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	01db      	lsls	r3, r3, #7
 8004534:	440b      	add	r3, r1
 8004536:	3384      	adds	r3, #132	; 0x84
 8004538:	4619      	mov	r1, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	01db      	lsls	r3, r3, #7
 800454a:	4413      	add	r3, r2
 800454c:	3384      	adds	r3, #132	; 0x84
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	4611      	mov	r1, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	01d2      	lsls	r2, r2, #7
 800455a:	440a      	add	r2, r1
 800455c:	3284      	adds	r2, #132	; 0x84
 800455e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004562:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	01db      	lsls	r3, r3, #7
 800456e:	4413      	add	r3, r2
 8004570:	3384      	adds	r3, #132	; 0x84
 8004572:	461a      	mov	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	01db      	lsls	r3, r3, #7
 8004584:	4413      	add	r3, r2
 8004586:	3384      	adds	r3, #132	; 0x84
 8004588:	69da      	ldr	r2, [r3, #28]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4619      	mov	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	01db      	lsls	r3, r3, #7
 8004594:	440b      	add	r3, r1
 8004596:	3384      	adds	r3, #132	; 0x84
 8004598:	4619      	mov	r1, r3
 800459a:	4b58      	ldr	r3, [pc, #352]	; (80046fc <LTDC_SetConfig+0x32c>)
 800459c:	4013      	ands	r3, r2
 800459e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	69da      	ldr	r2, [r3, #28]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	68f9      	ldr	r1, [r7, #12]
 80045aa:	6809      	ldr	r1, [r1, #0]
 80045ac:	4608      	mov	r0, r1
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	01c9      	lsls	r1, r1, #7
 80045b2:	4401      	add	r1, r0
 80045b4:	3184      	adds	r1, #132	; 0x84
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	01db      	lsls	r3, r3, #7
 80045c4:	4413      	add	r3, r2
 80045c6:	3384      	adds	r3, #132	; 0x84
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	01db      	lsls	r3, r3, #7
 80045d4:	4413      	add	r3, r2
 80045d6:	3384      	adds	r3, #132	; 0x84
 80045d8:	461a      	mov	r2, r3
 80045da:	2300      	movs	r3, #0
 80045dc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	01db      	lsls	r3, r3, #7
 80045e8:	4413      	add	r3, r2
 80045ea:	3384      	adds	r3, #132	; 0x84
 80045ec:	461a      	mov	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d102      	bne.n	8004602 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80045fc:	2304      	movs	r3, #4
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	e01b      	b.n	800463a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d102      	bne.n	8004610 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800460a:	2303      	movs	r3, #3
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	e014      	b.n	800463a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2b04      	cmp	r3, #4
 8004616:	d00b      	beq.n	8004630 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800461c:	2b02      	cmp	r3, #2
 800461e:	d007      	beq.n	8004630 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004624:	2b03      	cmp	r3, #3
 8004626:	d003      	beq.n	8004630 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800462c:	2b07      	cmp	r3, #7
 800462e:	d102      	bne.n	8004636 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004630:	2302      	movs	r3, #2
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	e001      	b.n	800463a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004636:	2301      	movs	r3, #1
 8004638:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	01db      	lsls	r3, r3, #7
 8004644:	4413      	add	r3, r2
 8004646:	3384      	adds	r3, #132	; 0x84
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	4611      	mov	r1, r2
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	01d2      	lsls	r2, r2, #7
 8004654:	440a      	add	r2, r1
 8004656:	3284      	adds	r2, #132	; 0x84
 8004658:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800465c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	fb02 f303 	mul.w	r3, r2, r3
 8004668:	041a      	lsls	r2, r3, #16
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6859      	ldr	r1, [r3, #4]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	1acb      	subs	r3, r1, r3
 8004674:	69f9      	ldr	r1, [r7, #28]
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	3303      	adds	r3, #3
 800467c:	68f9      	ldr	r1, [r7, #12]
 800467e:	6809      	ldr	r1, [r1, #0]
 8004680:	4608      	mov	r0, r1
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	01c9      	lsls	r1, r1, #7
 8004686:	4401      	add	r1, r0
 8004688:	3184      	adds	r1, #132	; 0x84
 800468a:	4313      	orrs	r3, r2
 800468c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	01db      	lsls	r3, r3, #7
 8004698:	4413      	add	r3, r2
 800469a:	3384      	adds	r3, #132	; 0x84
 800469c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4619      	mov	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	01db      	lsls	r3, r3, #7
 80046a8:	440b      	add	r3, r1
 80046aa:	3384      	adds	r3, #132	; 0x84
 80046ac:	4619      	mov	r1, r3
 80046ae:	4b14      	ldr	r3, [pc, #80]	; (8004700 <LTDC_SetConfig+0x330>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	01db      	lsls	r3, r3, #7
 80046be:	4413      	add	r3, r2
 80046c0:	3384      	adds	r3, #132	; 0x84
 80046c2:	461a      	mov	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	01db      	lsls	r3, r3, #7
 80046d4:	4413      	add	r3, r2
 80046d6:	3384      	adds	r3, #132	; 0x84
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	4611      	mov	r1, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	01d2      	lsls	r2, r2, #7
 80046e4:	440a      	add	r2, r1
 80046e6:	3284      	adds	r2, #132	; 0x84
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	6013      	str	r3, [r2, #0]
}
 80046ee:	bf00      	nop
 80046f0:	3724      	adds	r7, #36	; 0x24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	fffff8f8 	.word	0xfffff8f8
 8004700:	fffff800 	.word	0xfffff800

08004704 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8004716:	2200      	movs	r2, #0
 8004718:	e001      	b.n	800471e <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800471a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d102      	bne.n	8004730 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800472a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800472e:	e000      	b.n	8004732 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8004730:	2200      	movs	r2, #0
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d102      	bne.n	8004744 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800473e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004742:	e000      	b.n	8004746 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8004744:	2200      	movs	r2, #0
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474e:	1e5a      	subs	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	4413      	add	r3, r2
 800475e:	1e5a      	subs	r2, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	441a      	add	r2, r3
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	4413      	add	r3, r2
 8004774:	1e5a      	subs	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	441a      	add	r2, r3
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	441a      	add	r2, r3
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	4413      	add	r3, r2
 8004790:	1e5a      	subs	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80047ae:	4b23      	ldr	r3, [pc, #140]	; (800483c <HAL_PWREx_EnableOverDrive+0x98>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	4a22      	ldr	r2, [pc, #136]	; (800483c <HAL_PWREx_EnableOverDrive+0x98>)
 80047b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ba:	4b20      	ldr	r3, [pc, #128]	; (800483c <HAL_PWREx_EnableOverDrive+0x98>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80047c6:	4b1e      	ldr	r3, [pc, #120]	; (8004840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047d2:	f7fe f875 	bl	80028c0 <HAL_GetTick>
 80047d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047d8:	e009      	b.n	80047ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047da:	f7fe f871 	bl	80028c0 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047e8:	d901      	bls.n	80047ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e022      	b.n	8004834 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047ee:	4b14      	ldr	r3, [pc, #80]	; (8004840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fa:	d1ee      	bne.n	80047da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80047fc:	4b10      	ldr	r3, [pc, #64]	; (8004840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a0f      	ldr	r2, [pc, #60]	; (8004840 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004806:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004808:	f7fe f85a 	bl	80028c0 <HAL_GetTick>
 800480c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800480e:	e009      	b.n	8004824 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004810:	f7fe f856 	bl	80028c0 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800481e:	d901      	bls.n	8004824 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e007      	b.n	8004834 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004830:	d1ee      	bne.n	8004810 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40023800 	.word	0x40023800
 8004840:	40007000 	.word	0x40007000

08004844 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800484c:	2300      	movs	r3, #0
 800484e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e29b      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8087 	beq.w	8004976 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004868:	4b96      	ldr	r3, [pc, #600]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 030c 	and.w	r3, r3, #12
 8004870:	2b04      	cmp	r3, #4
 8004872:	d00c      	beq.n	800488e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004874:	4b93      	ldr	r3, [pc, #588]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b08      	cmp	r3, #8
 800487e:	d112      	bne.n	80048a6 <HAL_RCC_OscConfig+0x62>
 8004880:	4b90      	ldr	r3, [pc, #576]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800488c:	d10b      	bne.n	80048a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800488e:	4b8d      	ldr	r3, [pc, #564]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d06c      	beq.n	8004974 <HAL_RCC_OscConfig+0x130>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d168      	bne.n	8004974 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e275      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ae:	d106      	bne.n	80048be <HAL_RCC_OscConfig+0x7a>
 80048b0:	4b84      	ldr	r3, [pc, #528]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a83      	ldr	r2, [pc, #524]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	e02e      	b.n	800491c <HAL_RCC_OscConfig+0xd8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x9c>
 80048c6:	4b7f      	ldr	r3, [pc, #508]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a7e      	ldr	r2, [pc, #504]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	4b7c      	ldr	r3, [pc, #496]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a7b      	ldr	r2, [pc, #492]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e01d      	b.n	800491c <HAL_RCC_OscConfig+0xd8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048e8:	d10c      	bne.n	8004904 <HAL_RCC_OscConfig+0xc0>
 80048ea:	4b76      	ldr	r3, [pc, #472]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a75      	ldr	r2, [pc, #468]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	4b73      	ldr	r3, [pc, #460]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a72      	ldr	r2, [pc, #456]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	e00b      	b.n	800491c <HAL_RCC_OscConfig+0xd8>
 8004904:	4b6f      	ldr	r3, [pc, #444]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a6e      	ldr	r2, [pc, #440]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 800490a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	4b6c      	ldr	r3, [pc, #432]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a6b      	ldr	r2, [pc, #428]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800491a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d013      	beq.n	800494c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fd ffcc 	bl	80028c0 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800492c:	f7fd ffc8 	bl	80028c0 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b64      	cmp	r3, #100	; 0x64
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e229      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	4b61      	ldr	r3, [pc, #388]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0xe8>
 800494a:	e014      	b.n	8004976 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fd ffb8 	bl	80028c0 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004954:	f7fd ffb4 	bl	80028c0 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	; 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e215      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004966:	4b57      	ldr	r3, [pc, #348]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x110>
 8004972:	e000      	b.n	8004976 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d069      	beq.n	8004a56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004982:	4b50      	ldr	r3, [pc, #320]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00b      	beq.n	80049a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800498e:	4b4d      	ldr	r3, [pc, #308]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b08      	cmp	r3, #8
 8004998:	d11c      	bne.n	80049d4 <HAL_RCC_OscConfig+0x190>
 800499a:	4b4a      	ldr	r3, [pc, #296]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d116      	bne.n	80049d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a6:	4b47      	ldr	r3, [pc, #284]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_RCC_OscConfig+0x17a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d001      	beq.n	80049be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e1e9      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049be:	4b41      	ldr	r3, [pc, #260]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	493d      	ldr	r1, [pc, #244]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d2:	e040      	b.n	8004a56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d023      	beq.n	8004a24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049dc:	4b39      	ldr	r3, [pc, #228]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a38      	ldr	r2, [pc, #224]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fd ff6a 	bl	80028c0 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f0:	f7fd ff66 	bl	80028c0 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e1c7      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a02:	4b30      	ldr	r3, [pc, #192]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0e:	4b2d      	ldr	r3, [pc, #180]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4929      	ldr	r1, [pc, #164]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
 8004a22:	e018      	b.n	8004a56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a24:	4b27      	ldr	r3, [pc, #156]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a26      	ldr	r2, [pc, #152]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a2a:	f023 0301 	bic.w	r3, r3, #1
 8004a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a30:	f7fd ff46 	bl	80028c0 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a38:	f7fd ff42 	bl	80028c0 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e1a3      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4a:	4b1e      	ldr	r3, [pc, #120]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d038      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d019      	beq.n	8004a9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6a:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6e:	4a15      	ldr	r2, [pc, #84]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a76:	f7fd ff23 	bl	80028c0 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a7e:	f7fd ff1f 	bl	80028c0 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e180      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a90:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0f0      	beq.n	8004a7e <HAL_RCC_OscConfig+0x23a>
 8004a9c:	e01a      	b.n	8004ad4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9e:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa2:	4a08      	ldr	r2, [pc, #32]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004aa4:	f023 0301 	bic.w	r3, r3, #1
 8004aa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aaa:	f7fd ff09 	bl	80028c0 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab2:	f7fd ff05 	bl	80028c0 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d903      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e166      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
 8004ac4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac8:	4b92      	ldr	r3, [pc, #584]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ee      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80a4 	beq.w	8004c2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae2:	4b8c      	ldr	r3, [pc, #560]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10d      	bne.n	8004b0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aee:	4b89      	ldr	r3, [pc, #548]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	4a88      	ldr	r2, [pc, #544]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af8:	6413      	str	r3, [r2, #64]	; 0x40
 8004afa:	4b86      	ldr	r3, [pc, #536]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b02:	60bb      	str	r3, [r7, #8]
 8004b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b06:	2301      	movs	r3, #1
 8004b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b0a:	4b83      	ldr	r3, [pc, #524]	; (8004d18 <HAL_RCC_OscConfig+0x4d4>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d118      	bne.n	8004b48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b16:	4b80      	ldr	r3, [pc, #512]	; (8004d18 <HAL_RCC_OscConfig+0x4d4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a7f      	ldr	r2, [pc, #508]	; (8004d18 <HAL_RCC_OscConfig+0x4d4>)
 8004b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b22:	f7fd fecd 	bl	80028c0 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2a:	f7fd fec9 	bl	80028c0 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b64      	cmp	r3, #100	; 0x64
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e12a      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b3c:	4b76      	ldr	r3, [pc, #472]	; (8004d18 <HAL_RCC_OscConfig+0x4d4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d106      	bne.n	8004b5e <HAL_RCC_OscConfig+0x31a>
 8004b50:	4b70      	ldr	r3, [pc, #448]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	4a6f      	ldr	r2, [pc, #444]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5c:	e02d      	b.n	8004bba <HAL_RCC_OscConfig+0x376>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCC_OscConfig+0x33c>
 8004b66:	4b6b      	ldr	r3, [pc, #428]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	4a6a      	ldr	r2, [pc, #424]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b6c:	f023 0301 	bic.w	r3, r3, #1
 8004b70:	6713      	str	r3, [r2, #112]	; 0x70
 8004b72:	4b68      	ldr	r3, [pc, #416]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	4a67      	ldr	r2, [pc, #412]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b78:	f023 0304 	bic.w	r3, r3, #4
 8004b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7e:	e01c      	b.n	8004bba <HAL_RCC_OscConfig+0x376>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	d10c      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x35e>
 8004b88:	4b62      	ldr	r3, [pc, #392]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	4a61      	ldr	r2, [pc, #388]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b8e:	f043 0304 	orr.w	r3, r3, #4
 8004b92:	6713      	str	r3, [r2, #112]	; 0x70
 8004b94:	4b5f      	ldr	r3, [pc, #380]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b98:	4a5e      	ldr	r2, [pc, #376]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba0:	e00b      	b.n	8004bba <HAL_RCC_OscConfig+0x376>
 8004ba2:	4b5c      	ldr	r3, [pc, #368]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	4a5b      	ldr	r2, [pc, #364]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	6713      	str	r3, [r2, #112]	; 0x70
 8004bae:	4b59      	ldr	r3, [pc, #356]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	4a58      	ldr	r2, [pc, #352]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004bb4:	f023 0304 	bic.w	r3, r3, #4
 8004bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d015      	beq.n	8004bee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fd fe7d 	bl	80028c0 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bca:	f7fd fe79 	bl	80028c0 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e0d8      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be0:	4b4c      	ldr	r3, [pc, #304]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ee      	beq.n	8004bca <HAL_RCC_OscConfig+0x386>
 8004bec:	e014      	b.n	8004c18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bee:	f7fd fe67 	bl	80028c0 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf4:	e00a      	b.n	8004c0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf6:	f7fd fe63 	bl	80028c0 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0c2      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0c:	4b41      	ldr	r3, [pc, #260]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ee      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1e:	4b3d      	ldr	r3, [pc, #244]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	4a3c      	ldr	r2, [pc, #240]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 80ae 	beq.w	8004d90 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c34:	4b37      	ldr	r3, [pc, #220]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d06d      	beq.n	8004d1c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d14b      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c48:	4b32      	ldr	r3, [pc, #200]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a31      	ldr	r2, [pc, #196]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fd fe34 	bl	80028c0 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5c:	f7fd fe30 	bl	80028c0 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e091      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6e:	4b29      	ldr	r3, [pc, #164]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69da      	ldr	r2, [r3, #28]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	019b      	lsls	r3, r3, #6
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	085b      	lsrs	r3, r3, #1
 8004c92:	3b01      	subs	r3, #1
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	061b      	lsls	r3, r3, #24
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	071b      	lsls	r3, r3, #28
 8004ca6:	491b      	ldr	r1, [pc, #108]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cac:	4b19      	ldr	r3, [pc, #100]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a18      	ldr	r2, [pc, #96]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fd fe02 	bl	80028c0 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc0:	f7fd fdfe 	bl	80028c0 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e05f      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd2:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x47c>
 8004cde:	e057      	b.n	8004d90 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a0b      	ldr	r2, [pc, #44]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fd fde8 	bl	80028c0 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf4:	f7fd fde4 	bl	80028c0 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e045      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d06:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x4b0>
 8004d12:	e03d      	b.n	8004d90 <HAL_RCC_OscConfig+0x54c>
 8004d14:	40023800 	.word	0x40023800
 8004d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d1c:	4b1f      	ldr	r3, [pc, #124]	; (8004d9c <HAL_RCC_OscConfig+0x558>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d030      	beq.n	8004d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d129      	bne.n	8004d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d122      	bne.n	8004d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d119      	bne.n	8004d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	3b01      	subs	r3, #1
 8004d66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d10f      	bne.n	8004d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d107      	bne.n	8004d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800

08004da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0d0      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004db8:	4b6a      	ldr	r3, [pc, #424]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d910      	bls.n	8004de8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b67      	ldr	r3, [pc, #412]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f023 020f 	bic.w	r2, r3, #15
 8004dce:	4965      	ldr	r1, [pc, #404]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd6:	4b63      	ldr	r3, [pc, #396]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d001      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0b8      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d020      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e00:	4b59      	ldr	r3, [pc, #356]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	4a58      	ldr	r2, [pc, #352]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e18:	4b53      	ldr	r3, [pc, #332]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4a52      	ldr	r2, [pc, #328]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e24:	4b50      	ldr	r3, [pc, #320]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	494d      	ldr	r1, [pc, #308]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d040      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4a:	4b47      	ldr	r3, [pc, #284]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d115      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e07f      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e62:	4b41      	ldr	r3, [pc, #260]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e073      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e72:	4b3d      	ldr	r3, [pc, #244]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e06b      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e82:	4b39      	ldr	r3, [pc, #228]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f023 0203 	bic.w	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4936      	ldr	r1, [pc, #216]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e94:	f7fd fd14 	bl	80028c0 <HAL_GetTick>
 8004e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e9c:	f7fd fd10 	bl	80028c0 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e053      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb2:	4b2d      	ldr	r3, [pc, #180]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 020c 	and.w	r2, r3, #12
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d1eb      	bne.n	8004e9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b27      	ldr	r3, [pc, #156]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d210      	bcs.n	8004ef4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 020f 	bic.w	r2, r3, #15
 8004eda:	4922      	ldr	r1, [pc, #136]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e032      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f00:	4b19      	ldr	r3, [pc, #100]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4916      	ldr	r1, [pc, #88]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f1e:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	490e      	ldr	r1, [pc, #56]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f32:	f000 f821 	bl	8004f78 <HAL_RCC_GetSysClockFreq>
 8004f36:	4602      	mov	r2, r0
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	091b      	lsrs	r3, r3, #4
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	490a      	ldr	r1, [pc, #40]	; (8004f6c <HAL_RCC_ClockConfig+0x1cc>)
 8004f44:	5ccb      	ldrb	r3, [r1, r3]
 8004f46:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4a:	4a09      	ldr	r2, [pc, #36]	; (8004f70 <HAL_RCC_ClockConfig+0x1d0>)
 8004f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <HAL_RCC_ClockConfig+0x1d4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fd fc70 	bl	8002838 <HAL_InitTick>

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40023c00 	.word	0x40023c00
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	0800b1ec 	.word	0x0800b1ec
 8004f70:	20000004 	.word	0x20000004
 8004f74:	2000001c 	.word	0x2000001c

08004f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f7c:	b090      	sub	sp, #64	; 0x40
 8004f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
 8004f84:	2300      	movs	r3, #0
 8004f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f88:	2300      	movs	r3, #0
 8004f8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f90:	4b59      	ldr	r3, [pc, #356]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 030c 	and.w	r3, r3, #12
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d00d      	beq.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	f200 80a1 	bhi.w	80050e4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_RCC_GetSysClockFreq+0x34>
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d003      	beq.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004faa:	e09b      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fac:	4b53      	ldr	r3, [pc, #332]	; (80050fc <HAL_RCC_GetSysClockFreq+0x184>)
 8004fae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fb0:	e09b      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fb2:	4b53      	ldr	r3, [pc, #332]	; (8005100 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fb6:	e098      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fb8:	4b4f      	ldr	r3, [pc, #316]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fc0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004fc2:	4b4d      	ldr	r3, [pc, #308]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d028      	beq.n	8005020 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fce:	4b4a      	ldr	r3, [pc, #296]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	099b      	lsrs	r3, r3, #6
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	623b      	str	r3, [r7, #32]
 8004fd8:	627a      	str	r2, [r7, #36]	; 0x24
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4b47      	ldr	r3, [pc, #284]	; (8005100 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fe4:	fb03 f201 	mul.w	r2, r3, r1
 8004fe8:	2300      	movs	r3, #0
 8004fea:	fb00 f303 	mul.w	r3, r0, r3
 8004fee:	4413      	add	r3, r2
 8004ff0:	4a43      	ldr	r2, [pc, #268]	; (8005100 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ff2:	fba0 1202 	umull	r1, r2, r0, r2
 8004ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ff8:	460a      	mov	r2, r1
 8004ffa:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ffe:	4413      	add	r3, r2
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005004:	2200      	movs	r2, #0
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	61fa      	str	r2, [r7, #28]
 800500a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800500e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005012:	f7fb f965 	bl	80002e0 <__aeabi_uldivmod>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4613      	mov	r3, r2
 800501c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800501e:	e053      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005020:	4b35      	ldr	r3, [pc, #212]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	099b      	lsrs	r3, r3, #6
 8005026:	2200      	movs	r2, #0
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	617a      	str	r2, [r7, #20]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005032:	f04f 0b00 	mov.w	fp, #0
 8005036:	4652      	mov	r2, sl
 8005038:	465b      	mov	r3, fp
 800503a:	f04f 0000 	mov.w	r0, #0
 800503e:	f04f 0100 	mov.w	r1, #0
 8005042:	0159      	lsls	r1, r3, #5
 8005044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005048:	0150      	lsls	r0, r2, #5
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	ebb2 080a 	subs.w	r8, r2, sl
 8005052:	eb63 090b 	sbc.w	r9, r3, fp
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005062:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005066:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800506a:	ebb2 0408 	subs.w	r4, r2, r8
 800506e:	eb63 0509 	sbc.w	r5, r3, r9
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	00eb      	lsls	r3, r5, #3
 800507c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005080:	00e2      	lsls	r2, r4, #3
 8005082:	4614      	mov	r4, r2
 8005084:	461d      	mov	r5, r3
 8005086:	eb14 030a 	adds.w	r3, r4, sl
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	eb45 030b 	adc.w	r3, r5, fp
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800509e:	4629      	mov	r1, r5
 80050a0:	028b      	lsls	r3, r1, #10
 80050a2:	4621      	mov	r1, r4
 80050a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050a8:	4621      	mov	r1, r4
 80050aa:	028a      	lsls	r2, r1, #10
 80050ac:	4610      	mov	r0, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	2200      	movs	r2, #0
 80050b4:	60bb      	str	r3, [r7, #8]
 80050b6:	60fa      	str	r2, [r7, #12]
 80050b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050bc:	f7fb f910 	bl	80002e0 <__aeabi_uldivmod>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4613      	mov	r3, r2
 80050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80050c8:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	0c1b      	lsrs	r3, r3, #16
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	3301      	adds	r3, #1
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80050d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050e2:	e002      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_RCC_GetSysClockFreq+0x184>)
 80050e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3740      	adds	r7, #64	; 0x40
 80050f0:	46bd      	mov	sp, r7
 80050f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050f6:	bf00      	nop
 80050f8:	40023800 	.word	0x40023800
 80050fc:	00f42400 	.word	0x00f42400
 8005100:	017d7840 	.word	0x017d7840

08005104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d012      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800512c:	4b69      	ldr	r3, [pc, #420]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4a68      	ldr	r2, [pc, #416]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005132:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005136:	6093      	str	r3, [r2, #8]
 8005138:	4b66      	ldr	r3, [pc, #408]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005140:	4964      	ldr	r1, [pc, #400]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005142:	4313      	orrs	r3, r2
 8005144:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800514e:	2301      	movs	r3, #1
 8005150:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d017      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800515e:	4b5d      	ldr	r3, [pc, #372]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005164:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516c:	4959      	ldr	r1, [pc, #356]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517c:	d101      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800517e:	2301      	movs	r3, #1
 8005180:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800518a:	2301      	movs	r3, #1
 800518c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d017      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800519a:	4b4e      	ldr	r3, [pc, #312]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800519c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	494a      	ldr	r1, [pc, #296]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b8:	d101      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80051ba:	2301      	movs	r3, #1
 80051bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80051c6:	2301      	movs	r3, #1
 80051c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80051d6:	2301      	movs	r3, #1
 80051d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 808b 	beq.w	80052fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051e8:	4b3a      	ldr	r3, [pc, #232]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	4a39      	ldr	r2, [pc, #228]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f2:	6413      	str	r3, [r2, #64]	; 0x40
 80051f4:	4b37      	ldr	r3, [pc, #220]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005200:	4b35      	ldr	r3, [pc, #212]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a34      	ldr	r2, [pc, #208]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800520a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520c:	f7fd fb58 	bl	80028c0 <HAL_GetTick>
 8005210:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005214:	f7fd fb54 	bl	80028c0 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	; 0x64
 8005220:	d901      	bls.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e38d      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005226:	4b2c      	ldr	r3, [pc, #176]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005232:	4b28      	ldr	r3, [pc, #160]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800523a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d035      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	429a      	cmp	r2, r3
 800524e:	d02e      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005250:	4b20      	ldr	r3, [pc, #128]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005258:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800525a:	4b1e      	ldr	r3, [pc, #120]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525e:	4a1d      	ldr	r2, [pc, #116]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005264:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005266:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526a:	4a1a      	ldr	r2, [pc, #104]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005270:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005272:	4a18      	ldr	r2, [pc, #96]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005278:	4b16      	ldr	r3, [pc, #88]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d114      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fd fb1c 	bl	80028c0 <HAL_GetTick>
 8005288:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528a:	e00a      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800528c:	f7fd fb18 	bl	80028c0 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	f241 3288 	movw	r2, #5000	; 0x1388
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e34f      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a2:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0ee      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ba:	d111      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052c8:	4b04      	ldr	r3, [pc, #16]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052ca:	400b      	ands	r3, r1
 80052cc:	4901      	ldr	r1, [pc, #4]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	608b      	str	r3, [r1, #8]
 80052d2:	e00b      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80052d4:	40023800 	.word	0x40023800
 80052d8:	40007000 	.word	0x40007000
 80052dc:	0ffffcff 	.word	0x0ffffcff
 80052e0:	4bac      	ldr	r3, [pc, #688]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	4aab      	ldr	r2, [pc, #684]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052ea:	6093      	str	r3, [r2, #8]
 80052ec:	4ba9      	ldr	r3, [pc, #676]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052f8:	49a6      	ldr	r1, [pc, #664]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b00      	cmp	r3, #0
 8005308:	d010      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800530a:	4ba2      	ldr	r3, [pc, #648]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800530c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005310:	4aa0      	ldr	r2, [pc, #640]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005316:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800531a:	4b9e      	ldr	r3, [pc, #632]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800531c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	499b      	ldr	r1, [pc, #620]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005338:	4b96      	ldr	r3, [pc, #600]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005346:	4993      	ldr	r1, [pc, #588]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800535a:	4b8e      	ldr	r3, [pc, #568]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005360:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005368:	498a      	ldr	r1, [pc, #552]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800537c:	4b85      	ldr	r3, [pc, #532]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005382:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800538a:	4982      	ldr	r1, [pc, #520]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800539e:	4b7d      	ldr	r3, [pc, #500]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ac:	4979      	ldr	r1, [pc, #484]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053c0:	4b74      	ldr	r3, [pc, #464]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c6:	f023 0203 	bic.w	r2, r3, #3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ce:	4971      	ldr	r1, [pc, #452]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053e2:	4b6c      	ldr	r3, [pc, #432]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e8:	f023 020c 	bic.w	r2, r3, #12
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f0:	4968      	ldr	r1, [pc, #416]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005404:	4b63      	ldr	r3, [pc, #396]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005412:	4960      	ldr	r1, [pc, #384]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005426:	4b5b      	ldr	r3, [pc, #364]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005434:	4957      	ldr	r1, [pc, #348]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005448:	4b52      	ldr	r3, [pc, #328]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005456:	494f      	ldr	r1, [pc, #316]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800546a:	4b4a      	ldr	r3, [pc, #296]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005470:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005478:	4946      	ldr	r1, [pc, #280]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800548c:	4b41      	ldr	r3, [pc, #260]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005492:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549a:	493e      	ldr	r1, [pc, #248]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80054ae:	4b39      	ldr	r3, [pc, #228]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054bc:	4935      	ldr	r1, [pc, #212]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054d0:	4b30      	ldr	r3, [pc, #192]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054de:	492d      	ldr	r1, [pc, #180]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d011      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054f2:	4b28      	ldr	r3, [pc, #160]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005500:	4924      	ldr	r1, [pc, #144]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005510:	d101      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005512:	2301      	movs	r3, #1
 8005514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005522:	2301      	movs	r3, #1
 8005524:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005532:	4b18      	ldr	r3, [pc, #96]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005538:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005540:	4914      	ldr	r1, [pc, #80]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00b      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005564:	490b      	ldr	r1, [pc, #44]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00f      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005578:	4b06      	ldr	r3, [pc, #24]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005588:	4902      	ldr	r1, [pc, #8]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800558a:	4313      	orrs	r3, r2
 800558c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005590:	e002      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005592:	bf00      	nop
 8005594:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00b      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055a4:	4b89      	ldr	r3, [pc, #548]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	4985      	ldr	r1, [pc, #532]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80055c8:	4b80      	ldr	r3, [pc, #512]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d8:	497c      	ldr	r1, [pc, #496]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d005      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055ee:	f040 80d6 	bne.w	800579e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055f2:	4b76      	ldr	r3, [pc, #472]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a75      	ldr	r2, [pc, #468]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055fe:	f7fd f95f 	bl	80028c0 <HAL_GetTick>
 8005602:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005604:	e008      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005606:	f7fd f95b 	bl	80028c0 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b64      	cmp	r3, #100	; 0x64
 8005612:	d901      	bls.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e194      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005618:	4b6c      	ldr	r3, [pc, #432]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1f0      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d021      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005634:	2b00      	cmp	r3, #0
 8005636:	d11d      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005638:	4b64      	ldr	r3, [pc, #400]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800563a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800563e:	0c1b      	lsrs	r3, r3, #16
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005646:	4b61      	ldr	r3, [pc, #388]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800564c:	0e1b      	lsrs	r3, r3, #24
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	019a      	lsls	r2, r3, #6
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	041b      	lsls	r3, r3, #16
 800565e:	431a      	orrs	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	061b      	lsls	r3, r3, #24
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	071b      	lsls	r3, r3, #28
 800566c:	4957      	ldr	r1, [pc, #348]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005688:	d00a      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005692:	2b00      	cmp	r3, #0
 8005694:	d02e      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800569e:	d129      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056a0:	4b4a      	ldr	r3, [pc, #296]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056a6:	0c1b      	lsrs	r3, r3, #16
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056ae:	4b47      	ldr	r3, [pc, #284]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b4:	0f1b      	lsrs	r3, r3, #28
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	019a      	lsls	r2, r3, #6
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	041b      	lsls	r3, r3, #16
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	061b      	lsls	r3, r3, #24
 80056ce:	431a      	orrs	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	071b      	lsls	r3, r3, #28
 80056d4:	493d      	ldr	r1, [pc, #244]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056dc:	4b3b      	ldr	r3, [pc, #236]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056e2:	f023 021f 	bic.w	r2, r3, #31
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	3b01      	subs	r3, #1
 80056ec:	4937      	ldr	r1, [pc, #220]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01d      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005700:	4b32      	ldr	r3, [pc, #200]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005706:	0e1b      	lsrs	r3, r3, #24
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800570e:	4b2f      	ldr	r3, [pc, #188]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005714:	0f1b      	lsrs	r3, r3, #28
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	019a      	lsls	r2, r3, #6
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	041b      	lsls	r3, r3, #16
 8005728:	431a      	orrs	r2, r3
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	061b      	lsls	r3, r3, #24
 800572e:	431a      	orrs	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	071b      	lsls	r3, r3, #28
 8005734:	4925      	ldr	r1, [pc, #148]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d011      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	019a      	lsls	r2, r3, #6
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	061b      	lsls	r3, r3, #24
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	071b      	lsls	r3, r3, #28
 8005764:	4919      	ldr	r1, [pc, #100]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800576c:	4b17      	ldr	r3, [pc, #92]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a16      	ldr	r2, [pc, #88]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005772:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005778:	f7fd f8a2 	bl	80028c0 <HAL_GetTick>
 800577c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005780:	f7fd f89e 	bl	80028c0 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b64      	cmp	r3, #100	; 0x64
 800578c:	d901      	bls.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e0d7      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005792:	4b0e      	ldr	r3, [pc, #56]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	f040 80cd 	bne.w	8005940 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057a6:	4b09      	ldr	r3, [pc, #36]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a08      	ldr	r2, [pc, #32]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057b2:	f7fd f885 	bl	80028c0 <HAL_GetTick>
 80057b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057b8:	e00a      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057ba:	f7fd f881 	bl	80028c0 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b64      	cmp	r3, #100	; 0x64
 80057c6:	d903      	bls.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e0ba      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80057cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057d0:	4b5e      	ldr	r3, [pc, #376]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057dc:	d0ed      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d009      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d02e      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d12a      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005806:	4b51      	ldr	r3, [pc, #324]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580c:	0c1b      	lsrs	r3, r3, #16
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005814:	4b4d      	ldr	r3, [pc, #308]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581a:	0f1b      	lsrs	r3, r3, #28
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	019a      	lsls	r2, r3, #6
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	061b      	lsls	r3, r3, #24
 8005834:	431a      	orrs	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	071b      	lsls	r3, r3, #28
 800583a:	4944      	ldr	r1, [pc, #272]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005842:	4b42      	ldr	r3, [pc, #264]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005848:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	3b01      	subs	r3, #1
 8005852:	021b      	lsls	r3, r3, #8
 8005854:	493d      	ldr	r1, [pc, #244]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d022      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800586c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005870:	d11d      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005872:	4b36      	ldr	r3, [pc, #216]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005878:	0e1b      	lsrs	r3, r3, #24
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005880:	4b32      	ldr	r3, [pc, #200]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005886:	0f1b      	lsrs	r3, r3, #28
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	019a      	lsls	r2, r3, #6
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	041b      	lsls	r3, r3, #16
 800589a:	431a      	orrs	r2, r3
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	061b      	lsls	r3, r3, #24
 80058a0:	431a      	orrs	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	071b      	lsls	r3, r3, #28
 80058a6:	4929      	ldr	r1, [pc, #164]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d028      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058ba:	4b24      	ldr	r3, [pc, #144]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c0:	0e1b      	lsrs	r3, r3, #24
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058c8:	4b20      	ldr	r3, [pc, #128]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ce:	0c1b      	lsrs	r3, r3, #16
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	019a      	lsls	r2, r3, #6
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	041b      	lsls	r3, r3, #16
 80058e0:	431a      	orrs	r2, r3
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	061b      	lsls	r3, r3, #24
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	071b      	lsls	r3, r3, #28
 80058ee:	4917      	ldr	r1, [pc, #92]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058f6:	4b15      	ldr	r3, [pc, #84]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	4911      	ldr	r1, [pc, #68]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800590c:	4b0f      	ldr	r3, [pc, #60]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a0e      	ldr	r2, [pc, #56]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005918:	f7fc ffd2 	bl	80028c0 <HAL_GetTick>
 800591c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005920:	f7fc ffce 	bl	80028c0 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b64      	cmp	r3, #100	; 0x64
 800592c:	d901      	bls.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e007      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005932:	4b06      	ldr	r3, [pc, #24]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800593a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800593e:	d1ef      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3720      	adds	r7, #32
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40023800 	.word	0x40023800

08005950 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e025      	b.n	80059b0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f81d 	bl	80059b8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3304      	adds	r3, #4
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f000 fb49 	bl	8006028 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	461a      	mov	r2, r3
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	f000 fbb3 	bl	800610c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d101      	bne.n	80059e8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80059e4:	2302      	movs	r3, #2
 80059e6:	e018      	b.n	8005a1a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fc07 	bl	800620c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d104      	bne.n	8005a10 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2205      	movs	r2, #5
 8005a0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005a0e:	e003      	b.n	8005a18 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d101      	bne.n	8005a3c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e00e      	b.n	8005a5a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6839      	ldr	r1, [r7, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fbff 	bl	800624e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e01d      	b.n	8005ab0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d106      	bne.n	8005a8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7fb fb4d 	bl	8001128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f000 f8f9 	bl	8005c98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <HAL_TIM_Base_Start+0x50>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b06      	cmp	r3, #6
 8005ad8:	d00b      	beq.n	8005af2 <HAL_TIM_Base_Start+0x3a>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae0:	d007      	beq.n	8005af2 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0201 	orr.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	00010007 	.word	0x00010007

08005b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_TIM_ConfigClockSource+0x18>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e0b3      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x180>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4b55      	ldr	r3, [pc, #340]	; (8005c94 <HAL_TIM_ConfigClockSource+0x188>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b5c:	d03e      	beq.n	8005bdc <HAL_TIM_ConfigClockSource+0xd0>
 8005b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b62:	f200 8087 	bhi.w	8005c74 <HAL_TIM_ConfigClockSource+0x168>
 8005b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6a:	f000 8085 	beq.w	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b72:	d87f      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x168>
 8005b74:	2b70      	cmp	r3, #112	; 0x70
 8005b76:	d01a      	beq.n	8005bae <HAL_TIM_ConfigClockSource+0xa2>
 8005b78:	2b70      	cmp	r3, #112	; 0x70
 8005b7a:	d87b      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x168>
 8005b7c:	2b60      	cmp	r3, #96	; 0x60
 8005b7e:	d050      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x116>
 8005b80:	2b60      	cmp	r3, #96	; 0x60
 8005b82:	d877      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x168>
 8005b84:	2b50      	cmp	r3, #80	; 0x50
 8005b86:	d03c      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0xf6>
 8005b88:	2b50      	cmp	r3, #80	; 0x50
 8005b8a:	d873      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x168>
 8005b8c:	2b40      	cmp	r3, #64	; 0x40
 8005b8e:	d058      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x136>
 8005b90:	2b40      	cmp	r3, #64	; 0x40
 8005b92:	d86f      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x168>
 8005b94:	2b30      	cmp	r3, #48	; 0x30
 8005b96:	d064      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x156>
 8005b98:	2b30      	cmp	r3, #48	; 0x30
 8005b9a:	d86b      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x168>
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d060      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x156>
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	d867      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x168>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d05c      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x156>
 8005ba8:	2b10      	cmp	r3, #16
 8005baa:	d05a      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005bac:	e062      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6899      	ldr	r1, [r3, #8]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f000 f985 	bl	8005ecc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	609a      	str	r2, [r3, #8]
      break;
 8005bda:	e04e      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	6899      	ldr	r1, [r3, #8]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f000 f96e 	bl	8005ecc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bfe:	609a      	str	r2, [r3, #8]
      break;
 8005c00:	e03b      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6859      	ldr	r1, [r3, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f000 f8e2 	bl	8005dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2150      	movs	r1, #80	; 0x50
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 f93b 	bl	8005e96 <TIM_ITRx_SetConfig>
      break;
 8005c20:	e02b      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6859      	ldr	r1, [r3, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f000 f901 	bl	8005e36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2160      	movs	r1, #96	; 0x60
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 f92b 	bl	8005e96 <TIM_ITRx_SetConfig>
      break;
 8005c40:	e01b      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6859      	ldr	r1, [r3, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f000 f8c2 	bl	8005dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2140      	movs	r1, #64	; 0x40
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f91b 	bl	8005e96 <TIM_ITRx_SetConfig>
      break;
 8005c60:	e00b      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f000 f912 	bl	8005e96 <TIM_ITRx_SetConfig>
      break;
 8005c72:	e002      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c74:	bf00      	nop
 8005c76:	e000      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	fffeff88 	.word	0xfffeff88

08005c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a40      	ldr	r2, [pc, #256]	; (8005dac <TIM_Base_SetConfig+0x114>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb6:	d00f      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a3d      	ldr	r2, [pc, #244]	; (8005db0 <TIM_Base_SetConfig+0x118>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00b      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a3c      	ldr	r2, [pc, #240]	; (8005db4 <TIM_Base_SetConfig+0x11c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d007      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a3b      	ldr	r2, [pc, #236]	; (8005db8 <TIM_Base_SetConfig+0x120>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d003      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a3a      	ldr	r2, [pc, #232]	; (8005dbc <TIM_Base_SetConfig+0x124>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d108      	bne.n	8005cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a2f      	ldr	r2, [pc, #188]	; (8005dac <TIM_Base_SetConfig+0x114>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d02b      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf8:	d027      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a2c      	ldr	r2, [pc, #176]	; (8005db0 <TIM_Base_SetConfig+0x118>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d023      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a2b      	ldr	r2, [pc, #172]	; (8005db4 <TIM_Base_SetConfig+0x11c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d01f      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2a      	ldr	r2, [pc, #168]	; (8005db8 <TIM_Base_SetConfig+0x120>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01b      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a29      	ldr	r2, [pc, #164]	; (8005dbc <TIM_Base_SetConfig+0x124>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d017      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a28      	ldr	r2, [pc, #160]	; (8005dc0 <TIM_Base_SetConfig+0x128>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d013      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a27      	ldr	r2, [pc, #156]	; (8005dc4 <TIM_Base_SetConfig+0x12c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00f      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a26      	ldr	r2, [pc, #152]	; (8005dc8 <TIM_Base_SetConfig+0x130>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00b      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a25      	ldr	r2, [pc, #148]	; (8005dcc <TIM_Base_SetConfig+0x134>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d007      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a24      	ldr	r2, [pc, #144]	; (8005dd0 <TIM_Base_SetConfig+0x138>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d003      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a23      	ldr	r2, [pc, #140]	; (8005dd4 <TIM_Base_SetConfig+0x13c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d108      	bne.n	8005d5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a0a      	ldr	r2, [pc, #40]	; (8005dac <TIM_Base_SetConfig+0x114>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_Base_SetConfig+0xf8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a0c      	ldr	r2, [pc, #48]	; (8005dbc <TIM_Base_SetConfig+0x124>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d103      	bne.n	8005d98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	615a      	str	r2, [r3, #20]
}
 8005d9e:	bf00      	nop
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40000c00 	.word	0x40000c00
 8005dbc:	40010400 	.word	0x40010400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40014400 	.word	0x40014400
 8005dc8:	40014800 	.word	0x40014800
 8005dcc:	40001800 	.word	0x40001800
 8005dd0:	40001c00 	.word	0x40001c00
 8005dd4:	40002000 	.word	0x40002000

08005dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f023 0201 	bic.w	r2, r3, #1
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f023 030a 	bic.w	r3, r3, #10
 8005e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	621a      	str	r2, [r3, #32]
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b087      	sub	sp, #28
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f023 0210 	bic.w	r2, r3, #16
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	031b      	lsls	r3, r3, #12
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	621a      	str	r2, [r3, #32]
}
 8005e8a:	bf00      	nop
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b085      	sub	sp, #20
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	f043 0307 	orr.w	r3, r3, #7
 8005eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	609a      	str	r2, [r3, #8]
}
 8005ec0:	bf00      	nop
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	021a      	lsls	r2, r3, #8
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	609a      	str	r2, [r3, #8]
}
 8005f00:	bf00      	nop
 8005f02:	371c      	adds	r7, #28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e06d      	b.n	8006000 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a30      	ldr	r2, [pc, #192]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d004      	beq.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a2f      	ldr	r2, [pc, #188]	; (8006010 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d108      	bne.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a20      	ldr	r2, [pc, #128]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d022      	beq.n	8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f96:	d01d      	beq.n	8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1d      	ldr	r2, [pc, #116]	; (8006014 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d018      	beq.n	8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1c      	ldr	r2, [pc, #112]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d013      	beq.n	8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1a      	ldr	r2, [pc, #104]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00e      	beq.n	8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a15      	ldr	r2, [pc, #84]	; (8006010 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d009      	beq.n	8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a16      	ldr	r2, [pc, #88]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d004      	beq.n	8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a15      	ldr	r2, [pc, #84]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d10c      	bne.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	40010000 	.word	0x40010000
 8006010:	40010400 	.word	0x40010400
 8006014:	40000400 	.word	0x40000400
 8006018:	40000800 	.word	0x40000800
 800601c:	40000c00 	.word	0x40000c00
 8006020:	40014000 	.word	0x40014000
 8006024:	40001800 	.word	0x40001800

08006028 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d027      	beq.n	8006092 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4b2f      	ldr	r3, [pc, #188]	; (8006108 <FMC_SDRAM_Init+0xe0>)
 800604c:	4013      	ands	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006058:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800605e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8006064:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800606a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8006070:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8006076:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800607c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006082:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	e032      	b.n	80060f8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800609e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80060a8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80060ae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <FMC_SDRAM_Init+0xe0>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060cc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80060d2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80060d8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80060de:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80060e4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	ffff8000 	.word	0xffff8000

0800610c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d02e      	beq.n	8006184 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006132:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	3b01      	subs	r3, #1
 8006140:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006142:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	3b01      	subs	r3, #1
 800614a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800614c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	3b01      	subs	r3, #1
 8006154:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006156:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	3b01      	subs	r3, #1
 800615e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006160:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	3b01      	subs	r3, #1
 8006168:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800616a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	3b01      	subs	r3, #1
 8006172:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006174:	4313      	orrs	r3, r2
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	4313      	orrs	r3, r2
 800617a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	609a      	str	r2, [r3, #8]
 8006182:	e039      	b.n	80061f8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4b1e      	ldr	r3, [pc, #120]	; (8006208 <FMC_SDRAM_Timing_Init+0xfc>)
 800618e:	4013      	ands	r3, r2
 8006190:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	3b01      	subs	r3, #1
 8006198:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	3b01      	subs	r3, #1
 80061a0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80061a2:	4313      	orrs	r3, r2
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80061b6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80061c6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80061d0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80061da:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80061e4:	4313      	orrs	r3, r2
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	ff0f0fff 	.word	0xff0f0fff

0800620c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006224:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	3b01      	subs	r3, #1
 800622c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800622e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	695a      	ldr	r2, [r3, #20]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006278:	bf00      	nop
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
	...

08006284 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800628a:	f3ef 8305 	mrs	r3, IPSR
 800628e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006290:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10f      	bne.n	80062b6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006296:	f3ef 8310 	mrs	r3, PRIMASK
 800629a:	607b      	str	r3, [r7, #4]
  return(result);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d105      	bne.n	80062ae <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062a2:	f3ef 8311 	mrs	r3, BASEPRI
 80062a6:	603b      	str	r3, [r7, #0]
  return(result);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <osKernelInitialize+0x3a>
 80062ae:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <osKernelInitialize+0x64>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d103      	bne.n	80062be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80062b6:	f06f 0305 	mvn.w	r3, #5
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	e00c      	b.n	80062d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80062be:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <osKernelInitialize+0x64>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d105      	bne.n	80062d2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80062c6:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <osKernelInitialize+0x64>)
 80062c8:	2201      	movs	r2, #1
 80062ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	e002      	b.n	80062d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80062d2:	f04f 33ff 	mov.w	r3, #4294967295
 80062d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80062d8:	68fb      	ldr	r3, [r7, #12]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	200003fc 	.word	0x200003fc

080062ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062f2:	f3ef 8305 	mrs	r3, IPSR
 80062f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80062f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10f      	bne.n	800631e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006302:	607b      	str	r3, [r7, #4]
  return(result);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d105      	bne.n	8006316 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800630a:	f3ef 8311 	mrs	r3, BASEPRI
 800630e:	603b      	str	r3, [r7, #0]
  return(result);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <osKernelStart+0x3a>
 8006316:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <osKernelStart+0x68>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d103      	bne.n	8006326 <osKernelStart+0x3a>
    stat = osErrorISR;
 800631e:	f06f 0305 	mvn.w	r3, #5
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	e010      	b.n	8006348 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006326:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <osKernelStart+0x68>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d109      	bne.n	8006342 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800632e:	f7ff ffa1 	bl	8006274 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006332:	4b08      	ldr	r3, [pc, #32]	; (8006354 <osKernelStart+0x68>)
 8006334:	2202      	movs	r2, #2
 8006336:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006338:	f001 fec6 	bl	80080c8 <vTaskStartScheduler>
      stat = osOK;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e002      	b.n	8006348 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006342:	f04f 33ff 	mov.w	r3, #4294967295
 8006346:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006348:	68fb      	ldr	r3, [r7, #12]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	200003fc 	.word	0x200003fc

08006358 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006358:	b580      	push	{r7, lr}
 800635a:	b090      	sub	sp, #64	; 0x40
 800635c:	af04      	add	r7, sp, #16
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006364:	2300      	movs	r3, #0
 8006366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006368:	f3ef 8305 	mrs	r3, IPSR
 800636c:	61fb      	str	r3, [r7, #28]
  return(result);
 800636e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006370:	2b00      	cmp	r3, #0
 8006372:	f040 808f 	bne.w	8006494 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006376:	f3ef 8310 	mrs	r3, PRIMASK
 800637a:	61bb      	str	r3, [r7, #24]
  return(result);
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d105      	bne.n	800638e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006382:	f3ef 8311 	mrs	r3, BASEPRI
 8006386:	617b      	str	r3, [r7, #20]
  return(result);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <osThreadNew+0x3e>
 800638e:	4b44      	ldr	r3, [pc, #272]	; (80064a0 <osThreadNew+0x148>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d07e      	beq.n	8006494 <osThreadNew+0x13c>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d07b      	beq.n	8006494 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80063a0:	2318      	movs	r3, #24
 80063a2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80063a8:	f04f 33ff 	mov.w	r3, #4294967295
 80063ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d045      	beq.n	8006440 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <osThreadNew+0x6a>
        name = attr->name;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d008      	beq.n	80063e8 <osThreadNew+0x90>
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	2b38      	cmp	r3, #56	; 0x38
 80063da:	d805      	bhi.n	80063e8 <osThreadNew+0x90>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <osThreadNew+0x94>
        return (NULL);
 80063e8:	2300      	movs	r3, #0
 80063ea:	e054      	b.n	8006496 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	089b      	lsrs	r3, r3, #2
 80063fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00e      	beq.n	8006422 <osThreadNew+0xca>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	2b5b      	cmp	r3, #91	; 0x5b
 800640a:	d90a      	bls.n	8006422 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006410:	2b00      	cmp	r3, #0
 8006412:	d006      	beq.n	8006422 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <osThreadNew+0xca>
        mem = 1;
 800641c:	2301      	movs	r3, #1
 800641e:	623b      	str	r3, [r7, #32]
 8006420:	e010      	b.n	8006444 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10c      	bne.n	8006444 <osThreadNew+0xec>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d108      	bne.n	8006444 <osThreadNew+0xec>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d104      	bne.n	8006444 <osThreadNew+0xec>
          mem = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	623b      	str	r3, [r7, #32]
 800643e:	e001      	b.n	8006444 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006440:	2300      	movs	r3, #0
 8006442:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d110      	bne.n	800646c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006452:	9202      	str	r2, [sp, #8]
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800645e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f001 fc51 	bl	8007d08 <xTaskCreateStatic>
 8006466:	4603      	mov	r3, r0
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	e013      	b.n	8006494 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d110      	bne.n	8006494 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	b29a      	uxth	r2, r3
 8006476:	f107 0310 	add.w	r3, r7, #16
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f001 fca2 	bl	8007dce <xTaskCreate>
 800648a:	4603      	mov	r3, r0
 800648c:	2b01      	cmp	r3, #1
 800648e:	d001      	beq.n	8006494 <osThreadNew+0x13c>
          hTask = NULL;
 8006490:	2300      	movs	r3, #0
 8006492:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006494:	693b      	ldr	r3, [r7, #16]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3730      	adds	r7, #48	; 0x30
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	200003fc 	.word	0x200003fc

080064a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ac:	f3ef 8305 	mrs	r3, IPSR
 80064b0:	613b      	str	r3, [r7, #16]
  return(result);
 80064b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10f      	bne.n	80064d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b8:	f3ef 8310 	mrs	r3, PRIMASK
 80064bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d105      	bne.n	80064d0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064c4:	f3ef 8311 	mrs	r3, BASEPRI
 80064c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d007      	beq.n	80064e0 <osDelay+0x3c>
 80064d0:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <osDelay+0x58>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d103      	bne.n	80064e0 <osDelay+0x3c>
    stat = osErrorISR;
 80064d8:	f06f 0305 	mvn.w	r3, #5
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	e007      	b.n	80064f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f001 fdb6 	bl	800805c <vTaskDelay>
    }
  }

  return (stat);
 80064f0:	697b      	ldr	r3, [r7, #20]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	200003fc 	.word	0x200003fc

08006500 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b08c      	sub	sp, #48	; 0x30
 8006504:	af02      	add	r7, sp, #8
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800650c:	2300      	movs	r3, #0
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006510:	f3ef 8305 	mrs	r3, IPSR
 8006514:	61bb      	str	r3, [r7, #24]
  return(result);
 8006516:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006518:	2b00      	cmp	r3, #0
 800651a:	f040 8086 	bne.w	800662a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800651e:	f3ef 8310 	mrs	r3, PRIMASK
 8006522:	617b      	str	r3, [r7, #20]
  return(result);
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800652a:	f3ef 8311 	mrs	r3, BASEPRI
 800652e:	613b      	str	r3, [r7, #16]
  return(result);
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <osSemaphoreNew+0x3e>
 8006536:	4b3f      	ldr	r3, [pc, #252]	; (8006634 <osSemaphoreNew+0x134>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d075      	beq.n	800662a <osSemaphoreNew+0x12a>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d072      	beq.n	800662a <osSemaphoreNew+0x12a>
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	429a      	cmp	r2, r3
 800654a:	d86e      	bhi.n	800662a <osSemaphoreNew+0x12a>
    mem = -1;
 800654c:	f04f 33ff 	mov.w	r3, #4294967295
 8006550:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d015      	beq.n	8006584 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d006      	beq.n	800656e <osSemaphoreNew+0x6e>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b4f      	cmp	r3, #79	; 0x4f
 8006566:	d902      	bls.n	800656e <osSemaphoreNew+0x6e>
        mem = 1;
 8006568:	2301      	movs	r3, #1
 800656a:	623b      	str	r3, [r7, #32]
 800656c:	e00c      	b.n	8006588 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d108      	bne.n	8006588 <osSemaphoreNew+0x88>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <osSemaphoreNew+0x88>
          mem = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	623b      	str	r3, [r7, #32]
 8006582:	e001      	b.n	8006588 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658e:	d04c      	beq.n	800662a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d128      	bne.n	80065e8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d10a      	bne.n	80065b2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2203      	movs	r2, #3
 80065a2:	9200      	str	r2, [sp, #0]
 80065a4:	2200      	movs	r2, #0
 80065a6:	2100      	movs	r1, #0
 80065a8:	2001      	movs	r0, #1
 80065aa:	f000 fbc1 	bl	8006d30 <xQueueGenericCreateStatic>
 80065ae:	6278      	str	r0, [r7, #36]	; 0x24
 80065b0:	e005      	b.n	80065be <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80065b2:	2203      	movs	r2, #3
 80065b4:	2100      	movs	r1, #0
 80065b6:	2001      	movs	r0, #1
 80065b8:	f000 fc3c 	bl	8006e34 <xQueueGenericCreate>
 80065bc:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d022      	beq.n	800660a <osSemaphoreNew+0x10a>
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d01f      	beq.n	800660a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80065ca:	2300      	movs	r3, #0
 80065cc:	2200      	movs	r2, #0
 80065ce:	2100      	movs	r1, #0
 80065d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065d2:	f000 fd07 	bl	8006fe4 <xQueueGenericSend>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d016      	beq.n	800660a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80065dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065de:	f001 f9bd 	bl	800795c <vQueueDelete>
            hSemaphore = NULL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
 80065e6:	e010      	b.n	800660a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d108      	bne.n	8006600 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	461a      	mov	r2, r3
 80065f4:	68b9      	ldr	r1, [r7, #8]
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fc81 	bl	8006efe <xQueueCreateCountingSemaphoreStatic>
 80065fc:	6278      	str	r0, [r7, #36]	; 0x24
 80065fe:	e004      	b.n	800660a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 fcb6 	bl	8006f74 <xQueueCreateCountingSemaphore>
 8006608:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00c      	beq.n	800662a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <osSemaphoreNew+0x11e>
          name = attr->name;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	e001      	b.n	8006622 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800661e:	2300      	movs	r3, #0
 8006620:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006622:	69f9      	ldr	r1, [r7, #28]
 8006624:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006626:	f001 fae7 	bl	8007bf8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800662c:	4618      	mov	r0, r3
 800662e:	3728      	adds	r7, #40	; 0x28
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	200003fc 	.word	0x200003fc

08006638 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006646:	2300      	movs	r3, #0
 8006648:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d103      	bne.n	8006658 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006650:	f06f 0303 	mvn.w	r3, #3
 8006654:	61fb      	str	r3, [r7, #28]
 8006656:	e04b      	b.n	80066f0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006658:	f3ef 8305 	mrs	r3, IPSR
 800665c:	617b      	str	r3, [r7, #20]
  return(result);
 800665e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10f      	bne.n	8006684 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006664:	f3ef 8310 	mrs	r3, PRIMASK
 8006668:	613b      	str	r3, [r7, #16]
  return(result);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d105      	bne.n	800667c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006670:	f3ef 8311 	mrs	r3, BASEPRI
 8006674:	60fb      	str	r3, [r7, #12]
  return(result);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d026      	beq.n	80066ca <osSemaphoreAcquire+0x92>
 800667c:	4b1f      	ldr	r3, [pc, #124]	; (80066fc <osSemaphoreAcquire+0xc4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b02      	cmp	r3, #2
 8006682:	d122      	bne.n	80066ca <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800668a:	f06f 0303 	mvn.w	r3, #3
 800668e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006690:	e02d      	b.n	80066ee <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006692:	2300      	movs	r3, #0
 8006694:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006696:	f107 0308 	add.w	r3, r7, #8
 800669a:	461a      	mov	r2, r3
 800669c:	2100      	movs	r1, #0
 800669e:	69b8      	ldr	r0, [r7, #24]
 80066a0:	f001 f8d6 	bl	8007850 <xQueueReceiveFromISR>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d003      	beq.n	80066b2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80066aa:	f06f 0302 	mvn.w	r3, #2
 80066ae:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80066b0:	e01d      	b.n	80066ee <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01a      	beq.n	80066ee <osSemaphoreAcquire+0xb6>
 80066b8:	4b11      	ldr	r3, [pc, #68]	; (8006700 <osSemaphoreAcquire+0xc8>)
 80066ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80066c8:	e011      	b.n	80066ee <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	69b8      	ldr	r0, [r7, #24]
 80066ce:	f000 ffab 	bl	8007628 <xQueueSemaphoreTake>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d00b      	beq.n	80066f0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80066de:	f06f 0301 	mvn.w	r3, #1
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	e004      	b.n	80066f0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80066e6:	f06f 0302 	mvn.w	r3, #2
 80066ea:	61fb      	str	r3, [r7, #28]
 80066ec:	e000      	b.n	80066f0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80066ee:	bf00      	nop
      }
    }
  }

  return (stat);
 80066f0:	69fb      	ldr	r3, [r7, #28]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	200003fc 	.word	0x200003fc
 8006700:	e000ed04 	.word	0xe000ed04

08006704 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006710:	2300      	movs	r3, #0
 8006712:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d103      	bne.n	8006722 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800671a:	f06f 0303 	mvn.w	r3, #3
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e03e      	b.n	80067a0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006722:	f3ef 8305 	mrs	r3, IPSR
 8006726:	617b      	str	r3, [r7, #20]
  return(result);
 8006728:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10f      	bne.n	800674e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800672e:	f3ef 8310 	mrs	r3, PRIMASK
 8006732:	613b      	str	r3, [r7, #16]
  return(result);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d105      	bne.n	8006746 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800673a:	f3ef 8311 	mrs	r3, BASEPRI
 800673e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01e      	beq.n	8006784 <osSemaphoreRelease+0x80>
 8006746:	4b19      	ldr	r3, [pc, #100]	; (80067ac <osSemaphoreRelease+0xa8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d11a      	bne.n	8006784 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800674e:	2300      	movs	r3, #0
 8006750:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006752:	f107 0308 	add.w	r3, r7, #8
 8006756:	4619      	mov	r1, r3
 8006758:	69b8      	ldr	r0, [r7, #24]
 800675a:	f000 fde9 	bl	8007330 <xQueueGiveFromISR>
 800675e:	4603      	mov	r3, r0
 8006760:	2b01      	cmp	r3, #1
 8006762:	d003      	beq.n	800676c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006764:	f06f 0302 	mvn.w	r3, #2
 8006768:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800676a:	e018      	b.n	800679e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d015      	beq.n	800679e <osSemaphoreRelease+0x9a>
 8006772:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <osSemaphoreRelease+0xac>)
 8006774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006782:	e00c      	b.n	800679e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006784:	2300      	movs	r3, #0
 8006786:	2200      	movs	r2, #0
 8006788:	2100      	movs	r1, #0
 800678a:	69b8      	ldr	r0, [r7, #24]
 800678c:	f000 fc2a 	bl	8006fe4 <xQueueGenericSend>
 8006790:	4603      	mov	r3, r0
 8006792:	2b01      	cmp	r3, #1
 8006794:	d004      	beq.n	80067a0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006796:	f06f 0302 	mvn.w	r3, #2
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	e000      	b.n	80067a0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800679e:	bf00      	nop
    }
  }

  return (stat);
 80067a0:	69fb      	ldr	r3, [r7, #28]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3720      	adds	r7, #32
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	200003fc 	.word	0x200003fc
 80067b0:	e000ed04 	.word	0xe000ed04

080067b4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08c      	sub	sp, #48	; 0x30
 80067b8:	af02      	add	r7, sp, #8
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067c4:	f3ef 8305 	mrs	r3, IPSR
 80067c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80067ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d16f      	bne.n	80068b0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d0:	f3ef 8310 	mrs	r3, PRIMASK
 80067d4:	617b      	str	r3, [r7, #20]
  return(result);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d105      	bne.n	80067e8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067dc:	f3ef 8311 	mrs	r3, BASEPRI
 80067e0:	613b      	str	r3, [r7, #16]
  return(result);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <osMessageQueueNew+0x3c>
 80067e8:	4b34      	ldr	r3, [pc, #208]	; (80068bc <osMessageQueueNew+0x108>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d05f      	beq.n	80068b0 <osMessageQueueNew+0xfc>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d05c      	beq.n	80068b0 <osMessageQueueNew+0xfc>
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d059      	beq.n	80068b0 <osMessageQueueNew+0xfc>
    mem = -1;
 80067fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006800:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d029      	beq.n	800685c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d012      	beq.n	8006836 <osMessageQueueNew+0x82>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	2b4f      	cmp	r3, #79	; 0x4f
 8006816:	d90e      	bls.n	8006836 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	695a      	ldr	r2, [r3, #20]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	68b9      	ldr	r1, [r7, #8]
 8006828:	fb01 f303 	mul.w	r3, r1, r3
 800682c:	429a      	cmp	r2, r3
 800682e:	d302      	bcc.n	8006836 <osMessageQueueNew+0x82>
        mem = 1;
 8006830:	2301      	movs	r3, #1
 8006832:	623b      	str	r3, [r7, #32]
 8006834:	e014      	b.n	8006860 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d110      	bne.n	8006860 <osMessageQueueNew+0xac>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10c      	bne.n	8006860 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800684a:	2b00      	cmp	r3, #0
 800684c:	d108      	bne.n	8006860 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d104      	bne.n	8006860 <osMessageQueueNew+0xac>
          mem = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	623b      	str	r3, [r7, #32]
 800685a:	e001      	b.n	8006860 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d10b      	bne.n	800687e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691a      	ldr	r2, [r3, #16]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2100      	movs	r1, #0
 8006870:	9100      	str	r1, [sp, #0]
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 fa5b 	bl	8006d30 <xQueueGenericCreateStatic>
 800687a:	6278      	str	r0, [r7, #36]	; 0x24
 800687c:	e008      	b.n	8006890 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d105      	bne.n	8006890 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006884:	2200      	movs	r2, #0
 8006886:	68b9      	ldr	r1, [r7, #8]
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 fad3 	bl	8006e34 <xQueueGenericCreate>
 800688e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00c      	beq.n	80068b0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <osMessageQueueNew+0xf0>
        name = attr->name;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	61fb      	str	r3, [r7, #28]
 80068a2:	e001      	b.n	80068a8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80068a8:	69f9      	ldr	r1, [r7, #28]
 80068aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068ac:	f001 f9a4 	bl	8007bf8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3728      	adds	r7, #40	; 0x28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	200003fc 	.word	0x200003fc

080068c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08a      	sub	sp, #40	; 0x28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	603b      	str	r3, [r7, #0]
 80068cc:	4613      	mov	r3, r2
 80068ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068d8:	f3ef 8305 	mrs	r3, IPSR
 80068dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80068de:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10f      	bne.n	8006904 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e4:	f3ef 8310 	mrs	r3, PRIMASK
 80068e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d105      	bne.n	80068fc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068f0:	f3ef 8311 	mrs	r3, BASEPRI
 80068f4:	617b      	str	r3, [r7, #20]
  return(result);
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d02c      	beq.n	8006956 <osMessageQueuePut+0x96>
 80068fc:	4b28      	ldr	r3, [pc, #160]	; (80069a0 <osMessageQueuePut+0xe0>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b02      	cmp	r3, #2
 8006902:	d128      	bne.n	8006956 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d005      	beq.n	8006916 <osMessageQueuePut+0x56>
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <osMessageQueuePut+0x56>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006916:	f06f 0303 	mvn.w	r3, #3
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800691c:	e039      	b.n	8006992 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800691e:	2300      	movs	r3, #0
 8006920:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006922:	f107 0210 	add.w	r2, r7, #16
 8006926:	2300      	movs	r3, #0
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	6a38      	ldr	r0, [r7, #32]
 800692c:	f000 fc60 	bl	80071f0 <xQueueGenericSendFromISR>
 8006930:	4603      	mov	r3, r0
 8006932:	2b01      	cmp	r3, #1
 8006934:	d003      	beq.n	800693e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006936:	f06f 0302 	mvn.w	r3, #2
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800693c:	e029      	b.n	8006992 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d026      	beq.n	8006992 <osMessageQueuePut+0xd2>
 8006944:	4b17      	ldr	r3, [pc, #92]	; (80069a4 <osMessageQueuePut+0xe4>)
 8006946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006954:	e01d      	b.n	8006992 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <osMessageQueuePut+0xa2>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d103      	bne.n	800696a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006962:	f06f 0303 	mvn.w	r3, #3
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
 8006968:	e014      	b.n	8006994 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800696a:	2300      	movs	r3, #0
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	6a38      	ldr	r0, [r7, #32]
 8006972:	f000 fb37 	bl	8006fe4 <xQueueGenericSend>
 8006976:	4603      	mov	r3, r0
 8006978:	2b01      	cmp	r3, #1
 800697a:	d00b      	beq.n	8006994 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006982:	f06f 0301 	mvn.w	r3, #1
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
 8006988:	e004      	b.n	8006994 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800698a:	f06f 0302 	mvn.w	r3, #2
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
 8006990:	e000      	b.n	8006994 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006992:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006996:	4618      	mov	r0, r3
 8006998:	3728      	adds	r7, #40	; 0x28
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	200003fc 	.word	0x200003fc
 80069a4:	e000ed04 	.word	0xe000ed04

080069a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	; 0x28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069be:	f3ef 8305 	mrs	r3, IPSR
 80069c2:	61fb      	str	r3, [r7, #28]
  return(result);
 80069c4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10f      	bne.n	80069ea <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ca:	f3ef 8310 	mrs	r3, PRIMASK
 80069ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d105      	bne.n	80069e2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069d6:	f3ef 8311 	mrs	r3, BASEPRI
 80069da:	617b      	str	r3, [r7, #20]
  return(result);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d02c      	beq.n	8006a3c <osMessageQueueGet+0x94>
 80069e2:	4b28      	ldr	r3, [pc, #160]	; (8006a84 <osMessageQueueGet+0xdc>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d128      	bne.n	8006a3c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <osMessageQueueGet+0x54>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <osMessageQueueGet+0x54>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80069fc:	f06f 0303 	mvn.w	r3, #3
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a02:	e038      	b.n	8006a76 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006a08:	f107 0310 	add.w	r3, r7, #16
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	68b9      	ldr	r1, [r7, #8]
 8006a10:	6a38      	ldr	r0, [r7, #32]
 8006a12:	f000 ff1d 	bl	8007850 <xQueueReceiveFromISR>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d003      	beq.n	8006a24 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006a1c:	f06f 0302 	mvn.w	r3, #2
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a22:	e028      	b.n	8006a76 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d025      	beq.n	8006a76 <osMessageQueueGet+0xce>
 8006a2a:	4b17      	ldr	r3, [pc, #92]	; (8006a88 <osMessageQueueGet+0xe0>)
 8006a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a3a:	e01c      	b.n	8006a76 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <osMessageQueueGet+0xa0>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d103      	bne.n	8006a50 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006a48:	f06f 0303 	mvn.w	r3, #3
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a4e:	e013      	b.n	8006a78 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	6a38      	ldr	r0, [r7, #32]
 8006a56:	f000 fd01 	bl	800745c <xQueueReceive>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d00b      	beq.n	8006a78 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006a66:	f06f 0301 	mvn.w	r3, #1
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6c:	e004      	b.n	8006a78 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006a6e:	f06f 0302 	mvn.w	r3, #2
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
 8006a74:	e000      	b.n	8006a78 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a76:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3728      	adds	r7, #40	; 0x28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	200003fc 	.word	0x200003fc
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4a07      	ldr	r2, [pc, #28]	; (8006ab8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006a9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4a06      	ldr	r2, [pc, #24]	; (8006abc <vApplicationGetIdleTaskMemory+0x30>)
 8006aa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2280      	movs	r2, #128	; 0x80
 8006aa8:	601a      	str	r2, [r3, #0]
}
 8006aaa:	bf00      	nop
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	20000400 	.word	0x20000400
 8006abc:	2000045c 	.word	0x2000045c

08006ac0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4a07      	ldr	r2, [pc, #28]	; (8006aec <vApplicationGetTimerTaskMemory+0x2c>)
 8006ad0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	4a06      	ldr	r2, [pc, #24]	; (8006af0 <vApplicationGetTimerTaskMemory+0x30>)
 8006ad6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ade:	601a      	str	r2, [r3, #0]
}
 8006ae0:	bf00      	nop
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	2000065c 	.word	0x2000065c
 8006af0:	200006b8 	.word	0x200006b8

08006af4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f103 0208 	add.w	r2, r3, #8
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f103 0208 	add.w	r2, r3, #8
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f103 0208 	add.w	r2, r3, #8
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	601a      	str	r2, [r3, #0]
}
 8006b8a:	bf00      	nop
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b96:	b480      	push	{r7}
 8006b98:	b085      	sub	sp, #20
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bac:	d103      	bne.n	8006bb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	e00c      	b.n	8006bd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3308      	adds	r3, #8
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	e002      	b.n	8006bc4 <vListInsert+0x2e>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d2f6      	bcs.n	8006bbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	601a      	str	r2, [r3, #0]
}
 8006bfc:	bf00      	nop
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	6892      	ldr	r2, [r2, #8]
 8006c1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6852      	ldr	r2, [r2, #4]
 8006c28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d103      	bne.n	8006c3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	1e5a      	subs	r2, r3, #1
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10c      	bne.n	8006c8a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	b672      	cpsid	i
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	b662      	cpsie	i
 8006c84:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c86:	bf00      	nop
 8006c88:	e7fe      	b.n	8006c88 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006c8a:	f002 fcc7 	bl	800961c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c9a:	fb01 f303 	mul.w	r3, r1, r3
 8006c9e:	441a      	add	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	68f9      	ldr	r1, [r7, #12]
 8006cbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006cc0:	fb01 f303 	mul.w	r3, r1, r3
 8006cc4:	441a      	add	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	22ff      	movs	r2, #255	; 0xff
 8006cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	22ff      	movs	r2, #255	; 0xff
 8006cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d114      	bne.n	8006d0a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01a      	beq.n	8006d1e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3310      	adds	r3, #16
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 fc83 	bl	80085f8 <xTaskRemoveFromEventList>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d012      	beq.n	8006d1e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006cf8:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <xQueueGenericReset+0xd0>)
 8006cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	e009      	b.n	8006d1e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3310      	adds	r3, #16
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7ff fef0 	bl	8006af4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3324      	adds	r3, #36	; 0x24
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7ff feeb 	bl	8006af4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d1e:	f002 fcb1 	bl	8009684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d22:	2301      	movs	r3, #1
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	e000ed04 	.word	0xe000ed04

08006d30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08e      	sub	sp, #56	; 0x38
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10c      	bne.n	8006d5e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	b672      	cpsid	i
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	b662      	cpsie	i
 8006d58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d5a:	bf00      	nop
 8006d5c:	e7fe      	b.n	8006d5c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10c      	bne.n	8006d7e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	b672      	cpsid	i
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	b662      	cpsie	i
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d7a:	bf00      	nop
 8006d7c:	e7fe      	b.n	8006d7c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <xQueueGenericCreateStatic+0x5a>
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <xQueueGenericCreateStatic+0x5e>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <xQueueGenericCreateStatic+0x60>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10c      	bne.n	8006dae <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d98:	b672      	cpsid	i
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	b662      	cpsie	i
 8006da8:	623b      	str	r3, [r7, #32]
}
 8006daa:	bf00      	nop
 8006dac:	e7fe      	b.n	8006dac <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d102      	bne.n	8006dba <xQueueGenericCreateStatic+0x8a>
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <xQueueGenericCreateStatic+0x8e>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e000      	b.n	8006dc0 <xQueueGenericCreateStatic+0x90>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10c      	bne.n	8006dde <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	b672      	cpsid	i
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	b662      	cpsie	i
 8006dd8:	61fb      	str	r3, [r7, #28]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dde:	2350      	movs	r3, #80	; 0x50
 8006de0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b50      	cmp	r3, #80	; 0x50
 8006de6:	d00c      	beq.n	8006e02 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	b672      	cpsid	i
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	b662      	cpsie	i
 8006dfc:	61bb      	str	r3, [r7, #24]
}
 8006dfe:	bf00      	nop
 8006e00:	e7fe      	b.n	8006e00 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e02:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00d      	beq.n	8006e2a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 f847 	bl	8006eb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3730      	adds	r7, #48	; 0x30
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b08a      	sub	sp, #40	; 0x28
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10c      	bne.n	8006e62 <xQueueGenericCreate+0x2e>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	b672      	cpsid	i
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	b662      	cpsie	i
 8006e5c:	613b      	str	r3, [r7, #16]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d102      	bne.n	8006e6e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61fb      	str	r3, [r7, #28]
 8006e6c:	e004      	b.n	8006e78 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	fb02 f303 	mul.w	r3, r2, r3
 8006e76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	3350      	adds	r3, #80	; 0x50
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f002 fcf9 	bl	8009874 <pvPortMalloc>
 8006e82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d011      	beq.n	8006eae <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	3350      	adds	r3, #80	; 0x50
 8006e92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e9c:	79fa      	ldrb	r2, [r7, #7]
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	68b9      	ldr	r1, [r7, #8]
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 f805 	bl	8006eb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006eae:	69bb      	ldr	r3, [r7, #24]
	}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3720      	adds	r7, #32
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d103      	bne.n	8006ed4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	e002      	b.n	8006eda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	69b8      	ldr	r0, [r7, #24]
 8006eea:	f7ff feb7 	bl	8006c5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	78fa      	ldrb	r2, [r7, #3]
 8006ef2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ef6:	bf00      	nop
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b08a      	sub	sp, #40	; 0x28
 8006f02:	af02      	add	r7, sp, #8
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10c      	bne.n	8006f2a <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	b672      	cpsid	i
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	b662      	cpsie	i
 8006f24:	61bb      	str	r3, [r7, #24]
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d90c      	bls.n	8006f4c <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	b672      	cpsid	i
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	b662      	cpsie	i
 8006f46:	617b      	str	r3, [r7, #20]
}
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	2100      	movs	r1, #0
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f7ff feea 	bl	8006d30 <xQueueGenericCreateStatic>
 8006f5c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
	}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3720      	adds	r7, #32
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10c      	bne.n	8006f9e <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	b672      	cpsid	i
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	b662      	cpsie	i
 8006f98:	613b      	str	r3, [r7, #16]
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d90c      	bls.n	8006fc0 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006faa:	b672      	cpsid	i
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	b662      	cpsie	i
 8006fba:	60fb      	str	r3, [r7, #12]
}
 8006fbc:	bf00      	nop
 8006fbe:	e7fe      	b.n	8006fbe <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff ff35 	bl	8006e34 <xQueueGenericCreate>
 8006fca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006fd8:	697b      	ldr	r3, [r7, #20]
	}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08e      	sub	sp, #56	; 0x38
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10c      	bne.n	800701a <xQueueGenericSend+0x36>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	b672      	cpsid	i
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	b662      	cpsie	i
 8007014:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007016:	bf00      	nop
 8007018:	e7fe      	b.n	8007018 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d103      	bne.n	8007028 <xQueueGenericSend+0x44>
 8007020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <xQueueGenericSend+0x48>
 8007028:	2301      	movs	r3, #1
 800702a:	e000      	b.n	800702e <xQueueGenericSend+0x4a>
 800702c:	2300      	movs	r3, #0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10c      	bne.n	800704c <xQueueGenericSend+0x68>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	b672      	cpsid	i
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	b662      	cpsie	i
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007048:	bf00      	nop
 800704a:	e7fe      	b.n	800704a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d103      	bne.n	800705a <xQueueGenericSend+0x76>
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <xQueueGenericSend+0x7a>
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <xQueueGenericSend+0x7c>
 800705e:	2300      	movs	r3, #0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10c      	bne.n	800707e <xQueueGenericSend+0x9a>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	b672      	cpsid	i
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	b662      	cpsie	i
 8007078:	623b      	str	r3, [r7, #32]
}
 800707a:	bf00      	nop
 800707c:	e7fe      	b.n	800707c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800707e:	f001 fc81 	bl	8008984 <xTaskGetSchedulerState>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <xQueueGenericSend+0xaa>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <xQueueGenericSend+0xae>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <xQueueGenericSend+0xb0>
 8007092:	2300      	movs	r3, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10c      	bne.n	80070b2 <xQueueGenericSend+0xce>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	b672      	cpsid	i
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	b662      	cpsie	i
 80070ac:	61fb      	str	r3, [r7, #28]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070b2:	f002 fab3 	bl	800961c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070be:	429a      	cmp	r2, r3
 80070c0:	d302      	bcc.n	80070c8 <xQueueGenericSend+0xe4>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d129      	bne.n	800711c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070ce:	f000 fc82 	bl	80079d6 <prvCopyDataToQueue>
 80070d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d010      	beq.n	80070fe <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	3324      	adds	r3, #36	; 0x24
 80070e0:	4618      	mov	r0, r3
 80070e2:	f001 fa89 	bl	80085f8 <xTaskRemoveFromEventList>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d013      	beq.n	8007114 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80070ec:	4b3f      	ldr	r3, [pc, #252]	; (80071ec <xQueueGenericSend+0x208>)
 80070ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	e00a      	b.n	8007114 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d007      	beq.n	8007114 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007104:	4b39      	ldr	r3, [pc, #228]	; (80071ec <xQueueGenericSend+0x208>)
 8007106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007114:	f002 fab6 	bl	8009684 <vPortExitCritical>
				return pdPASS;
 8007118:	2301      	movs	r3, #1
 800711a:	e063      	b.n	80071e4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d103      	bne.n	800712a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007122:	f002 faaf 	bl	8009684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007126:	2300      	movs	r3, #0
 8007128:	e05c      	b.n	80071e4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800712a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007130:	f107 0314 	add.w	r3, r7, #20
 8007134:	4618      	mov	r0, r3
 8007136:	f001 fac5 	bl	80086c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800713a:	2301      	movs	r3, #1
 800713c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800713e:	f002 faa1 	bl	8009684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007142:	f001 f82b 	bl	800819c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007146:	f002 fa69 	bl	800961c <vPortEnterCritical>
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007150:	b25b      	sxtb	r3, r3
 8007152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007156:	d103      	bne.n	8007160 <xQueueGenericSend+0x17c>
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007166:	b25b      	sxtb	r3, r3
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716c:	d103      	bne.n	8007176 <xQueueGenericSend+0x192>
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007176:	f002 fa85 	bl	8009684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800717a:	1d3a      	adds	r2, r7, #4
 800717c:	f107 0314 	add.w	r3, r7, #20
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f001 fab4 	bl	80086f0 <xTaskCheckForTimeOut>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d124      	bne.n	80071d8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800718e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007190:	f000 fd19 	bl	8007bc6 <prvIsQueueFull>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d018      	beq.n	80071cc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	3310      	adds	r3, #16
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	4611      	mov	r1, r2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f001 f9d4 	bl	8008550 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071aa:	f000 fca4 	bl	8007af6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071ae:	f001 f803 	bl	80081b8 <xTaskResumeAll>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f47f af7c 	bne.w	80070b2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80071ba:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <xQueueGenericSend+0x208>)
 80071bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	e772      	b.n	80070b2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80071cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ce:	f000 fc92 	bl	8007af6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071d2:	f000 fff1 	bl	80081b8 <xTaskResumeAll>
 80071d6:	e76c      	b.n	80070b2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80071d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071da:	f000 fc8c 	bl	8007af6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071de:	f000 ffeb 	bl	80081b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80071e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3738      	adds	r7, #56	; 0x38
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	e000ed04 	.word	0xe000ed04

080071f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08e      	sub	sp, #56	; 0x38
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10c      	bne.n	8007222 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	b672      	cpsid	i
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	b662      	cpsie	i
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800721e:	bf00      	nop
 8007220:	e7fe      	b.n	8007220 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d103      	bne.n	8007230 <xQueueGenericSendFromISR+0x40>
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <xQueueGenericSendFromISR+0x44>
 8007230:	2301      	movs	r3, #1
 8007232:	e000      	b.n	8007236 <xQueueGenericSendFromISR+0x46>
 8007234:	2300      	movs	r3, #0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10c      	bne.n	8007254 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	b672      	cpsid	i
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	b662      	cpsie	i
 800724e:	623b      	str	r3, [r7, #32]
}
 8007250:	bf00      	nop
 8007252:	e7fe      	b.n	8007252 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d103      	bne.n	8007262 <xQueueGenericSendFromISR+0x72>
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725e:	2b01      	cmp	r3, #1
 8007260:	d101      	bne.n	8007266 <xQueueGenericSendFromISR+0x76>
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <xQueueGenericSendFromISR+0x78>
 8007266:	2300      	movs	r3, #0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10c      	bne.n	8007286 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	b672      	cpsid	i
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	b662      	cpsie	i
 8007280:	61fb      	str	r3, [r7, #28]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007286:	f002 fab1 	bl	80097ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800728a:	f3ef 8211 	mrs	r2, BASEPRI
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	b672      	cpsid	i
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	b662      	cpsie	i
 80072a2:	61ba      	str	r2, [r7, #24]
 80072a4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072a6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d302      	bcc.n	80072bc <xQueueGenericSendFromISR+0xcc>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d12c      	bne.n	8007316 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072cc:	f000 fb83 	bl	80079d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072d0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80072d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d8:	d112      	bne.n	8007300 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d016      	beq.n	8007310 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	3324      	adds	r3, #36	; 0x24
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 f986 	bl	80085f8 <xTaskRemoveFromEventList>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00e      	beq.n	8007310 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00b      	beq.n	8007310 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	e007      	b.n	8007310 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007300:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007304:	3301      	adds	r3, #1
 8007306:	b2db      	uxtb	r3, r3
 8007308:	b25a      	sxtb	r2, r3
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007310:	2301      	movs	r3, #1
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007314:	e001      	b.n	800731a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007316:	2300      	movs	r3, #0
 8007318:	637b      	str	r3, [r7, #52]	; 0x34
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007324:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007328:	4618      	mov	r0, r3
 800732a:	3738      	adds	r7, #56	; 0x38
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08e      	sub	sp, #56	; 0x38
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10c      	bne.n	800735e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	b672      	cpsid	i
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	b662      	cpsie	i
 8007358:	623b      	str	r3, [r7, #32]
}
 800735a:	bf00      	nop
 800735c:	e7fe      	b.n	800735c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00c      	beq.n	8007380 <xQueueGiveFromISR+0x50>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	b672      	cpsid	i
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	b662      	cpsie	i
 800737a:	61fb      	str	r3, [r7, #28]
}
 800737c:	bf00      	nop
 800737e:	e7fe      	b.n	800737e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d103      	bne.n	8007390 <xQueueGiveFromISR+0x60>
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <xQueueGiveFromISR+0x64>
 8007390:	2301      	movs	r3, #1
 8007392:	e000      	b.n	8007396 <xQueueGiveFromISR+0x66>
 8007394:	2300      	movs	r3, #0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10c      	bne.n	80073b4 <xQueueGiveFromISR+0x84>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	b672      	cpsid	i
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	b662      	cpsie	i
 80073ae:	61bb      	str	r3, [r7, #24]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073b4:	f002 fa1a 	bl	80097ec <vPortValidateInterruptPriority>
	__asm volatile
 80073b8:	f3ef 8211 	mrs	r2, BASEPRI
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	b672      	cpsid	i
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	b662      	cpsie	i
 80073d0:	617a      	str	r2, [r7, #20]
 80073d2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80073d4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073dc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d22b      	bcs.n	8007440 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007402:	d112      	bne.n	800742a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	2b00      	cmp	r3, #0
 800740a:	d016      	beq.n	800743a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	3324      	adds	r3, #36	; 0x24
 8007410:	4618      	mov	r0, r3
 8007412:	f001 f8f1 	bl	80085f8 <xTaskRemoveFromEventList>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00e      	beq.n	800743a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00b      	beq.n	800743a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2201      	movs	r2, #1
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	e007      	b.n	800743a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800742a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800742e:	3301      	adds	r3, #1
 8007430:	b2db      	uxtb	r3, r3
 8007432:	b25a      	sxtb	r2, r3
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800743a:	2301      	movs	r3, #1
 800743c:	637b      	str	r3, [r7, #52]	; 0x34
 800743e:	e001      	b.n	8007444 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007440:	2300      	movs	r3, #0
 8007442:	637b      	str	r3, [r7, #52]	; 0x34
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f383 8811 	msr	BASEPRI, r3
}
 800744e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007452:	4618      	mov	r0, r3
 8007454:	3738      	adds	r7, #56	; 0x38
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08c      	sub	sp, #48	; 0x30
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007468:	2300      	movs	r3, #0
 800746a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10c      	bne.n	8007490 <xQueueReceive+0x34>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	b672      	cpsid	i
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	b662      	cpsie	i
 800748a:	623b      	str	r3, [r7, #32]
}
 800748c:	bf00      	nop
 800748e:	e7fe      	b.n	800748e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d103      	bne.n	800749e <xQueueReceive+0x42>
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <xQueueReceive+0x46>
 800749e:	2301      	movs	r3, #1
 80074a0:	e000      	b.n	80074a4 <xQueueReceive+0x48>
 80074a2:	2300      	movs	r3, #0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10c      	bne.n	80074c2 <xQueueReceive+0x66>
	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ac:	b672      	cpsid	i
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	b662      	cpsie	i
 80074bc:	61fb      	str	r3, [r7, #28]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074c2:	f001 fa5f 	bl	8008984 <xTaskGetSchedulerState>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d102      	bne.n	80074d2 <xQueueReceive+0x76>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <xQueueReceive+0x7a>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e000      	b.n	80074d8 <xQueueReceive+0x7c>
 80074d6:	2300      	movs	r3, #0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10c      	bne.n	80074f6 <xQueueReceive+0x9a>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	b672      	cpsid	i
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	b662      	cpsie	i
 80074f0:	61bb      	str	r3, [r7, #24]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074f6:	f002 f891 	bl	800961c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	2b00      	cmp	r3, #0
 8007504:	d01f      	beq.n	8007546 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007506:	68b9      	ldr	r1, [r7, #8]
 8007508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800750a:	f000 face 	bl	8007aaa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	1e5a      	subs	r2, r3, #1
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00f      	beq.n	800753e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	3310      	adds	r3, #16
 8007522:	4618      	mov	r0, r3
 8007524:	f001 f868 	bl	80085f8 <xTaskRemoveFromEventList>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d007      	beq.n	800753e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800752e:	4b3d      	ldr	r3, [pc, #244]	; (8007624 <xQueueReceive+0x1c8>)
 8007530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800753e:	f002 f8a1 	bl	8009684 <vPortExitCritical>
				return pdPASS;
 8007542:	2301      	movs	r3, #1
 8007544:	e069      	b.n	800761a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d103      	bne.n	8007554 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800754c:	f002 f89a 	bl	8009684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007550:	2300      	movs	r3, #0
 8007552:	e062      	b.n	800761a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d106      	bne.n	8007568 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800755a:	f107 0310 	add.w	r3, r7, #16
 800755e:	4618      	mov	r0, r3
 8007560:	f001 f8b0 	bl	80086c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007564:	2301      	movs	r3, #1
 8007566:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007568:	f002 f88c 	bl	8009684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800756c:	f000 fe16 	bl	800819c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007570:	f002 f854 	bl	800961c <vPortEnterCritical>
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800757a:	b25b      	sxtb	r3, r3
 800757c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007580:	d103      	bne.n	800758a <xQueueReceive+0x12e>
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007590:	b25b      	sxtb	r3, r3
 8007592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007596:	d103      	bne.n	80075a0 <xQueueReceive+0x144>
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075a0:	f002 f870 	bl	8009684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075a4:	1d3a      	adds	r2, r7, #4
 80075a6:	f107 0310 	add.w	r3, r7, #16
 80075aa:	4611      	mov	r1, r2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f001 f89f 	bl	80086f0 <xTaskCheckForTimeOut>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d123      	bne.n	8007600 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ba:	f000 faee 	bl	8007b9a <prvIsQueueEmpty>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d017      	beq.n	80075f4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	3324      	adds	r3, #36	; 0x24
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	4611      	mov	r1, r2
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 ffbf 	bl	8008550 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075d4:	f000 fa8f 	bl	8007af6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075d8:	f000 fdee 	bl	80081b8 <xTaskResumeAll>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d189      	bne.n	80074f6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80075e2:	4b10      	ldr	r3, [pc, #64]	; (8007624 <xQueueReceive+0x1c8>)
 80075e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	e780      	b.n	80074f6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80075f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f6:	f000 fa7e 	bl	8007af6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075fa:	f000 fddd 	bl	80081b8 <xTaskResumeAll>
 80075fe:	e77a      	b.n	80074f6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007602:	f000 fa78 	bl	8007af6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007606:	f000 fdd7 	bl	80081b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800760a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800760c:	f000 fac5 	bl	8007b9a <prvIsQueueEmpty>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	f43f af6f 	beq.w	80074f6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007618:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800761a:	4618      	mov	r0, r3
 800761c:	3730      	adds	r7, #48	; 0x30
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	e000ed04 	.word	0xe000ed04

08007628 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08e      	sub	sp, #56	; 0x38
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007632:	2300      	movs	r3, #0
 8007634:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10c      	bne.n	800765e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	b672      	cpsid	i
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	b662      	cpsie	i
 8007658:	623b      	str	r3, [r7, #32]
}
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800765e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00c      	beq.n	8007680 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	b672      	cpsid	i
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	b662      	cpsie	i
 800767a:	61fb      	str	r3, [r7, #28]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007680:	f001 f980 	bl	8008984 <xTaskGetSchedulerState>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d102      	bne.n	8007690 <xQueueSemaphoreTake+0x68>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <xQueueSemaphoreTake+0x6c>
 8007690:	2301      	movs	r3, #1
 8007692:	e000      	b.n	8007696 <xQueueSemaphoreTake+0x6e>
 8007694:	2300      	movs	r3, #0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10c      	bne.n	80076b4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	b672      	cpsid	i
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	b662      	cpsie	i
 80076ae:	61bb      	str	r3, [r7, #24]
}
 80076b0:	bf00      	nop
 80076b2:	e7fe      	b.n	80076b2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076b4:	f001 ffb2 	bl	800961c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80076b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d024      	beq.n	800770e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	1e5a      	subs	r2, r3, #1
 80076c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d104      	bne.n	80076de <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80076d4:	f001 fad4 	bl	8008c80 <pvTaskIncrementMutexHeldCount>
 80076d8:	4602      	mov	r2, r0
 80076da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00f      	beq.n	8007706 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	3310      	adds	r3, #16
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 ff84 	bl	80085f8 <xTaskRemoveFromEventList>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d007      	beq.n	8007706 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076f6:	4b55      	ldr	r3, [pc, #340]	; (800784c <xQueueSemaphoreTake+0x224>)
 80076f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007706:	f001 ffbd 	bl	8009684 <vPortExitCritical>
				return pdPASS;
 800770a:	2301      	movs	r3, #1
 800770c:	e099      	b.n	8007842 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d113      	bne.n	800773c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00c      	beq.n	8007734 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	b672      	cpsid	i
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	b662      	cpsie	i
 800772e:	617b      	str	r3, [r7, #20]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007734:	f001 ffa6 	bl	8009684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007738:	2300      	movs	r3, #0
 800773a:	e082      	b.n	8007842 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800773c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773e:	2b00      	cmp	r3, #0
 8007740:	d106      	bne.n	8007750 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007742:	f107 030c 	add.w	r3, r7, #12
 8007746:	4618      	mov	r0, r3
 8007748:	f000 ffbc 	bl	80086c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800774c:	2301      	movs	r3, #1
 800774e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007750:	f001 ff98 	bl	8009684 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007754:	f000 fd22 	bl	800819c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007758:	f001 ff60 	bl	800961c <vPortEnterCritical>
 800775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007762:	b25b      	sxtb	r3, r3
 8007764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007768:	d103      	bne.n	8007772 <xQueueSemaphoreTake+0x14a>
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007778:	b25b      	sxtb	r3, r3
 800777a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777e:	d103      	bne.n	8007788 <xQueueSemaphoreTake+0x160>
 8007780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007788:	f001 ff7c 	bl	8009684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800778c:	463a      	mov	r2, r7
 800778e:	f107 030c 	add.w	r3, r7, #12
 8007792:	4611      	mov	r1, r2
 8007794:	4618      	mov	r0, r3
 8007796:	f000 ffab 	bl	80086f0 <xTaskCheckForTimeOut>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d132      	bne.n	8007806 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077a2:	f000 f9fa 	bl	8007b9a <prvIsQueueEmpty>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d026      	beq.n	80077fa <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d109      	bne.n	80077c8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80077b4:	f001 ff32 	bl	800961c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	4618      	mov	r0, r3
 80077be:	f001 f8ff 	bl	80089c0 <xTaskPriorityInherit>
 80077c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80077c4:	f001 ff5e 	bl	8009684 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	3324      	adds	r3, #36	; 0x24
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	4611      	mov	r1, r2
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 febd 	bl	8008550 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077d8:	f000 f98d 	bl	8007af6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077dc:	f000 fcec 	bl	80081b8 <xTaskResumeAll>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f47f af66 	bne.w	80076b4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80077e8:	4b18      	ldr	r3, [pc, #96]	; (800784c <xQueueSemaphoreTake+0x224>)
 80077ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	e75c      	b.n	80076b4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80077fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077fc:	f000 f97b 	bl	8007af6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007800:	f000 fcda 	bl	80081b8 <xTaskResumeAll>
 8007804:	e756      	b.n	80076b4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007808:	f000 f975 	bl	8007af6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800780c:	f000 fcd4 	bl	80081b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007812:	f000 f9c2 	bl	8007b9a <prvIsQueueEmpty>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	f43f af4b 	beq.w	80076b4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00d      	beq.n	8007840 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007824:	f001 fefa 	bl	800961c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007828:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800782a:	f000 f8bc 	bl	80079a6 <prvGetDisinheritPriorityAfterTimeout>
 800782e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007836:	4618      	mov	r0, r3
 8007838:	f001 f99c 	bl	8008b74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800783c:	f001 ff22 	bl	8009684 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007840:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007842:	4618      	mov	r0, r3
 8007844:	3738      	adds	r7, #56	; 0x38
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	e000ed04 	.word	0xe000ed04

08007850 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08e      	sub	sp, #56	; 0x38
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10c      	bne.n	8007880 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	b672      	cpsid	i
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	b662      	cpsie	i
 800787a:	623b      	str	r3, [r7, #32]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d103      	bne.n	800788e <xQueueReceiveFromISR+0x3e>
 8007886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <xQueueReceiveFromISR+0x42>
 800788e:	2301      	movs	r3, #1
 8007890:	e000      	b.n	8007894 <xQueueReceiveFromISR+0x44>
 8007892:	2300      	movs	r3, #0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10c      	bne.n	80078b2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	b672      	cpsid	i
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	b662      	cpsie	i
 80078ac:	61fb      	str	r3, [r7, #28]
}
 80078ae:	bf00      	nop
 80078b0:	e7fe      	b.n	80078b0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078b2:	f001 ff9b 	bl	80097ec <vPortValidateInterruptPriority>
	__asm volatile
 80078b6:	f3ef 8211 	mrs	r2, BASEPRI
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	b672      	cpsid	i
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	b662      	cpsie	i
 80078ce:	61ba      	str	r2, [r7, #24]
 80078d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80078d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d02f      	beq.n	8007942 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078ec:	68b9      	ldr	r1, [r7, #8]
 80078ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078f0:	f000 f8db 	bl	8007aaa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	1e5a      	subs	r2, r3, #1
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80078fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007904:	d112      	bne.n	800792c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d016      	beq.n	800793c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	3310      	adds	r3, #16
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fe70 	bl	80085f8 <xTaskRemoveFromEventList>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00e      	beq.n	800793c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00b      	beq.n	800793c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	601a      	str	r2, [r3, #0]
 800792a:	e007      	b.n	800793c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800792c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007930:	3301      	adds	r3, #1
 8007932:	b2db      	uxtb	r3, r3
 8007934:	b25a      	sxtb	r2, r3
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800793c:	2301      	movs	r3, #1
 800793e:	637b      	str	r3, [r7, #52]	; 0x34
 8007940:	e001      	b.n	8007946 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007942:	2300      	movs	r3, #0
 8007944:	637b      	str	r3, [r7, #52]	; 0x34
 8007946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007948:	613b      	str	r3, [r7, #16]
	__asm volatile
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f383 8811 	msr	BASEPRI, r3
}
 8007950:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007954:	4618      	mov	r0, r3
 8007956:	3738      	adds	r7, #56	; 0x38
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10c      	bne.n	8007988 <vQueueDelete+0x2c>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	b672      	cpsid	i
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	b662      	cpsie	i
 8007982:	60bb      	str	r3, [r7, #8]
}
 8007984:	bf00      	nop
 8007986:	e7fe      	b.n	8007986 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 f95f 	bl	8007c4c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007994:	2b00      	cmp	r3, #0
 8007996:	d102      	bne.n	800799e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f002 f835 	bl	8009a08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800799e:	bf00      	nop
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80079a6:	b480      	push	{r7}
 80079a8:	b085      	sub	sp, #20
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d006      	beq.n	80079c4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	e001      	b.n	80079c8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80079c8:	68fb      	ldr	r3, [r7, #12]
	}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b086      	sub	sp, #24
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079e2:	2300      	movs	r3, #0
 80079e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10d      	bne.n	8007a10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d14d      	bne.n	8007a98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f001 f845 	bl	8008a90 <xTaskPriorityDisinherit>
 8007a06:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	609a      	str	r2, [r3, #8]
 8007a0e:	e043      	b.n	8007a98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d119      	bne.n	8007a4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6858      	ldr	r0, [r3, #4]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	461a      	mov	r2, r3
 8007a20:	68b9      	ldr	r1, [r7, #8]
 8007a22:	f002 f935 	bl	8009c90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2e:	441a      	add	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d32b      	bcc.n	8007a98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	605a      	str	r2, [r3, #4]
 8007a48:	e026      	b.n	8007a98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	68d8      	ldr	r0, [r3, #12]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	461a      	mov	r2, r3
 8007a54:	68b9      	ldr	r1, [r7, #8]
 8007a56:	f002 f91b 	bl	8009c90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	425b      	negs	r3, r3
 8007a64:	441a      	add	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d207      	bcs.n	8007a86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	425b      	negs	r3, r3
 8007a80:	441a      	add	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d105      	bne.n	8007a98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007aa0:	697b      	ldr	r3, [r7, #20]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d018      	beq.n	8007aee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac4:	441a      	add	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d303      	bcc.n	8007ade <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68d9      	ldr	r1, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6838      	ldr	r0, [r7, #0]
 8007aea:	f002 f8d1 	bl	8009c90 <memcpy>
	}
}
 8007aee:	bf00      	nop
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b084      	sub	sp, #16
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007afe:	f001 fd8d 	bl	800961c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b0a:	e011      	b.n	8007b30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d012      	beq.n	8007b3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3324      	adds	r3, #36	; 0x24
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 fd6d 	bl	80085f8 <xTaskRemoveFromEventList>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b24:	f000 fe4a 	bl	80087bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	dce9      	bgt.n	8007b0c <prvUnlockQueue+0x16>
 8007b38:	e000      	b.n	8007b3c <prvUnlockQueue+0x46>
					break;
 8007b3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	22ff      	movs	r2, #255	; 0xff
 8007b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b44:	f001 fd9e 	bl	8009684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b48:	f001 fd68 	bl	800961c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b54:	e011      	b.n	8007b7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d012      	beq.n	8007b84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	3310      	adds	r3, #16
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fd48 	bl	80085f8 <xTaskRemoveFromEventList>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b6e:	f000 fe25 	bl	80087bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	dce9      	bgt.n	8007b56 <prvUnlockQueue+0x60>
 8007b82:	e000      	b.n	8007b86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	22ff      	movs	r2, #255	; 0xff
 8007b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b8e:	f001 fd79 	bl	8009684 <vPortExitCritical>
}
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ba2:	f001 fd3b 	bl	800961c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d102      	bne.n	8007bb4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	e001      	b.n	8007bb8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bb8:	f001 fd64 	bl	8009684 <vPortExitCritical>

	return xReturn;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bce:	f001 fd25 	bl	800961c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d102      	bne.n	8007be4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007bde:	2301      	movs	r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	e001      	b.n	8007be8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007be8:	f001 fd4c 	bl	8009684 <vPortExitCritical>

	return xReturn;
 8007bec:	68fb      	ldr	r3, [r7, #12]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	e014      	b.n	8007c32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c08:	4a0f      	ldr	r2, [pc, #60]	; (8007c48 <vQueueAddToRegistry+0x50>)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10b      	bne.n	8007c2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c14:	490c      	ldr	r1, [pc, #48]	; (8007c48 <vQueueAddToRegistry+0x50>)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c1e:	4a0a      	ldr	r2, [pc, #40]	; (8007c48 <vQueueAddToRegistry+0x50>)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	4413      	add	r3, r2
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c2a:	e006      	b.n	8007c3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b07      	cmp	r3, #7
 8007c36:	d9e7      	bls.n	8007c08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c38:	bf00      	nop
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	20000ab8 	.word	0x20000ab8

08007c4c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c54:	2300      	movs	r3, #0
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	e016      	b.n	8007c88 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007c5a:	4a10      	ldr	r2, [pc, #64]	; (8007c9c <vQueueUnregisterQueue+0x50>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	4413      	add	r3, r2
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d10b      	bne.n	8007c82 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007c6a:	4a0c      	ldr	r2, [pc, #48]	; (8007c9c <vQueueUnregisterQueue+0x50>)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2100      	movs	r1, #0
 8007c70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007c74:	4a09      	ldr	r2, [pc, #36]	; (8007c9c <vQueueUnregisterQueue+0x50>)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	605a      	str	r2, [r3, #4]
				break;
 8007c80:	e006      	b.n	8007c90 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3301      	adds	r3, #1
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b07      	cmp	r3, #7
 8007c8c:	d9e5      	bls.n	8007c5a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007c8e:	bf00      	nop
 8007c90:	bf00      	nop
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	20000ab8 	.word	0x20000ab8

08007ca0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007cb0:	f001 fcb4 	bl	800961c <vPortEnterCritical>
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cba:	b25b      	sxtb	r3, r3
 8007cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc0:	d103      	bne.n	8007cca <vQueueWaitForMessageRestricted+0x2a>
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cd0:	b25b      	sxtb	r3, r3
 8007cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd6:	d103      	bne.n	8007ce0 <vQueueWaitForMessageRestricted+0x40>
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ce0:	f001 fcd0 	bl	8009684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d106      	bne.n	8007cfa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	3324      	adds	r3, #36	; 0x24
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	68b9      	ldr	r1, [r7, #8]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fc51 	bl	800859c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007cfa:	6978      	ldr	r0, [r7, #20]
 8007cfc:	f7ff fefb 	bl	8007af6 <prvUnlockQueue>
	}
 8007d00:	bf00      	nop
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08e      	sub	sp, #56	; 0x38
 8007d0c:	af04      	add	r7, sp, #16
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10c      	bne.n	8007d36 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	b672      	cpsid	i
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	b662      	cpsie	i
 8007d30:	623b      	str	r3, [r7, #32]
}
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10c      	bne.n	8007d56 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	b672      	cpsid	i
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	b662      	cpsie	i
 8007d50:	61fb      	str	r3, [r7, #28]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d56:	235c      	movs	r3, #92	; 0x5c
 8007d58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2b5c      	cmp	r3, #92	; 0x5c
 8007d5e:	d00c      	beq.n	8007d7a <xTaskCreateStatic+0x72>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	b672      	cpsid	i
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	b662      	cpsie	i
 8007d74:	61bb      	str	r3, [r7, #24]
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01e      	beq.n	8007dc0 <xTaskCreateStatic+0xb8>
 8007d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01b      	beq.n	8007dc0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	2202      	movs	r2, #2
 8007d96:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9303      	str	r3, [sp, #12]
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	9302      	str	r3, [sp, #8]
 8007da2:	f107 0314 	add.w	r3, r7, #20
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	68b9      	ldr	r1, [r7, #8]
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f000 f850 	bl	8007e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dba:	f000 f8df 	bl	8007f7c <prvAddNewTaskToReadyList>
 8007dbe:	e001      	b.n	8007dc4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007dc4:	697b      	ldr	r3, [r7, #20]
	}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3728      	adds	r7, #40	; 0x28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b08c      	sub	sp, #48	; 0x30
 8007dd2:	af04      	add	r7, sp, #16
 8007dd4:	60f8      	str	r0, [r7, #12]
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	603b      	str	r3, [r7, #0]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007dde:	88fb      	ldrh	r3, [r7, #6]
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 fd46 	bl	8009874 <pvPortMalloc>
 8007de8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00e      	beq.n	8007e0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007df0:	205c      	movs	r0, #92	; 0x5c
 8007df2:	f001 fd3f 	bl	8009874 <pvPortMalloc>
 8007df6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	631a      	str	r2, [r3, #48]	; 0x30
 8007e04:	e005      	b.n	8007e12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e06:	6978      	ldr	r0, [r7, #20]
 8007e08:	f001 fdfe 	bl	8009a08 <vPortFree>
 8007e0c:	e001      	b.n	8007e12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d017      	beq.n	8007e48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e20:	88fa      	ldrh	r2, [r7, #6]
 8007e22:	2300      	movs	r3, #0
 8007e24:	9303      	str	r3, [sp, #12]
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	9302      	str	r3, [sp, #8]
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	9301      	str	r3, [sp, #4]
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68b9      	ldr	r1, [r7, #8]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f80e 	bl	8007e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e3c:	69f8      	ldr	r0, [r7, #28]
 8007e3e:	f000 f89d 	bl	8007f7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e42:	2301      	movs	r3, #1
 8007e44:	61bb      	str	r3, [r7, #24]
 8007e46:	e002      	b.n	8007e4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e48:	f04f 33ff 	mov.w	r3, #4294967295
 8007e4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
	}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3720      	adds	r7, #32
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	461a      	mov	r2, r3
 8007e70:	21a5      	movs	r1, #165	; 0xa5
 8007e72:	f001 ff1b 	bl	8009cac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007e80:	440b      	add	r3, r1
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	f023 0307 	bic.w	r3, r3, #7
 8007e8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00c      	beq.n	8007eb4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	b672      	cpsid	i
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	b662      	cpsie	i
 8007eae:	617b      	str	r3, [r7, #20]
}
 8007eb0:	bf00      	nop
 8007eb2:	e7fe      	b.n	8007eb2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d01f      	beq.n	8007efa <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61fb      	str	r3, [r7, #28]
 8007ebe:	e012      	b.n	8007ee6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	7819      	ldrb	r1, [r3, #0]
 8007ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	4413      	add	r3, r2
 8007ece:	3334      	adds	r3, #52	; 0x34
 8007ed0:	460a      	mov	r2, r1
 8007ed2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	4413      	add	r3, r2
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d006      	beq.n	8007eee <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	61fb      	str	r3, [r7, #28]
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	2b0f      	cmp	r3, #15
 8007eea:	d9e9      	bls.n	8007ec0 <prvInitialiseNewTask+0x68>
 8007eec:	e000      	b.n	8007ef0 <prvInitialiseNewTask+0x98>
			{
				break;
 8007eee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ef8:	e003      	b.n	8007f02 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f04:	2b37      	cmp	r3, #55	; 0x37
 8007f06:	d901      	bls.n	8007f0c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f08:	2337      	movs	r3, #55	; 0x37
 8007f0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f16:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	3304      	adds	r3, #4
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fe fe06 	bl	8006b34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2a:	3318      	adds	r3, #24
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fe fe01 	bl	8006b34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	68f9      	ldr	r1, [r7, #12]
 8007f5a:	69b8      	ldr	r0, [r7, #24]
 8007f5c:	f001 fa54 	bl	8009408 <pxPortInitialiseStack>
 8007f60:	4602      	mov	r2, r0
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f72:	bf00      	nop
 8007f74:	3720      	adds	r7, #32
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f84:	f001 fb4a 	bl	800961c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f88:	4b2d      	ldr	r3, [pc, #180]	; (8008040 <prvAddNewTaskToReadyList+0xc4>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	4a2c      	ldr	r2, [pc, #176]	; (8008040 <prvAddNewTaskToReadyList+0xc4>)
 8007f90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f92:	4b2c      	ldr	r3, [pc, #176]	; (8008044 <prvAddNewTaskToReadyList+0xc8>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d109      	bne.n	8007fae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f9a:	4a2a      	ldr	r2, [pc, #168]	; (8008044 <prvAddNewTaskToReadyList+0xc8>)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fa0:	4b27      	ldr	r3, [pc, #156]	; (8008040 <prvAddNewTaskToReadyList+0xc4>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d110      	bne.n	8007fca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007fa8:	f000 fc2c 	bl	8008804 <prvInitialiseTaskLists>
 8007fac:	e00d      	b.n	8007fca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007fae:	4b26      	ldr	r3, [pc, #152]	; (8008048 <prvAddNewTaskToReadyList+0xcc>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d109      	bne.n	8007fca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007fb6:	4b23      	ldr	r3, [pc, #140]	; (8008044 <prvAddNewTaskToReadyList+0xc8>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d802      	bhi.n	8007fca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007fc4:	4a1f      	ldr	r2, [pc, #124]	; (8008044 <prvAddNewTaskToReadyList+0xc8>)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007fca:	4b20      	ldr	r3, [pc, #128]	; (800804c <prvAddNewTaskToReadyList+0xd0>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	4a1e      	ldr	r2, [pc, #120]	; (800804c <prvAddNewTaskToReadyList+0xd0>)
 8007fd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007fd4:	4b1d      	ldr	r3, [pc, #116]	; (800804c <prvAddNewTaskToReadyList+0xd0>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe0:	4b1b      	ldr	r3, [pc, #108]	; (8008050 <prvAddNewTaskToReadyList+0xd4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d903      	bls.n	8007ff0 <prvAddNewTaskToReadyList+0x74>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	4a18      	ldr	r2, [pc, #96]	; (8008050 <prvAddNewTaskToReadyList+0xd4>)
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4a15      	ldr	r2, [pc, #84]	; (8008054 <prvAddNewTaskToReadyList+0xd8>)
 8007ffe:	441a      	add	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3304      	adds	r3, #4
 8008004:	4619      	mov	r1, r3
 8008006:	4610      	mov	r0, r2
 8008008:	f7fe fda1 	bl	8006b4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800800c:	f001 fb3a 	bl	8009684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008010:	4b0d      	ldr	r3, [pc, #52]	; (8008048 <prvAddNewTaskToReadyList+0xcc>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00e      	beq.n	8008036 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008018:	4b0a      	ldr	r3, [pc, #40]	; (8008044 <prvAddNewTaskToReadyList+0xc8>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	429a      	cmp	r2, r3
 8008024:	d207      	bcs.n	8008036 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008026:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <prvAddNewTaskToReadyList+0xdc>)
 8008028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008036:	bf00      	nop
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20000fcc 	.word	0x20000fcc
 8008044:	20000af8 	.word	0x20000af8
 8008048:	20000fd8 	.word	0x20000fd8
 800804c:	20000fe8 	.word	0x20000fe8
 8008050:	20000fd4 	.word	0x20000fd4
 8008054:	20000afc 	.word	0x20000afc
 8008058:	e000ed04 	.word	0xe000ed04

0800805c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d019      	beq.n	80080a2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800806e:	4b14      	ldr	r3, [pc, #80]	; (80080c0 <vTaskDelay+0x64>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00c      	beq.n	8008090 <vTaskDelay+0x34>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	b672      	cpsid	i
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	b662      	cpsie	i
 800808a:	60bb      	str	r3, [r7, #8]
}
 800808c:	bf00      	nop
 800808e:	e7fe      	b.n	800808e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008090:	f000 f884 	bl	800819c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008094:	2100      	movs	r1, #0
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fe06 	bl	8008ca8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800809c:	f000 f88c 	bl	80081b8 <xTaskResumeAll>
 80080a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d107      	bne.n	80080b8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80080a8:	4b06      	ldr	r3, [pc, #24]	; (80080c4 <vTaskDelay+0x68>)
 80080aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ae:	601a      	str	r2, [r3, #0]
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080b8:	bf00      	nop
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	20000ff4 	.word	0x20000ff4
 80080c4:	e000ed04 	.word	0xe000ed04

080080c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08a      	sub	sp, #40	; 0x28
 80080cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80080d6:	463a      	mov	r2, r7
 80080d8:	1d39      	adds	r1, r7, #4
 80080da:	f107 0308 	add.w	r3, r7, #8
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe fcd4 	bl	8006a8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	9202      	str	r2, [sp, #8]
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	2300      	movs	r3, #0
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	2300      	movs	r3, #0
 80080f4:	460a      	mov	r2, r1
 80080f6:	4923      	ldr	r1, [pc, #140]	; (8008184 <vTaskStartScheduler+0xbc>)
 80080f8:	4823      	ldr	r0, [pc, #140]	; (8008188 <vTaskStartScheduler+0xc0>)
 80080fa:	f7ff fe05 	bl	8007d08 <xTaskCreateStatic>
 80080fe:	4603      	mov	r3, r0
 8008100:	4a22      	ldr	r2, [pc, #136]	; (800818c <vTaskStartScheduler+0xc4>)
 8008102:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008104:	4b21      	ldr	r3, [pc, #132]	; (800818c <vTaskStartScheduler+0xc4>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800810c:	2301      	movs	r3, #1
 800810e:	617b      	str	r3, [r7, #20]
 8008110:	e001      	b.n	8008116 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008112:	2300      	movs	r3, #0
 8008114:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d102      	bne.n	8008122 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800811c:	f000 fe18 	bl	8008d50 <xTimerCreateTimerTask>
 8008120:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d118      	bne.n	800815a <vTaskStartScheduler+0x92>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812c:	b672      	cpsid	i
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	b662      	cpsie	i
 800813c:	613b      	str	r3, [r7, #16]
}
 800813e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008140:	4b13      	ldr	r3, [pc, #76]	; (8008190 <vTaskStartScheduler+0xc8>)
 8008142:	f04f 32ff 	mov.w	r2, #4294967295
 8008146:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008148:	4b12      	ldr	r3, [pc, #72]	; (8008194 <vTaskStartScheduler+0xcc>)
 800814a:	2201      	movs	r2, #1
 800814c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800814e:	4b12      	ldr	r3, [pc, #72]	; (8008198 <vTaskStartScheduler+0xd0>)
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008154:	f001 f9e4 	bl	8009520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008158:	e010      	b.n	800817c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008160:	d10c      	bne.n	800817c <vTaskStartScheduler+0xb4>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	b672      	cpsid	i
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	b662      	cpsie	i
 8008176:	60fb      	str	r3, [r7, #12]
}
 8008178:	bf00      	nop
 800817a:	e7fe      	b.n	800817a <vTaskStartScheduler+0xb2>
}
 800817c:	bf00      	nop
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	0800b168 	.word	0x0800b168
 8008188:	080087d5 	.word	0x080087d5
 800818c:	20000ff0 	.word	0x20000ff0
 8008190:	20000fec 	.word	0x20000fec
 8008194:	20000fd8 	.word	0x20000fd8
 8008198:	20000fd0 	.word	0x20000fd0

0800819c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80081a0:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <vTaskSuspendAll+0x18>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3301      	adds	r3, #1
 80081a6:	4a03      	ldr	r2, [pc, #12]	; (80081b4 <vTaskSuspendAll+0x18>)
 80081a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80081aa:	bf00      	nop
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	20000ff4 	.word	0x20000ff4

080081b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80081c6:	4b43      	ldr	r3, [pc, #268]	; (80082d4 <xTaskResumeAll+0x11c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10c      	bne.n	80081e8 <xTaskResumeAll+0x30>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	b672      	cpsid	i
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	b662      	cpsie	i
 80081e2:	603b      	str	r3, [r7, #0]
}
 80081e4:	bf00      	nop
 80081e6:	e7fe      	b.n	80081e6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081e8:	f001 fa18 	bl	800961c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081ec:	4b39      	ldr	r3, [pc, #228]	; (80082d4 <xTaskResumeAll+0x11c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	4a38      	ldr	r2, [pc, #224]	; (80082d4 <xTaskResumeAll+0x11c>)
 80081f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081f6:	4b37      	ldr	r3, [pc, #220]	; (80082d4 <xTaskResumeAll+0x11c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d162      	bne.n	80082c4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081fe:	4b36      	ldr	r3, [pc, #216]	; (80082d8 <xTaskResumeAll+0x120>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d05e      	beq.n	80082c4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008206:	e02f      	b.n	8008268 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008208:	4b34      	ldr	r3, [pc, #208]	; (80082dc <xTaskResumeAll+0x124>)
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3318      	adds	r3, #24
 8008214:	4618      	mov	r0, r3
 8008216:	f7fe fcf7 	bl	8006c08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3304      	adds	r3, #4
 800821e:	4618      	mov	r0, r3
 8008220:	f7fe fcf2 	bl	8006c08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008228:	4b2d      	ldr	r3, [pc, #180]	; (80082e0 <xTaskResumeAll+0x128>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	429a      	cmp	r2, r3
 800822e:	d903      	bls.n	8008238 <xTaskResumeAll+0x80>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	4a2a      	ldr	r2, [pc, #168]	; (80082e0 <xTaskResumeAll+0x128>)
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4a27      	ldr	r2, [pc, #156]	; (80082e4 <xTaskResumeAll+0x12c>)
 8008246:	441a      	add	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3304      	adds	r3, #4
 800824c:	4619      	mov	r1, r3
 800824e:	4610      	mov	r0, r2
 8008250:	f7fe fc7d 	bl	8006b4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008258:	4b23      	ldr	r3, [pc, #140]	; (80082e8 <xTaskResumeAll+0x130>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825e:	429a      	cmp	r2, r3
 8008260:	d302      	bcc.n	8008268 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008262:	4b22      	ldr	r3, [pc, #136]	; (80082ec <xTaskResumeAll+0x134>)
 8008264:	2201      	movs	r2, #1
 8008266:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008268:	4b1c      	ldr	r3, [pc, #112]	; (80082dc <xTaskResumeAll+0x124>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1cb      	bne.n	8008208 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008276:	f000 fb65 	bl	8008944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800827a:	4b1d      	ldr	r3, [pc, #116]	; (80082f0 <xTaskResumeAll+0x138>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d010      	beq.n	80082a8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008286:	f000 f847 	bl	8008318 <xTaskIncrementTick>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008290:	4b16      	ldr	r3, [pc, #88]	; (80082ec <xTaskResumeAll+0x134>)
 8008292:	2201      	movs	r2, #1
 8008294:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3b01      	subs	r3, #1
 800829a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1f1      	bne.n	8008286 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80082a2:	4b13      	ldr	r3, [pc, #76]	; (80082f0 <xTaskResumeAll+0x138>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082a8:	4b10      	ldr	r3, [pc, #64]	; (80082ec <xTaskResumeAll+0x134>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d009      	beq.n	80082c4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082b0:	2301      	movs	r3, #1
 80082b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082b4:	4b0f      	ldr	r3, [pc, #60]	; (80082f4 <xTaskResumeAll+0x13c>)
 80082b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082c4:	f001 f9de 	bl	8009684 <vPortExitCritical>

	return xAlreadyYielded;
 80082c8:	68bb      	ldr	r3, [r7, #8]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20000ff4 	.word	0x20000ff4
 80082d8:	20000fcc 	.word	0x20000fcc
 80082dc:	20000f8c 	.word	0x20000f8c
 80082e0:	20000fd4 	.word	0x20000fd4
 80082e4:	20000afc 	.word	0x20000afc
 80082e8:	20000af8 	.word	0x20000af8
 80082ec:	20000fe0 	.word	0x20000fe0
 80082f0:	20000fdc 	.word	0x20000fdc
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <xTaskGetTickCount+0x1c>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008304:	687b      	ldr	r3, [r7, #4]
}
 8008306:	4618      	mov	r0, r3
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	20000fd0 	.word	0x20000fd0

08008318 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800831e:	2300      	movs	r3, #0
 8008320:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008322:	4b50      	ldr	r3, [pc, #320]	; (8008464 <xTaskIncrementTick+0x14c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	f040 808b 	bne.w	8008442 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800832c:	4b4e      	ldr	r3, [pc, #312]	; (8008468 <xTaskIncrementTick+0x150>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3301      	adds	r3, #1
 8008332:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008334:	4a4c      	ldr	r2, [pc, #304]	; (8008468 <xTaskIncrementTick+0x150>)
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d122      	bne.n	8008386 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008340:	4b4a      	ldr	r3, [pc, #296]	; (800846c <xTaskIncrementTick+0x154>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00c      	beq.n	8008364 <xTaskIncrementTick+0x4c>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	b672      	cpsid	i
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	b662      	cpsie	i
 800835e:	603b      	str	r3, [r7, #0]
}
 8008360:	bf00      	nop
 8008362:	e7fe      	b.n	8008362 <xTaskIncrementTick+0x4a>
 8008364:	4b41      	ldr	r3, [pc, #260]	; (800846c <xTaskIncrementTick+0x154>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60fb      	str	r3, [r7, #12]
 800836a:	4b41      	ldr	r3, [pc, #260]	; (8008470 <xTaskIncrementTick+0x158>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a3f      	ldr	r2, [pc, #252]	; (800846c <xTaskIncrementTick+0x154>)
 8008370:	6013      	str	r3, [r2, #0]
 8008372:	4a3f      	ldr	r2, [pc, #252]	; (8008470 <xTaskIncrementTick+0x158>)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	4b3e      	ldr	r3, [pc, #248]	; (8008474 <xTaskIncrementTick+0x15c>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3301      	adds	r3, #1
 800837e:	4a3d      	ldr	r2, [pc, #244]	; (8008474 <xTaskIncrementTick+0x15c>)
 8008380:	6013      	str	r3, [r2, #0]
 8008382:	f000 fadf 	bl	8008944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008386:	4b3c      	ldr	r3, [pc, #240]	; (8008478 <xTaskIncrementTick+0x160>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	429a      	cmp	r2, r3
 800838e:	d349      	bcc.n	8008424 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008390:	4b36      	ldr	r3, [pc, #216]	; (800846c <xTaskIncrementTick+0x154>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d104      	bne.n	80083a4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800839a:	4b37      	ldr	r3, [pc, #220]	; (8008478 <xTaskIncrementTick+0x160>)
 800839c:	f04f 32ff 	mov.w	r2, #4294967295
 80083a0:	601a      	str	r2, [r3, #0]
					break;
 80083a2:	e03f      	b.n	8008424 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083a4:	4b31      	ldr	r3, [pc, #196]	; (800846c <xTaskIncrementTick+0x154>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d203      	bcs.n	80083c4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083bc:	4a2e      	ldr	r2, [pc, #184]	; (8008478 <xTaskIncrementTick+0x160>)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80083c2:	e02f      	b.n	8008424 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	3304      	adds	r3, #4
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fe fc1d 	bl	8006c08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d004      	beq.n	80083e0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	3318      	adds	r3, #24
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fc14 	bl	8006c08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e4:	4b25      	ldr	r3, [pc, #148]	; (800847c <xTaskIncrementTick+0x164>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d903      	bls.n	80083f4 <xTaskIncrementTick+0xdc>
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	4a22      	ldr	r2, [pc, #136]	; (800847c <xTaskIncrementTick+0x164>)
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4a1f      	ldr	r2, [pc, #124]	; (8008480 <xTaskIncrementTick+0x168>)
 8008402:	441a      	add	r2, r3
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	3304      	adds	r3, #4
 8008408:	4619      	mov	r1, r3
 800840a:	4610      	mov	r0, r2
 800840c:	f7fe fb9f 	bl	8006b4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008414:	4b1b      	ldr	r3, [pc, #108]	; (8008484 <xTaskIncrementTick+0x16c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	429a      	cmp	r2, r3
 800841c:	d3b8      	bcc.n	8008390 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800841e:	2301      	movs	r3, #1
 8008420:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008422:	e7b5      	b.n	8008390 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008424:	4b17      	ldr	r3, [pc, #92]	; (8008484 <xTaskIncrementTick+0x16c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800842a:	4915      	ldr	r1, [pc, #84]	; (8008480 <xTaskIncrementTick+0x168>)
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d907      	bls.n	800844c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800843c:	2301      	movs	r3, #1
 800843e:	617b      	str	r3, [r7, #20]
 8008440:	e004      	b.n	800844c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008442:	4b11      	ldr	r3, [pc, #68]	; (8008488 <xTaskIncrementTick+0x170>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3301      	adds	r3, #1
 8008448:	4a0f      	ldr	r2, [pc, #60]	; (8008488 <xTaskIncrementTick+0x170>)
 800844a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800844c:	4b0f      	ldr	r3, [pc, #60]	; (800848c <xTaskIncrementTick+0x174>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008454:	2301      	movs	r3, #1
 8008456:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008458:	697b      	ldr	r3, [r7, #20]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20000ff4 	.word	0x20000ff4
 8008468:	20000fd0 	.word	0x20000fd0
 800846c:	20000f84 	.word	0x20000f84
 8008470:	20000f88 	.word	0x20000f88
 8008474:	20000fe4 	.word	0x20000fe4
 8008478:	20000fec 	.word	0x20000fec
 800847c:	20000fd4 	.word	0x20000fd4
 8008480:	20000afc 	.word	0x20000afc
 8008484:	20000af8 	.word	0x20000af8
 8008488:	20000fdc 	.word	0x20000fdc
 800848c:	20000fe0 	.word	0x20000fe0

08008490 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008496:	4b29      	ldr	r3, [pc, #164]	; (800853c <vTaskSwitchContext+0xac>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800849e:	4b28      	ldr	r3, [pc, #160]	; (8008540 <vTaskSwitchContext+0xb0>)
 80084a0:	2201      	movs	r2, #1
 80084a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084a4:	e043      	b.n	800852e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80084a6:	4b26      	ldr	r3, [pc, #152]	; (8008540 <vTaskSwitchContext+0xb0>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ac:	4b25      	ldr	r3, [pc, #148]	; (8008544 <vTaskSwitchContext+0xb4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	e012      	b.n	80084da <vTaskSwitchContext+0x4a>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10c      	bne.n	80084d4 <vTaskSwitchContext+0x44>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	b672      	cpsid	i
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	b662      	cpsie	i
 80084ce:	607b      	str	r3, [r7, #4]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <vTaskSwitchContext+0x42>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	60fb      	str	r3, [r7, #12]
 80084da:	491b      	ldr	r1, [pc, #108]	; (8008548 <vTaskSwitchContext+0xb8>)
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	4613      	mov	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	440b      	add	r3, r1
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0e2      	beq.n	80084b4 <vTaskSwitchContext+0x24>
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	4613      	mov	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4a13      	ldr	r2, [pc, #76]	; (8008548 <vTaskSwitchContext+0xb8>)
 80084fa:	4413      	add	r3, r2
 80084fc:	60bb      	str	r3, [r7, #8]
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	605a      	str	r2, [r3, #4]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	3308      	adds	r3, #8
 8008510:	429a      	cmp	r2, r3
 8008512:	d104      	bne.n	800851e <vTaskSwitchContext+0x8e>
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	605a      	str	r2, [r3, #4]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	4a09      	ldr	r2, [pc, #36]	; (800854c <vTaskSwitchContext+0xbc>)
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	4a06      	ldr	r2, [pc, #24]	; (8008544 <vTaskSwitchContext+0xb4>)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6013      	str	r3, [r2, #0]
}
 800852e:	bf00      	nop
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	20000ff4 	.word	0x20000ff4
 8008540:	20000fe0 	.word	0x20000fe0
 8008544:	20000fd4 	.word	0x20000fd4
 8008548:	20000afc 	.word	0x20000afc
 800854c:	20000af8 	.word	0x20000af8

08008550 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10c      	bne.n	800857a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	b672      	cpsid	i
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	b662      	cpsie	i
 8008574:	60fb      	str	r3, [r7, #12]
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800857a:	4b07      	ldr	r3, [pc, #28]	; (8008598 <vTaskPlaceOnEventList+0x48>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3318      	adds	r3, #24
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7fe fb07 	bl	8006b96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008588:	2101      	movs	r1, #1
 800858a:	6838      	ldr	r0, [r7, #0]
 800858c:	f000 fb8c 	bl	8008ca8 <prvAddCurrentTaskToDelayedList>
}
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	20000af8 	.word	0x20000af8

0800859c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10c      	bne.n	80085c8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	b672      	cpsid	i
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	b662      	cpsie	i
 80085c2:	617b      	str	r3, [r7, #20]
}
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085c8:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <vTaskPlaceOnEventListRestricted+0x58>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3318      	adds	r3, #24
 80085ce:	4619      	mov	r1, r3
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7fe fabc 	bl	8006b4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80085dc:	f04f 33ff 	mov.w	r3, #4294967295
 80085e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80085e2:	6879      	ldr	r1, [r7, #4]
 80085e4:	68b8      	ldr	r0, [r7, #8]
 80085e6:	f000 fb5f 	bl	8008ca8 <prvAddCurrentTaskToDelayedList>
	}
 80085ea:	bf00      	nop
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20000af8 	.word	0x20000af8

080085f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10c      	bne.n	8008628 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	b672      	cpsid	i
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	b662      	cpsie	i
 8008622:	60fb      	str	r3, [r7, #12]
}
 8008624:	bf00      	nop
 8008626:	e7fe      	b.n	8008626 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	3318      	adds	r3, #24
 800862c:	4618      	mov	r0, r3
 800862e:	f7fe faeb 	bl	8006c08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008632:	4b1e      	ldr	r3, [pc, #120]	; (80086ac <xTaskRemoveFromEventList+0xb4>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d11d      	bne.n	8008676 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	3304      	adds	r3, #4
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe fae2 	bl	8006c08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008648:	4b19      	ldr	r3, [pc, #100]	; (80086b0 <xTaskRemoveFromEventList+0xb8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d903      	bls.n	8008658 <xTaskRemoveFromEventList+0x60>
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008654:	4a16      	ldr	r2, [pc, #88]	; (80086b0 <xTaskRemoveFromEventList+0xb8>)
 8008656:	6013      	str	r3, [r2, #0]
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865c:	4613      	mov	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4a13      	ldr	r2, [pc, #76]	; (80086b4 <xTaskRemoveFromEventList+0xbc>)
 8008666:	441a      	add	r2, r3
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	3304      	adds	r3, #4
 800866c:	4619      	mov	r1, r3
 800866e:	4610      	mov	r0, r2
 8008670:	f7fe fa6d 	bl	8006b4e <vListInsertEnd>
 8008674:	e005      	b.n	8008682 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	3318      	adds	r3, #24
 800867a:	4619      	mov	r1, r3
 800867c:	480e      	ldr	r0, [pc, #56]	; (80086b8 <xTaskRemoveFromEventList+0xc0>)
 800867e:	f7fe fa66 	bl	8006b4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008686:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <xTaskRemoveFromEventList+0xc4>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868c:	429a      	cmp	r2, r3
 800868e:	d905      	bls.n	800869c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008690:	2301      	movs	r3, #1
 8008692:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008694:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <xTaskRemoveFromEventList+0xc8>)
 8008696:	2201      	movs	r2, #1
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	e001      	b.n	80086a0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800869c:	2300      	movs	r3, #0
 800869e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80086a0:	697b      	ldr	r3, [r7, #20]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20000ff4 	.word	0x20000ff4
 80086b0:	20000fd4 	.word	0x20000fd4
 80086b4:	20000afc 	.word	0x20000afc
 80086b8:	20000f8c 	.word	0x20000f8c
 80086bc:	20000af8 	.word	0x20000af8
 80086c0:	20000fe0 	.word	0x20000fe0

080086c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086cc:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <vTaskInternalSetTimeOutState+0x24>)
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80086d4:	4b05      	ldr	r3, [pc, #20]	; (80086ec <vTaskInternalSetTimeOutState+0x28>)
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	605a      	str	r2, [r3, #4]
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	20000fe4 	.word	0x20000fe4
 80086ec:	20000fd0 	.word	0x20000fd0

080086f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10c      	bne.n	800871a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	b672      	cpsid	i
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	b662      	cpsie	i
 8008714:	613b      	str	r3, [r7, #16]
}
 8008716:	bf00      	nop
 8008718:	e7fe      	b.n	8008718 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10c      	bne.n	800873a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	b672      	cpsid	i
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	b662      	cpsie	i
 8008734:	60fb      	str	r3, [r7, #12]
}
 8008736:	bf00      	nop
 8008738:	e7fe      	b.n	8008738 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800873a:	f000 ff6f 	bl	800961c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800873e:	4b1d      	ldr	r3, [pc, #116]	; (80087b4 <xTaskCheckForTimeOut+0xc4>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008756:	d102      	bne.n	800875e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008758:	2300      	movs	r3, #0
 800875a:	61fb      	str	r3, [r7, #28]
 800875c:	e023      	b.n	80087a6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	4b15      	ldr	r3, [pc, #84]	; (80087b8 <xTaskCheckForTimeOut+0xc8>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d007      	beq.n	800877a <xTaskCheckForTimeOut+0x8a>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	429a      	cmp	r2, r3
 8008772:	d302      	bcc.n	800877a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008774:	2301      	movs	r3, #1
 8008776:	61fb      	str	r3, [r7, #28]
 8008778:	e015      	b.n	80087a6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	429a      	cmp	r2, r3
 8008782:	d20b      	bcs.n	800879c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	1ad2      	subs	r2, r2, r3
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7ff ff97 	bl	80086c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008796:	2300      	movs	r3, #0
 8008798:	61fb      	str	r3, [r7, #28]
 800879a:	e004      	b.n	80087a6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087a2:	2301      	movs	r3, #1
 80087a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087a6:	f000 ff6d 	bl	8009684 <vPortExitCritical>

	return xReturn;
 80087aa:	69fb      	ldr	r3, [r7, #28]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3720      	adds	r7, #32
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	20000fd0 	.word	0x20000fd0
 80087b8:	20000fe4 	.word	0x20000fe4

080087bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087bc:	b480      	push	{r7}
 80087be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087c0:	4b03      	ldr	r3, [pc, #12]	; (80087d0 <vTaskMissedYield+0x14>)
 80087c2:	2201      	movs	r2, #1
 80087c4:	601a      	str	r2, [r3, #0]
}
 80087c6:	bf00      	nop
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	20000fe0 	.word	0x20000fe0

080087d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087dc:	f000 f852 	bl	8008884 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087e0:	4b06      	ldr	r3, [pc, #24]	; (80087fc <prvIdleTask+0x28>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d9f9      	bls.n	80087dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80087e8:	4b05      	ldr	r3, [pc, #20]	; (8008800 <prvIdleTask+0x2c>)
 80087ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087f8:	e7f0      	b.n	80087dc <prvIdleTask+0x8>
 80087fa:	bf00      	nop
 80087fc:	20000afc 	.word	0x20000afc
 8008800:	e000ed04 	.word	0xe000ed04

08008804 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800880a:	2300      	movs	r3, #0
 800880c:	607b      	str	r3, [r7, #4]
 800880e:	e00c      	b.n	800882a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4a12      	ldr	r2, [pc, #72]	; (8008864 <prvInitialiseTaskLists+0x60>)
 800881c:	4413      	add	r3, r2
 800881e:	4618      	mov	r0, r3
 8008820:	f7fe f968 	bl	8006af4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3301      	adds	r3, #1
 8008828:	607b      	str	r3, [r7, #4]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b37      	cmp	r3, #55	; 0x37
 800882e:	d9ef      	bls.n	8008810 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008830:	480d      	ldr	r0, [pc, #52]	; (8008868 <prvInitialiseTaskLists+0x64>)
 8008832:	f7fe f95f 	bl	8006af4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008836:	480d      	ldr	r0, [pc, #52]	; (800886c <prvInitialiseTaskLists+0x68>)
 8008838:	f7fe f95c 	bl	8006af4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800883c:	480c      	ldr	r0, [pc, #48]	; (8008870 <prvInitialiseTaskLists+0x6c>)
 800883e:	f7fe f959 	bl	8006af4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008842:	480c      	ldr	r0, [pc, #48]	; (8008874 <prvInitialiseTaskLists+0x70>)
 8008844:	f7fe f956 	bl	8006af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008848:	480b      	ldr	r0, [pc, #44]	; (8008878 <prvInitialiseTaskLists+0x74>)
 800884a:	f7fe f953 	bl	8006af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800884e:	4b0b      	ldr	r3, [pc, #44]	; (800887c <prvInitialiseTaskLists+0x78>)
 8008850:	4a05      	ldr	r2, [pc, #20]	; (8008868 <prvInitialiseTaskLists+0x64>)
 8008852:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008854:	4b0a      	ldr	r3, [pc, #40]	; (8008880 <prvInitialiseTaskLists+0x7c>)
 8008856:	4a05      	ldr	r2, [pc, #20]	; (800886c <prvInitialiseTaskLists+0x68>)
 8008858:	601a      	str	r2, [r3, #0]
}
 800885a:	bf00      	nop
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20000afc 	.word	0x20000afc
 8008868:	20000f5c 	.word	0x20000f5c
 800886c:	20000f70 	.word	0x20000f70
 8008870:	20000f8c 	.word	0x20000f8c
 8008874:	20000fa0 	.word	0x20000fa0
 8008878:	20000fb8 	.word	0x20000fb8
 800887c:	20000f84 	.word	0x20000f84
 8008880:	20000f88 	.word	0x20000f88

08008884 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800888a:	e019      	b.n	80088c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800888c:	f000 fec6 	bl	800961c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008890:	4b10      	ldr	r3, [pc, #64]	; (80088d4 <prvCheckTasksWaitingTermination+0x50>)
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	3304      	adds	r3, #4
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe f9b3 	bl	8006c08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088a2:	4b0d      	ldr	r3, [pc, #52]	; (80088d8 <prvCheckTasksWaitingTermination+0x54>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	4a0b      	ldr	r2, [pc, #44]	; (80088d8 <prvCheckTasksWaitingTermination+0x54>)
 80088aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088ac:	4b0b      	ldr	r3, [pc, #44]	; (80088dc <prvCheckTasksWaitingTermination+0x58>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	4a0a      	ldr	r2, [pc, #40]	; (80088dc <prvCheckTasksWaitingTermination+0x58>)
 80088b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088b6:	f000 fee5 	bl	8009684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f810 	bl	80088e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088c0:	4b06      	ldr	r3, [pc, #24]	; (80088dc <prvCheckTasksWaitingTermination+0x58>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1e1      	bne.n	800888c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088c8:	bf00      	nop
 80088ca:	bf00      	nop
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20000fa0 	.word	0x20000fa0
 80088d8:	20000fcc 	.word	0x20000fcc
 80088dc:	20000fb4 	.word	0x20000fb4

080088e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d108      	bne.n	8008904 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	4618      	mov	r0, r3
 80088f8:	f001 f886 	bl	8009a08 <vPortFree>
				vPortFree( pxTCB );
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 f883 	bl	8009a08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008902:	e01a      	b.n	800893a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800890a:	2b01      	cmp	r3, #1
 800890c:	d103      	bne.n	8008916 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 f87a 	bl	8009a08 <vPortFree>
	}
 8008914:	e011      	b.n	800893a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800891c:	2b02      	cmp	r3, #2
 800891e:	d00c      	beq.n	800893a <prvDeleteTCB+0x5a>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	b672      	cpsid	i
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	b662      	cpsie	i
 8008934:	60fb      	str	r3, [r7, #12]
}
 8008936:	bf00      	nop
 8008938:	e7fe      	b.n	8008938 <prvDeleteTCB+0x58>
	}
 800893a:	bf00      	nop
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
	...

08008944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800894a:	4b0c      	ldr	r3, [pc, #48]	; (800897c <prvResetNextTaskUnblockTime+0x38>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d104      	bne.n	800895e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008954:	4b0a      	ldr	r3, [pc, #40]	; (8008980 <prvResetNextTaskUnblockTime+0x3c>)
 8008956:	f04f 32ff 	mov.w	r2, #4294967295
 800895a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800895c:	e008      	b.n	8008970 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800895e:	4b07      	ldr	r3, [pc, #28]	; (800897c <prvResetNextTaskUnblockTime+0x38>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	4a04      	ldr	r2, [pc, #16]	; (8008980 <prvResetNextTaskUnblockTime+0x3c>)
 800896e:	6013      	str	r3, [r2, #0]
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	20000f84 	.word	0x20000f84
 8008980:	20000fec 	.word	0x20000fec

08008984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800898a:	4b0b      	ldr	r3, [pc, #44]	; (80089b8 <xTaskGetSchedulerState+0x34>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d102      	bne.n	8008998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008992:	2301      	movs	r3, #1
 8008994:	607b      	str	r3, [r7, #4]
 8008996:	e008      	b.n	80089aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008998:	4b08      	ldr	r3, [pc, #32]	; (80089bc <xTaskGetSchedulerState+0x38>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d102      	bne.n	80089a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089a0:	2302      	movs	r3, #2
 80089a2:	607b      	str	r3, [r7, #4]
 80089a4:	e001      	b.n	80089aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089a6:	2300      	movs	r3, #0
 80089a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089aa:	687b      	ldr	r3, [r7, #4]
	}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	20000fd8 	.word	0x20000fd8
 80089bc:	20000ff4 	.word	0x20000ff4

080089c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80089cc:	2300      	movs	r3, #0
 80089ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d051      	beq.n	8008a7a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089da:	4b2a      	ldr	r3, [pc, #168]	; (8008a84 <xTaskPriorityInherit+0xc4>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d241      	bcs.n	8008a68 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	db06      	blt.n	80089fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ec:	4b25      	ldr	r3, [pc, #148]	; (8008a84 <xTaskPriorityInherit+0xc4>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	6959      	ldr	r1, [r3, #20]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a02:	4613      	mov	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4a1f      	ldr	r2, [pc, #124]	; (8008a88 <xTaskPriorityInherit+0xc8>)
 8008a0c:	4413      	add	r3, r2
 8008a0e:	4299      	cmp	r1, r3
 8008a10:	d122      	bne.n	8008a58 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	3304      	adds	r3, #4
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fe f8f6 	bl	8006c08 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a1c:	4b19      	ldr	r3, [pc, #100]	; (8008a84 <xTaskPriorityInherit+0xc4>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a2a:	4b18      	ldr	r3, [pc, #96]	; (8008a8c <xTaskPriorityInherit+0xcc>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d903      	bls.n	8008a3a <xTaskPriorityInherit+0x7a>
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a36:	4a15      	ldr	r2, [pc, #84]	; (8008a8c <xTaskPriorityInherit+0xcc>)
 8008a38:	6013      	str	r3, [r2, #0]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3e:	4613      	mov	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4413      	add	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4a10      	ldr	r2, [pc, #64]	; (8008a88 <xTaskPriorityInherit+0xc8>)
 8008a48:	441a      	add	r2, r3
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4610      	mov	r0, r2
 8008a52:	f7fe f87c 	bl	8006b4e <vListInsertEnd>
 8008a56:	e004      	b.n	8008a62 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a58:	4b0a      	ldr	r3, [pc, #40]	; (8008a84 <xTaskPriorityInherit+0xc4>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a62:	2301      	movs	r3, #1
 8008a64:	60fb      	str	r3, [r7, #12]
 8008a66:	e008      	b.n	8008a7a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a6c:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <xTaskPriorityInherit+0xc4>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d201      	bcs.n	8008a7a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a76:	2301      	movs	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
	}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	20000af8 	.word	0x20000af8
 8008a88:	20000afc 	.word	0x20000afc
 8008a8c:	20000fd4 	.word	0x20000fd4

08008a90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d05a      	beq.n	8008b5c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008aa6:	4b30      	ldr	r3, [pc, #192]	; (8008b68 <xTaskPriorityDisinherit+0xd8>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d00c      	beq.n	8008aca <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	b672      	cpsid	i
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	b662      	cpsie	i
 8008ac4:	60fb      	str	r3, [r7, #12]
}
 8008ac6:	bf00      	nop
 8008ac8:	e7fe      	b.n	8008ac8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10c      	bne.n	8008aec <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad6:	b672      	cpsid	i
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	b662      	cpsie	i
 8008ae6:	60bb      	str	r3, [r7, #8]
}
 8008ae8:	bf00      	nop
 8008aea:	e7fe      	b.n	8008aea <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008af0:	1e5a      	subs	r2, r3, #1
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d02c      	beq.n	8008b5c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d128      	bne.n	8008b5c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe f87a 	bl	8006c08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2c:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <xTaskPriorityDisinherit+0xdc>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d903      	bls.n	8008b3c <xTaskPriorityDisinherit+0xac>
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	4a0c      	ldr	r2, [pc, #48]	; (8008b6c <xTaskPriorityDisinherit+0xdc>)
 8008b3a:	6013      	str	r3, [r2, #0]
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b40:	4613      	mov	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4a09      	ldr	r2, [pc, #36]	; (8008b70 <xTaskPriorityDisinherit+0xe0>)
 8008b4a:	441a      	add	r2, r3
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4619      	mov	r1, r3
 8008b52:	4610      	mov	r0, r2
 8008b54:	f7fd fffb 	bl	8006b4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b5c:	697b      	ldr	r3, [r7, #20]
	}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20000af8 	.word	0x20000af8
 8008b6c:	20000fd4 	.word	0x20000fd4
 8008b70:	20000afc 	.word	0x20000afc

08008b74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008b82:	2301      	movs	r3, #1
 8008b84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d06e      	beq.n	8008c6a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10c      	bne.n	8008bae <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8008b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b98:	b672      	cpsid	i
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	b662      	cpsie	i
 8008ba8:	60fb      	str	r3, [r7, #12]
}
 8008baa:	bf00      	nop
 8008bac:	e7fe      	b.n	8008bac <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d902      	bls.n	8008bbe <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	61fb      	str	r3, [r7, #28]
 8008bbc:	e002      	b.n	8008bc4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bc2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	69fa      	ldr	r2, [r7, #28]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d04d      	beq.n	8008c6a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d148      	bne.n	8008c6a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008bd8:	4b26      	ldr	r3, [pc, #152]	; (8008c74 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d10c      	bne.n	8008bfc <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	b672      	cpsid	i
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	b662      	cpsie	i
 8008bf6:	60bb      	str	r3, [r7, #8]
}
 8008bf8:	bf00      	nop
 8008bfa:	e7fe      	b.n	8008bfa <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	69fa      	ldr	r2, [r7, #28]
 8008c06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	db04      	blt.n	8008c1a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	6959      	ldr	r1, [r3, #20]
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	4613      	mov	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4a13      	ldr	r2, [pc, #76]	; (8008c78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008c2a:	4413      	add	r3, r2
 8008c2c:	4299      	cmp	r1, r3
 8008c2e:	d11c      	bne.n	8008c6a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	3304      	adds	r3, #4
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fd ffe7 	bl	8006c08 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c3e:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d903      	bls.n	8008c4e <vTaskPriorityDisinheritAfterTimeout+0xda>
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4a:	4a0c      	ldr	r2, [pc, #48]	; (8008c7c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008c4c:	6013      	str	r3, [r2, #0]
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4a07      	ldr	r2, [pc, #28]	; (8008c78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008c5c:	441a      	add	r2, r3
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	3304      	adds	r3, #4
 8008c62:	4619      	mov	r1, r3
 8008c64:	4610      	mov	r0, r2
 8008c66:	f7fd ff72 	bl	8006b4e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c6a:	bf00      	nop
 8008c6c:	3720      	adds	r7, #32
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000af8 	.word	0x20000af8
 8008c78:	20000afc 	.word	0x20000afc
 8008c7c:	20000fd4 	.word	0x20000fd4

08008c80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c84:	4b07      	ldr	r3, [pc, #28]	; (8008ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d004      	beq.n	8008c96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c8c:	4b05      	ldr	r3, [pc, #20]	; (8008ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c92:	3201      	adds	r2, #1
 8008c94:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008c96:	4b03      	ldr	r3, [pc, #12]	; (8008ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c98:	681b      	ldr	r3, [r3, #0]
	}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	20000af8 	.word	0x20000af8

08008ca8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cb2:	4b21      	ldr	r3, [pc, #132]	; (8008d38 <prvAddCurrentTaskToDelayedList+0x90>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb8:	4b20      	ldr	r3, [pc, #128]	; (8008d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fd ffa2 	bl	8006c08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cca:	d10a      	bne.n	8008ce2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d007      	beq.n	8008ce2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cd2:	4b1a      	ldr	r3, [pc, #104]	; (8008d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	4619      	mov	r1, r3
 8008cda:	4819      	ldr	r0, [pc, #100]	; (8008d40 <prvAddCurrentTaskToDelayedList+0x98>)
 8008cdc:	f7fd ff37 	bl	8006b4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ce0:	e026      	b.n	8008d30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008cea:	4b14      	ldr	r3, [pc, #80]	; (8008d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d209      	bcs.n	8008d0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cfa:	4b12      	ldr	r3, [pc, #72]	; (8008d44 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	4b0f      	ldr	r3, [pc, #60]	; (8008d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3304      	adds	r3, #4
 8008d04:	4619      	mov	r1, r3
 8008d06:	4610      	mov	r0, r2
 8008d08:	f7fd ff45 	bl	8006b96 <vListInsert>
}
 8008d0c:	e010      	b.n	8008d30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d0e:	4b0e      	ldr	r3, [pc, #56]	; (8008d48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	4b0a      	ldr	r3, [pc, #40]	; (8008d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f7fd ff3b 	bl	8006b96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d20:	4b0a      	ldr	r3, [pc, #40]	; (8008d4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d202      	bcs.n	8008d30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d2a:	4a08      	ldr	r2, [pc, #32]	; (8008d4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	6013      	str	r3, [r2, #0]
}
 8008d30:	bf00      	nop
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20000fd0 	.word	0x20000fd0
 8008d3c:	20000af8 	.word	0x20000af8
 8008d40:	20000fb8 	.word	0x20000fb8
 8008d44:	20000f88 	.word	0x20000f88
 8008d48:	20000f84 	.word	0x20000f84
 8008d4c:	20000fec 	.word	0x20000fec

08008d50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08a      	sub	sp, #40	; 0x28
 8008d54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d5a:	f000 fb15 	bl	8009388 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d5e:	4b1d      	ldr	r3, [pc, #116]	; (8008dd4 <xTimerCreateTimerTask+0x84>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d021      	beq.n	8008daa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d6e:	1d3a      	adds	r2, r7, #4
 8008d70:	f107 0108 	add.w	r1, r7, #8
 8008d74:	f107 030c 	add.w	r3, r7, #12
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fd fea1 	bl	8006ac0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d7e:	6879      	ldr	r1, [r7, #4]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	9202      	str	r2, [sp, #8]
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	2302      	movs	r3, #2
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	460a      	mov	r2, r1
 8008d90:	4911      	ldr	r1, [pc, #68]	; (8008dd8 <xTimerCreateTimerTask+0x88>)
 8008d92:	4812      	ldr	r0, [pc, #72]	; (8008ddc <xTimerCreateTimerTask+0x8c>)
 8008d94:	f7fe ffb8 	bl	8007d08 <xTaskCreateStatic>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	4a11      	ldr	r2, [pc, #68]	; (8008de0 <xTimerCreateTimerTask+0x90>)
 8008d9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008d9e:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <xTimerCreateTimerTask+0x90>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008da6:	2301      	movs	r3, #1
 8008da8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10c      	bne.n	8008dca <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	b672      	cpsid	i
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	b662      	cpsie	i
 8008dc4:	613b      	str	r3, [r7, #16]
}
 8008dc6:	bf00      	nop
 8008dc8:	e7fe      	b.n	8008dc8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008dca:	697b      	ldr	r3, [r7, #20]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20001028 	.word	0x20001028
 8008dd8:	0800b170 	.word	0x0800b170
 8008ddc:	08008f21 	.word	0x08008f21
 8008de0:	2000102c 	.word	0x2000102c

08008de4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08a      	sub	sp, #40	; 0x28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10c      	bne.n	8008e16 <xTimerGenericCommand+0x32>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e00:	b672      	cpsid	i
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	b662      	cpsie	i
 8008e10:	623b      	str	r3, [r7, #32]
}
 8008e12:	bf00      	nop
 8008e14:	e7fe      	b.n	8008e14 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e16:	4b1a      	ldr	r3, [pc, #104]	; (8008e80 <xTimerGenericCommand+0x9c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d02a      	beq.n	8008e74 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	2b05      	cmp	r3, #5
 8008e2e:	dc18      	bgt.n	8008e62 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e30:	f7ff fda8 	bl	8008984 <xTaskGetSchedulerState>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d109      	bne.n	8008e4e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e3a:	4b11      	ldr	r3, [pc, #68]	; (8008e80 <xTimerGenericCommand+0x9c>)
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	f107 0110 	add.w	r1, r7, #16
 8008e42:	2300      	movs	r3, #0
 8008e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e46:	f7fe f8cd 	bl	8006fe4 <xQueueGenericSend>
 8008e4a:	6278      	str	r0, [r7, #36]	; 0x24
 8008e4c:	e012      	b.n	8008e74 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e4e:	4b0c      	ldr	r3, [pc, #48]	; (8008e80 <xTimerGenericCommand+0x9c>)
 8008e50:	6818      	ldr	r0, [r3, #0]
 8008e52:	f107 0110 	add.w	r1, r7, #16
 8008e56:	2300      	movs	r3, #0
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f7fe f8c3 	bl	8006fe4 <xQueueGenericSend>
 8008e5e:	6278      	str	r0, [r7, #36]	; 0x24
 8008e60:	e008      	b.n	8008e74 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e62:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <xTimerGenericCommand+0x9c>)
 8008e64:	6818      	ldr	r0, [r3, #0]
 8008e66:	f107 0110 	add.w	r1, r7, #16
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	f7fe f9bf 	bl	80071f0 <xQueueGenericSendFromISR>
 8008e72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3728      	adds	r7, #40	; 0x28
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	20001028 	.word	0x20001028

08008e84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b088      	sub	sp, #32
 8008e88:	af02      	add	r7, sp, #8
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e8e:	4b23      	ldr	r3, [pc, #140]	; (8008f1c <prvProcessExpiredTimer+0x98>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fd feb3 	bl	8006c08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d024      	beq.n	8008efa <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	699a      	ldr	r2, [r3, #24]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	18d1      	adds	r1, r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	6978      	ldr	r0, [r7, #20]
 8008ebe:	f000 f8d3 	bl	8009068 <prvInsertTimerInActiveList>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d021      	beq.n	8008f0c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ec8:	2300      	movs	r3, #0
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	2300      	movs	r3, #0
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	6978      	ldr	r0, [r7, #20]
 8008ed4:	f7ff ff86 	bl	8008de4 <xTimerGenericCommand>
 8008ed8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d115      	bne.n	8008f0c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	b672      	cpsid	i
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	b662      	cpsie	i
 8008ef4:	60fb      	str	r3, [r7, #12]
}
 8008ef6:	bf00      	nop
 8008ef8:	e7fe      	b.n	8008ef8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f00:	f023 0301 	bic.w	r3, r3, #1
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	6a1b      	ldr	r3, [r3, #32]
 8008f10:	6978      	ldr	r0, [r7, #20]
 8008f12:	4798      	blx	r3
}
 8008f14:	bf00      	nop
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20001020 	.word	0x20001020

08008f20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f28:	f107 0308 	add.w	r3, r7, #8
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 f857 	bl	8008fe0 <prvGetNextExpireTime>
 8008f32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	4619      	mov	r1, r3
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 f803 	bl	8008f44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f3e:	f000 f8d5 	bl	80090ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f42:	e7f1      	b.n	8008f28 <prvTimerTask+0x8>

08008f44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f4e:	f7ff f925 	bl	800819c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f52:	f107 0308 	add.w	r3, r7, #8
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 f866 	bl	8009028 <prvSampleTimeNow>
 8008f5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d130      	bne.n	8008fc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10a      	bne.n	8008f80 <prvProcessTimerOrBlockTask+0x3c>
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d806      	bhi.n	8008f80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f72:	f7ff f921 	bl	80081b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f76:	68f9      	ldr	r1, [r7, #12]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7ff ff83 	bl	8008e84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f7e:	e024      	b.n	8008fca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d008      	beq.n	8008f98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f86:	4b13      	ldr	r3, [pc, #76]	; (8008fd4 <prvProcessTimerOrBlockTask+0x90>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <prvProcessTimerOrBlockTask+0x50>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e000      	b.n	8008f96 <prvProcessTimerOrBlockTask+0x52>
 8008f94:	2300      	movs	r3, #0
 8008f96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f98:	4b0f      	ldr	r3, [pc, #60]	; (8008fd8 <prvProcessTimerOrBlockTask+0x94>)
 8008f9a:	6818      	ldr	r0, [r3, #0]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	f7fe fe7b 	bl	8007ca0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008faa:	f7ff f905 	bl	80081b8 <xTaskResumeAll>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10a      	bne.n	8008fca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fb4:	4b09      	ldr	r3, [pc, #36]	; (8008fdc <prvProcessTimerOrBlockTask+0x98>)
 8008fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fba:	601a      	str	r2, [r3, #0]
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	f3bf 8f6f 	isb	sy
}
 8008fc4:	e001      	b.n	8008fca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fc6:	f7ff f8f7 	bl	80081b8 <xTaskResumeAll>
}
 8008fca:	bf00      	nop
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20001024 	.word	0x20001024
 8008fd8:	20001028 	.word	0x20001028
 8008fdc:	e000ed04 	.word	0xe000ed04

08008fe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fe8:	4b0e      	ldr	r3, [pc, #56]	; (8009024 <prvGetNextExpireTime+0x44>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <prvGetNextExpireTime+0x16>
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	e000      	b.n	8008ff8 <prvGetNextExpireTime+0x18>
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d105      	bne.n	8009010 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009004:	4b07      	ldr	r3, [pc, #28]	; (8009024 <prvGetNextExpireTime+0x44>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	60fb      	str	r3, [r7, #12]
 800900e:	e001      	b.n	8009014 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009014:	68fb      	ldr	r3, [r7, #12]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20001020 	.word	0x20001020

08009028 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009030:	f7ff f962 	bl	80082f8 <xTaskGetTickCount>
 8009034:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009036:	4b0b      	ldr	r3, [pc, #44]	; (8009064 <prvSampleTimeNow+0x3c>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	429a      	cmp	r2, r3
 800903e:	d205      	bcs.n	800904c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009040:	f000 f93c 	bl	80092bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	e002      	b.n	8009052 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009052:	4a04      	ldr	r2, [pc, #16]	; (8009064 <prvSampleTimeNow+0x3c>)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009058:	68fb      	ldr	r3, [r7, #12]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	20001030 	.word	0x20001030

08009068 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
 8009074:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	429a      	cmp	r2, r3
 800908c:	d812      	bhi.n	80090b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	1ad2      	subs	r2, r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	429a      	cmp	r2, r3
 800909a:	d302      	bcc.n	80090a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800909c:	2301      	movs	r3, #1
 800909e:	617b      	str	r3, [r7, #20]
 80090a0:	e01b      	b.n	80090da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090a2:	4b10      	ldr	r3, [pc, #64]	; (80090e4 <prvInsertTimerInActiveList+0x7c>)
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	3304      	adds	r3, #4
 80090aa:	4619      	mov	r1, r3
 80090ac:	4610      	mov	r0, r2
 80090ae:	f7fd fd72 	bl	8006b96 <vListInsert>
 80090b2:	e012      	b.n	80090da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d206      	bcs.n	80090ca <prvInsertTimerInActiveList+0x62>
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d302      	bcc.n	80090ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090c4:	2301      	movs	r3, #1
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e007      	b.n	80090da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090ca:	4b07      	ldr	r3, [pc, #28]	; (80090e8 <prvInsertTimerInActiveList+0x80>)
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4619      	mov	r1, r3
 80090d4:	4610      	mov	r0, r2
 80090d6:	f7fd fd5e 	bl	8006b96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090da:	697b      	ldr	r3, [r7, #20]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3718      	adds	r7, #24
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	20001024 	.word	0x20001024
 80090e8:	20001020 	.word	0x20001020

080090ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08e      	sub	sp, #56	; 0x38
 80090f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090f2:	e0d0      	b.n	8009296 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	da1a      	bge.n	8009130 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80090fa:	1d3b      	adds	r3, r7, #4
 80090fc:	3304      	adds	r3, #4
 80090fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10c      	bne.n	8009120 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	b672      	cpsid	i
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	b662      	cpsie	i
 800911a:	61fb      	str	r3, [r7, #28]
}
 800911c:	bf00      	nop
 800911e:	e7fe      	b.n	800911e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009126:	6850      	ldr	r0, [r2, #4]
 8009128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800912a:	6892      	ldr	r2, [r2, #8]
 800912c:	4611      	mov	r1, r2
 800912e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	f2c0 80ae 	blt.w	8009294 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d004      	beq.n	800914e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009146:	3304      	adds	r3, #4
 8009148:	4618      	mov	r0, r3
 800914a:	f7fd fd5d 	bl	8006c08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800914e:	463b      	mov	r3, r7
 8009150:	4618      	mov	r0, r3
 8009152:	f7ff ff69 	bl	8009028 <prvSampleTimeNow>
 8009156:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b09      	cmp	r3, #9
 800915c:	f200 809b 	bhi.w	8009296 <prvProcessReceivedCommands+0x1aa>
 8009160:	a201      	add	r2, pc, #4	; (adr r2, 8009168 <prvProcessReceivedCommands+0x7c>)
 8009162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009166:	bf00      	nop
 8009168:	08009191 	.word	0x08009191
 800916c:	08009191 	.word	0x08009191
 8009170:	08009191 	.word	0x08009191
 8009174:	08009209 	.word	0x08009209
 8009178:	0800921d 	.word	0x0800921d
 800917c:	0800926b 	.word	0x0800926b
 8009180:	08009191 	.word	0x08009191
 8009184:	08009191 	.word	0x08009191
 8009188:	08009209 	.word	0x08009209
 800918c:	0800921d 	.word	0x0800921d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009196:	f043 0301 	orr.w	r3, r3, #1
 800919a:	b2da      	uxtb	r2, r3
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	18d1      	adds	r1, r2, r3
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091b0:	f7ff ff5a 	bl	8009068 <prvInsertTimerInActiveList>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d06d      	beq.n	8009296 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d062      	beq.n	8009296 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	441a      	add	r2, r3
 80091d8:	2300      	movs	r3, #0
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	2300      	movs	r3, #0
 80091de:	2100      	movs	r1, #0
 80091e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e2:	f7ff fdff 	bl	8008de4 <xTimerGenericCommand>
 80091e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80091e8:	6a3b      	ldr	r3, [r7, #32]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d153      	bne.n	8009296 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f2:	b672      	cpsid	i
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	b662      	cpsie	i
 8009202:	61bb      	str	r3, [r7, #24]
}
 8009204:	bf00      	nop
 8009206:	e7fe      	b.n	8009206 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800920e:	f023 0301 	bic.w	r3, r3, #1
 8009212:	b2da      	uxtb	r2, r3
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800921a:	e03c      	b.n	8009296 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009222:	f043 0301 	orr.w	r3, r3, #1
 8009226:	b2da      	uxtb	r2, r3
 8009228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009232:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10c      	bne.n	8009256 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009240:	b672      	cpsid	i
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	b662      	cpsie	i
 8009250:	617b      	str	r3, [r7, #20]
}
 8009252:	bf00      	nop
 8009254:	e7fe      	b.n	8009254 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009258:	699a      	ldr	r2, [r3, #24]
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	18d1      	adds	r1, r2, r3
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009264:	f7ff ff00 	bl	8009068 <prvInsertTimerInActiveList>
					break;
 8009268:	e015      	b.n	8009296 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009270:	f003 0302 	and.w	r3, r3, #2
 8009274:	2b00      	cmp	r3, #0
 8009276:	d103      	bne.n	8009280 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800927a:	f000 fbc5 	bl	8009a08 <vPortFree>
 800927e:	e00a      	b.n	8009296 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009286:	f023 0301 	bic.w	r3, r3, #1
 800928a:	b2da      	uxtb	r2, r3
 800928c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009292:	e000      	b.n	8009296 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009294:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009296:	4b08      	ldr	r3, [pc, #32]	; (80092b8 <prvProcessReceivedCommands+0x1cc>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	1d39      	adds	r1, r7, #4
 800929c:	2200      	movs	r2, #0
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe f8dc 	bl	800745c <xQueueReceive>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f47f af24 	bne.w	80090f4 <prvProcessReceivedCommands+0x8>
	}
}
 80092ac:	bf00      	nop
 80092ae:	bf00      	nop
 80092b0:	3730      	adds	r7, #48	; 0x30
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	20001028 	.word	0x20001028

080092bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b088      	sub	sp, #32
 80092c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092c2:	e04a      	b.n	800935a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092c4:	4b2e      	ldr	r3, [pc, #184]	; (8009380 <prvSwitchTimerLists+0xc4>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ce:	4b2c      	ldr	r3, [pc, #176]	; (8009380 <prvSwitchTimerLists+0xc4>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	3304      	adds	r3, #4
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fd fc93 	bl	8006c08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092f0:	f003 0304 	and.w	r3, r3, #4
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d030      	beq.n	800935a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	4413      	add	r3, r2
 8009300:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	429a      	cmp	r2, r3
 8009308:	d90e      	bls.n	8009328 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009316:	4b1a      	ldr	r3, [pc, #104]	; (8009380 <prvSwitchTimerLists+0xc4>)
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	3304      	adds	r3, #4
 800931e:	4619      	mov	r1, r3
 8009320:	4610      	mov	r0, r2
 8009322:	f7fd fc38 	bl	8006b96 <vListInsert>
 8009326:	e018      	b.n	800935a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009328:	2300      	movs	r3, #0
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	2300      	movs	r3, #0
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	2100      	movs	r1, #0
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f7ff fd56 	bl	8008de4 <xTimerGenericCommand>
 8009338:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10c      	bne.n	800935a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	b672      	cpsid	i
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	b662      	cpsie	i
 8009354:	603b      	str	r3, [r7, #0]
}
 8009356:	bf00      	nop
 8009358:	e7fe      	b.n	8009358 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800935a:	4b09      	ldr	r3, [pc, #36]	; (8009380 <prvSwitchTimerLists+0xc4>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1af      	bne.n	80092c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009364:	4b06      	ldr	r3, [pc, #24]	; (8009380 <prvSwitchTimerLists+0xc4>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800936a:	4b06      	ldr	r3, [pc, #24]	; (8009384 <prvSwitchTimerLists+0xc8>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a04      	ldr	r2, [pc, #16]	; (8009380 <prvSwitchTimerLists+0xc4>)
 8009370:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009372:	4a04      	ldr	r2, [pc, #16]	; (8009384 <prvSwitchTimerLists+0xc8>)
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	6013      	str	r3, [r2, #0]
}
 8009378:	bf00      	nop
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	20001020 	.word	0x20001020
 8009384:	20001024 	.word	0x20001024

08009388 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800938e:	f000 f945 	bl	800961c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009392:	4b15      	ldr	r3, [pc, #84]	; (80093e8 <prvCheckForValidListAndQueue+0x60>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d120      	bne.n	80093dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800939a:	4814      	ldr	r0, [pc, #80]	; (80093ec <prvCheckForValidListAndQueue+0x64>)
 800939c:	f7fd fbaa 	bl	8006af4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80093a0:	4813      	ldr	r0, [pc, #76]	; (80093f0 <prvCheckForValidListAndQueue+0x68>)
 80093a2:	f7fd fba7 	bl	8006af4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80093a6:	4b13      	ldr	r3, [pc, #76]	; (80093f4 <prvCheckForValidListAndQueue+0x6c>)
 80093a8:	4a10      	ldr	r2, [pc, #64]	; (80093ec <prvCheckForValidListAndQueue+0x64>)
 80093aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80093ac:	4b12      	ldr	r3, [pc, #72]	; (80093f8 <prvCheckForValidListAndQueue+0x70>)
 80093ae:	4a10      	ldr	r2, [pc, #64]	; (80093f0 <prvCheckForValidListAndQueue+0x68>)
 80093b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093b2:	2300      	movs	r3, #0
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	4b11      	ldr	r3, [pc, #68]	; (80093fc <prvCheckForValidListAndQueue+0x74>)
 80093b8:	4a11      	ldr	r2, [pc, #68]	; (8009400 <prvCheckForValidListAndQueue+0x78>)
 80093ba:	2110      	movs	r1, #16
 80093bc:	200a      	movs	r0, #10
 80093be:	f7fd fcb7 	bl	8006d30 <xQueueGenericCreateStatic>
 80093c2:	4603      	mov	r3, r0
 80093c4:	4a08      	ldr	r2, [pc, #32]	; (80093e8 <prvCheckForValidListAndQueue+0x60>)
 80093c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093c8:	4b07      	ldr	r3, [pc, #28]	; (80093e8 <prvCheckForValidListAndQueue+0x60>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d005      	beq.n	80093dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093d0:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <prvCheckForValidListAndQueue+0x60>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	490b      	ldr	r1, [pc, #44]	; (8009404 <prvCheckForValidListAndQueue+0x7c>)
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fe fc0e 	bl	8007bf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093dc:	f000 f952 	bl	8009684 <vPortExitCritical>
}
 80093e0:	bf00      	nop
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20001028 	.word	0x20001028
 80093ec:	20000ff8 	.word	0x20000ff8
 80093f0:	2000100c 	.word	0x2000100c
 80093f4:	20001020 	.word	0x20001020
 80093f8:	20001024 	.word	0x20001024
 80093fc:	200010d4 	.word	0x200010d4
 8009400:	20001034 	.word	0x20001034
 8009404:	0800b178 	.word	0x0800b178

08009408 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	3b04      	subs	r3, #4
 8009418:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3b04      	subs	r3, #4
 8009426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	f023 0201 	bic.w	r2, r3, #1
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	3b04      	subs	r3, #4
 8009436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009438:	4a0c      	ldr	r2, [pc, #48]	; (800946c <pxPortInitialiseStack+0x64>)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3b14      	subs	r3, #20
 8009442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3b04      	subs	r3, #4
 800944e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f06f 0202 	mvn.w	r2, #2
 8009456:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3b20      	subs	r3, #32
 800945c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800945e:	68fb      	ldr	r3, [r7, #12]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	08009471 	.word	0x08009471

08009470 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009476:	2300      	movs	r3, #0
 8009478:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800947a:	4b14      	ldr	r3, [pc, #80]	; (80094cc <prvTaskExitError+0x5c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009482:	d00c      	beq.n	800949e <prvTaskExitError+0x2e>
	__asm volatile
 8009484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009488:	b672      	cpsid	i
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	b662      	cpsie	i
 8009498:	60fb      	str	r3, [r7, #12]
}
 800949a:	bf00      	nop
 800949c:	e7fe      	b.n	800949c <prvTaskExitError+0x2c>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	b672      	cpsid	i
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	b662      	cpsie	i
 80094b2:	60bb      	str	r3, [r7, #8]
}
 80094b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094b6:	bf00      	nop
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0fc      	beq.n	80094b8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094be:	bf00      	nop
 80094c0:	bf00      	nop
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	20000024 	.word	0x20000024

080094d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094d0:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <pxCurrentTCBConst2>)
 80094d2:	6819      	ldr	r1, [r3, #0]
 80094d4:	6808      	ldr	r0, [r1, #0]
 80094d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094da:	f380 8809 	msr	PSP, r0
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f04f 0000 	mov.w	r0, #0
 80094e6:	f380 8811 	msr	BASEPRI, r0
 80094ea:	4770      	bx	lr
 80094ec:	f3af 8000 	nop.w

080094f0 <pxCurrentTCBConst2>:
 80094f0:	20000af8 	.word	0x20000af8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop

080094f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80094f8:	4808      	ldr	r0, [pc, #32]	; (800951c <prvPortStartFirstTask+0x24>)
 80094fa:	6800      	ldr	r0, [r0, #0]
 80094fc:	6800      	ldr	r0, [r0, #0]
 80094fe:	f380 8808 	msr	MSP, r0
 8009502:	f04f 0000 	mov.w	r0, #0
 8009506:	f380 8814 	msr	CONTROL, r0
 800950a:	b662      	cpsie	i
 800950c:	b661      	cpsie	f
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	df00      	svc	0
 8009518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800951a:	bf00      	nop
 800951c:	e000ed08 	.word	0xe000ed08

08009520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009526:	4b37      	ldr	r3, [pc, #220]	; (8009604 <xPortStartScheduler+0xe4>)
 8009528:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	b2db      	uxtb	r3, r3
 8009530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	22ff      	movs	r2, #255	; 0xff
 8009536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	b2db      	uxtb	r3, r3
 800953e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009540:	78fb      	ldrb	r3, [r7, #3]
 8009542:	b2db      	uxtb	r3, r3
 8009544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009548:	b2da      	uxtb	r2, r3
 800954a:	4b2f      	ldr	r3, [pc, #188]	; (8009608 <xPortStartScheduler+0xe8>)
 800954c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800954e:	4b2f      	ldr	r3, [pc, #188]	; (800960c <xPortStartScheduler+0xec>)
 8009550:	2207      	movs	r2, #7
 8009552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009554:	e009      	b.n	800956a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009556:	4b2d      	ldr	r3, [pc, #180]	; (800960c <xPortStartScheduler+0xec>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3b01      	subs	r3, #1
 800955c:	4a2b      	ldr	r2, [pc, #172]	; (800960c <xPortStartScheduler+0xec>)
 800955e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009560:	78fb      	ldrb	r3, [r7, #3]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	005b      	lsls	r3, r3, #1
 8009566:	b2db      	uxtb	r3, r3
 8009568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	b2db      	uxtb	r3, r3
 800956e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009572:	2b80      	cmp	r3, #128	; 0x80
 8009574:	d0ef      	beq.n	8009556 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009576:	4b25      	ldr	r3, [pc, #148]	; (800960c <xPortStartScheduler+0xec>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f1c3 0307 	rsb	r3, r3, #7
 800957e:	2b04      	cmp	r3, #4
 8009580:	d00c      	beq.n	800959c <xPortStartScheduler+0x7c>
	__asm volatile
 8009582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009586:	b672      	cpsid	i
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	b662      	cpsie	i
 8009596:	60bb      	str	r3, [r7, #8]
}
 8009598:	bf00      	nop
 800959a:	e7fe      	b.n	800959a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800959c:	4b1b      	ldr	r3, [pc, #108]	; (800960c <xPortStartScheduler+0xec>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	021b      	lsls	r3, r3, #8
 80095a2:	4a1a      	ldr	r2, [pc, #104]	; (800960c <xPortStartScheduler+0xec>)
 80095a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095a6:	4b19      	ldr	r3, [pc, #100]	; (800960c <xPortStartScheduler+0xec>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095ae:	4a17      	ldr	r2, [pc, #92]	; (800960c <xPortStartScheduler+0xec>)
 80095b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095ba:	4b15      	ldr	r3, [pc, #84]	; (8009610 <xPortStartScheduler+0xf0>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a14      	ldr	r2, [pc, #80]	; (8009610 <xPortStartScheduler+0xf0>)
 80095c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095c6:	4b12      	ldr	r3, [pc, #72]	; (8009610 <xPortStartScheduler+0xf0>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a11      	ldr	r2, [pc, #68]	; (8009610 <xPortStartScheduler+0xf0>)
 80095cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80095d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095d2:	f000 f8dd 	bl	8009790 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095d6:	4b0f      	ldr	r3, [pc, #60]	; (8009614 <xPortStartScheduler+0xf4>)
 80095d8:	2200      	movs	r2, #0
 80095da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80095dc:	f000 f8fc 	bl	80097d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80095e0:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <xPortStartScheduler+0xf8>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a0c      	ldr	r2, [pc, #48]	; (8009618 <xPortStartScheduler+0xf8>)
 80095e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80095ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095ec:	f7ff ff84 	bl	80094f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80095f0:	f7fe ff4e 	bl	8008490 <vTaskSwitchContext>
	prvTaskExitError();
 80095f4:	f7ff ff3c 	bl	8009470 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	e000e400 	.word	0xe000e400
 8009608:	20001124 	.word	0x20001124
 800960c:	20001128 	.word	0x20001128
 8009610:	e000ed20 	.word	0xe000ed20
 8009614:	20000024 	.word	0x20000024
 8009618:	e000ef34 	.word	0xe000ef34

0800961c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
	__asm volatile
 8009622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009626:	b672      	cpsid	i
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	b662      	cpsie	i
 8009636:	607b      	str	r3, [r7, #4]
}
 8009638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800963a:	4b10      	ldr	r3, [pc, #64]	; (800967c <vPortEnterCritical+0x60>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3301      	adds	r3, #1
 8009640:	4a0e      	ldr	r2, [pc, #56]	; (800967c <vPortEnterCritical+0x60>)
 8009642:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009644:	4b0d      	ldr	r3, [pc, #52]	; (800967c <vPortEnterCritical+0x60>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d111      	bne.n	8009670 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800964c:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <vPortEnterCritical+0x64>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00c      	beq.n	8009670 <vPortEnterCritical+0x54>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	b672      	cpsid	i
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	b662      	cpsie	i
 800966a:	603b      	str	r3, [r7, #0]
}
 800966c:	bf00      	nop
 800966e:	e7fe      	b.n	800966e <vPortEnterCritical+0x52>
	}
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	20000024 	.word	0x20000024
 8009680:	e000ed04 	.word	0xe000ed04

08009684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800968a:	4b13      	ldr	r3, [pc, #76]	; (80096d8 <vPortExitCritical+0x54>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10c      	bne.n	80096ac <vPortExitCritical+0x28>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009696:	b672      	cpsid	i
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	b662      	cpsie	i
 80096a6:	607b      	str	r3, [r7, #4]
}
 80096a8:	bf00      	nop
 80096aa:	e7fe      	b.n	80096aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80096ac:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <vPortExitCritical+0x54>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	4a09      	ldr	r2, [pc, #36]	; (80096d8 <vPortExitCritical+0x54>)
 80096b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096b6:	4b08      	ldr	r3, [pc, #32]	; (80096d8 <vPortExitCritical+0x54>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d105      	bne.n	80096ca <vPortExitCritical+0x46>
 80096be:	2300      	movs	r3, #0
 80096c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	f383 8811 	msr	BASEPRI, r3
}
 80096c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096ca:	bf00      	nop
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	20000024 	.word	0x20000024
 80096dc:	00000000 	.word	0x00000000

080096e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096e0:	f3ef 8009 	mrs	r0, PSP
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	4b15      	ldr	r3, [pc, #84]	; (8009740 <pxCurrentTCBConst>)
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	f01e 0f10 	tst.w	lr, #16
 80096f0:	bf08      	it	eq
 80096f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80096f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fa:	6010      	str	r0, [r2, #0]
 80096fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009704:	b672      	cpsid	i
 8009706:	f380 8811 	msr	BASEPRI, r0
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	b662      	cpsie	i
 8009714:	f7fe febc 	bl	8008490 <vTaskSwitchContext>
 8009718:	f04f 0000 	mov.w	r0, #0
 800971c:	f380 8811 	msr	BASEPRI, r0
 8009720:	bc09      	pop	{r0, r3}
 8009722:	6819      	ldr	r1, [r3, #0]
 8009724:	6808      	ldr	r0, [r1, #0]
 8009726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972a:	f01e 0f10 	tst.w	lr, #16
 800972e:	bf08      	it	eq
 8009730:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009734:	f380 8809 	msr	PSP, r0
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop

08009740 <pxCurrentTCBConst>:
 8009740:	20000af8 	.word	0x20000af8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop

08009748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	b672      	cpsid	i
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	b662      	cpsie	i
 8009762:	607b      	str	r3, [r7, #4]
}
 8009764:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009766:	f7fe fdd7 	bl	8008318 <xTaskIncrementTick>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d003      	beq.n	8009778 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009770:	4b06      	ldr	r3, [pc, #24]	; (800978c <xPortSysTickHandler+0x44>)
 8009772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	2300      	movs	r3, #0
 800977a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	f383 8811 	msr	BASEPRI, r3
}
 8009782:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009784:	bf00      	nop
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	e000ed04 	.word	0xe000ed04

08009790 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009790:	b480      	push	{r7}
 8009792:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009794:	4b0b      	ldr	r3, [pc, #44]	; (80097c4 <vPortSetupTimerInterrupt+0x34>)
 8009796:	2200      	movs	r2, #0
 8009798:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800979a:	4b0b      	ldr	r3, [pc, #44]	; (80097c8 <vPortSetupTimerInterrupt+0x38>)
 800979c:	2200      	movs	r2, #0
 800979e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097a0:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <vPortSetupTimerInterrupt+0x3c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a0a      	ldr	r2, [pc, #40]	; (80097d0 <vPortSetupTimerInterrupt+0x40>)
 80097a6:	fba2 2303 	umull	r2, r3, r2, r3
 80097aa:	099b      	lsrs	r3, r3, #6
 80097ac:	4a09      	ldr	r2, [pc, #36]	; (80097d4 <vPortSetupTimerInterrupt+0x44>)
 80097ae:	3b01      	subs	r3, #1
 80097b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097b2:	4b04      	ldr	r3, [pc, #16]	; (80097c4 <vPortSetupTimerInterrupt+0x34>)
 80097b4:	2207      	movs	r2, #7
 80097b6:	601a      	str	r2, [r3, #0]
}
 80097b8:	bf00      	nop
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	e000e010 	.word	0xe000e010
 80097c8:	e000e018 	.word	0xe000e018
 80097cc:	20000004 	.word	0x20000004
 80097d0:	10624dd3 	.word	0x10624dd3
 80097d4:	e000e014 	.word	0xe000e014

080097d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80097e8 <vPortEnableVFP+0x10>
 80097dc:	6801      	ldr	r1, [r0, #0]
 80097de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80097e2:	6001      	str	r1, [r0, #0]
 80097e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80097e6:	bf00      	nop
 80097e8:	e000ed88 	.word	0xe000ed88

080097ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097f2:	f3ef 8305 	mrs	r3, IPSR
 80097f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2b0f      	cmp	r3, #15
 80097fc:	d916      	bls.n	800982c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80097fe:	4a19      	ldr	r2, [pc, #100]	; (8009864 <vPortValidateInterruptPriority+0x78>)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4413      	add	r3, r2
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009808:	4b17      	ldr	r3, [pc, #92]	; (8009868 <vPortValidateInterruptPriority+0x7c>)
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	7afa      	ldrb	r2, [r7, #11]
 800980e:	429a      	cmp	r2, r3
 8009810:	d20c      	bcs.n	800982c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	b672      	cpsid	i
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	b662      	cpsie	i
 8009826:	607b      	str	r3, [r7, #4]
}
 8009828:	bf00      	nop
 800982a:	e7fe      	b.n	800982a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800982c:	4b0f      	ldr	r3, [pc, #60]	; (800986c <vPortValidateInterruptPriority+0x80>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009834:	4b0e      	ldr	r3, [pc, #56]	; (8009870 <vPortValidateInterruptPriority+0x84>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	429a      	cmp	r2, r3
 800983a:	d90c      	bls.n	8009856 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009840:	b672      	cpsid	i
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	b662      	cpsie	i
 8009850:	603b      	str	r3, [r7, #0]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <vPortValidateInterruptPriority+0x68>
	}
 8009856:	bf00      	nop
 8009858:	3714      	adds	r7, #20
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	e000e3f0 	.word	0xe000e3f0
 8009868:	20001124 	.word	0x20001124
 800986c:	e000ed0c 	.word	0xe000ed0c
 8009870:	20001128 	.word	0x20001128

08009874 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08a      	sub	sp, #40	; 0x28
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800987c:	2300      	movs	r3, #0
 800987e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009880:	f7fe fc8c 	bl	800819c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009884:	4b5b      	ldr	r3, [pc, #364]	; (80099f4 <pvPortMalloc+0x180>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800988c:	f000 f91a 	bl	8009ac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009890:	4b59      	ldr	r3, [pc, #356]	; (80099f8 <pvPortMalloc+0x184>)
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4013      	ands	r3, r2
 8009898:	2b00      	cmp	r3, #0
 800989a:	f040 8092 	bne.w	80099c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d01f      	beq.n	80098e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80098a4:	2208      	movs	r2, #8
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4413      	add	r3, r2
 80098aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f003 0307 	and.w	r3, r3, #7
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d016      	beq.n	80098e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f023 0307 	bic.w	r3, r3, #7
 80098bc:	3308      	adds	r3, #8
 80098be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f003 0307 	and.w	r3, r3, #7
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00c      	beq.n	80098e4 <pvPortMalloc+0x70>
	__asm volatile
 80098ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ce:	b672      	cpsid	i
 80098d0:	f383 8811 	msr	BASEPRI, r3
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	b662      	cpsie	i
 80098de:	617b      	str	r3, [r7, #20]
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d06b      	beq.n	80099c2 <pvPortMalloc+0x14e>
 80098ea:	4b44      	ldr	r3, [pc, #272]	; (80099fc <pvPortMalloc+0x188>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d866      	bhi.n	80099c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80098f4:	4b42      	ldr	r3, [pc, #264]	; (8009a00 <pvPortMalloc+0x18c>)
 80098f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80098f8:	4b41      	ldr	r3, [pc, #260]	; (8009a00 <pvPortMalloc+0x18c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098fe:	e004      	b.n	800990a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	429a      	cmp	r2, r3
 8009912:	d903      	bls.n	800991c <pvPortMalloc+0xa8>
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1f1      	bne.n	8009900 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800991c:	4b35      	ldr	r3, [pc, #212]	; (80099f4 <pvPortMalloc+0x180>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009922:	429a      	cmp	r2, r3
 8009924:	d04d      	beq.n	80099c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2208      	movs	r2, #8
 800992c:	4413      	add	r3, r2
 800992e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	6a3b      	ldr	r3, [r7, #32]
 8009936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	1ad2      	subs	r2, r2, r3
 8009940:	2308      	movs	r3, #8
 8009942:	005b      	lsls	r3, r3, #1
 8009944:	429a      	cmp	r2, r3
 8009946:	d921      	bls.n	800998c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4413      	add	r3, r2
 800994e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	f003 0307 	and.w	r3, r3, #7
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00c      	beq.n	8009974 <pvPortMalloc+0x100>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	b672      	cpsid	i
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	b662      	cpsie	i
 800996e:	613b      	str	r3, [r7, #16]
}
 8009970:	bf00      	nop
 8009972:	e7fe      	b.n	8009972 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	1ad2      	subs	r2, r2, r3
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009986:	69b8      	ldr	r0, [r7, #24]
 8009988:	f000 f8fe 	bl	8009b88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800998c:	4b1b      	ldr	r3, [pc, #108]	; (80099fc <pvPortMalloc+0x188>)
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	1ad3      	subs	r3, r2, r3
 8009996:	4a19      	ldr	r2, [pc, #100]	; (80099fc <pvPortMalloc+0x188>)
 8009998:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800999a:	4b18      	ldr	r3, [pc, #96]	; (80099fc <pvPortMalloc+0x188>)
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	4b19      	ldr	r3, [pc, #100]	; (8009a04 <pvPortMalloc+0x190>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d203      	bcs.n	80099ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099a6:	4b15      	ldr	r3, [pc, #84]	; (80099fc <pvPortMalloc+0x188>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a16      	ldr	r2, [pc, #88]	; (8009a04 <pvPortMalloc+0x190>)
 80099ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	4b11      	ldr	r3, [pc, #68]	; (80099f8 <pvPortMalloc+0x184>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	431a      	orrs	r2, r3
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	2200      	movs	r2, #0
 80099c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099c2:	f7fe fbf9 	bl	80081b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	f003 0307 	and.w	r3, r3, #7
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00c      	beq.n	80099ea <pvPortMalloc+0x176>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	b672      	cpsid	i
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	b662      	cpsie	i
 80099e4:	60fb      	str	r3, [r7, #12]
}
 80099e6:	bf00      	nop
 80099e8:	e7fe      	b.n	80099e8 <pvPortMalloc+0x174>
	return pvReturn;
 80099ea:	69fb      	ldr	r3, [r7, #28]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3728      	adds	r7, #40	; 0x28
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	20004d34 	.word	0x20004d34
 80099f8:	20004d40 	.word	0x20004d40
 80099fc:	20004d38 	.word	0x20004d38
 8009a00:	20004d2c 	.word	0x20004d2c
 8009a04:	20004d3c 	.word	0x20004d3c

08009a08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d04c      	beq.n	8009ab4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a1a:	2308      	movs	r3, #8
 8009a1c:	425b      	negs	r3, r3
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	4413      	add	r3, r2
 8009a22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	4b23      	ldr	r3, [pc, #140]	; (8009abc <vPortFree+0xb4>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4013      	ands	r3, r2
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10c      	bne.n	8009a50 <vPortFree+0x48>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3a:	b672      	cpsid	i
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	b662      	cpsie	i
 8009a4a:	60fb      	str	r3, [r7, #12]
}
 8009a4c:	bf00      	nop
 8009a4e:	e7fe      	b.n	8009a4e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00c      	beq.n	8009a72 <vPortFree+0x6a>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5c:	b672      	cpsid	i
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	b662      	cpsie	i
 8009a6c:	60bb      	str	r3, [r7, #8]
}
 8009a6e:	bf00      	nop
 8009a70:	e7fe      	b.n	8009a70 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	4b11      	ldr	r3, [pc, #68]	; (8009abc <vPortFree+0xb4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d019      	beq.n	8009ab4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d115      	bne.n	8009ab4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	4b0b      	ldr	r3, [pc, #44]	; (8009abc <vPortFree+0xb4>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	43db      	mvns	r3, r3
 8009a92:	401a      	ands	r2, r3
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a98:	f7fe fb80 	bl	800819c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	685a      	ldr	r2, [r3, #4]
 8009aa0:	4b07      	ldr	r3, [pc, #28]	; (8009ac0 <vPortFree+0xb8>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	4a06      	ldr	r2, [pc, #24]	; (8009ac0 <vPortFree+0xb8>)
 8009aa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009aaa:	6938      	ldr	r0, [r7, #16]
 8009aac:	f000 f86c 	bl	8009b88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009ab0:	f7fe fb82 	bl	80081b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ab4:	bf00      	nop
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20004d40 	.word	0x20004d40
 8009ac0:	20004d38 	.word	0x20004d38

08009ac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009aca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009ace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ad0:	4b27      	ldr	r3, [pc, #156]	; (8009b70 <prvHeapInit+0xac>)
 8009ad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f003 0307 	and.w	r3, r3, #7
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00c      	beq.n	8009af8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3307      	adds	r3, #7
 8009ae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f023 0307 	bic.w	r3, r3, #7
 8009aea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	4a1f      	ldr	r2, [pc, #124]	; (8009b70 <prvHeapInit+0xac>)
 8009af4:	4413      	add	r3, r2
 8009af6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009afc:	4a1d      	ldr	r2, [pc, #116]	; (8009b74 <prvHeapInit+0xb0>)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b02:	4b1c      	ldr	r3, [pc, #112]	; (8009b74 <prvHeapInit+0xb0>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b10:	2208      	movs	r2, #8
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	1a9b      	subs	r3, r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f023 0307 	bic.w	r3, r3, #7
 8009b1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	4a15      	ldr	r2, [pc, #84]	; (8009b78 <prvHeapInit+0xb4>)
 8009b24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b26:	4b14      	ldr	r3, [pc, #80]	; (8009b78 <prvHeapInit+0xb4>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b2e:	4b12      	ldr	r3, [pc, #72]	; (8009b78 <prvHeapInit+0xb4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2200      	movs	r2, #0
 8009b34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	1ad2      	subs	r2, r2, r3
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b44:	4b0c      	ldr	r3, [pc, #48]	; (8009b78 <prvHeapInit+0xb4>)
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	4a0a      	ldr	r2, [pc, #40]	; (8009b7c <prvHeapInit+0xb8>)
 8009b52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	4a09      	ldr	r2, [pc, #36]	; (8009b80 <prvHeapInit+0xbc>)
 8009b5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b5c:	4b09      	ldr	r3, [pc, #36]	; (8009b84 <prvHeapInit+0xc0>)
 8009b5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b62:	601a      	str	r2, [r3, #0]
}
 8009b64:	bf00      	nop
 8009b66:	3714      	adds	r7, #20
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	2000112c 	.word	0x2000112c
 8009b74:	20004d2c 	.word	0x20004d2c
 8009b78:	20004d34 	.word	0x20004d34
 8009b7c:	20004d3c 	.word	0x20004d3c
 8009b80:	20004d38 	.word	0x20004d38
 8009b84:	20004d40 	.word	0x20004d40

08009b88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b90:	4b28      	ldr	r3, [pc, #160]	; (8009c34 <prvInsertBlockIntoFreeList+0xac>)
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	e002      	b.n	8009b9c <prvInsertBlockIntoFreeList+0x14>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	60fb      	str	r3, [r7, #12]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d8f7      	bhi.n	8009b96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d108      	bne.n	8009bca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	441a      	add	r2, r3
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	441a      	add	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d118      	bne.n	8009c10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	4b15      	ldr	r3, [pc, #84]	; (8009c38 <prvInsertBlockIntoFreeList+0xb0>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d00d      	beq.n	8009c06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685a      	ldr	r2, [r3, #4]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	441a      	add	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	e008      	b.n	8009c18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c06:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <prvInsertBlockIntoFreeList+0xb0>)
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	601a      	str	r2, [r3, #0]
 8009c0e:	e003      	b.n	8009c18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d002      	beq.n	8009c26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c26:	bf00      	nop
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	20004d2c 	.word	0x20004d2c
 8009c38:	20004d34 	.word	0x20004d34

08009c3c <__errno>:
 8009c3c:	4b01      	ldr	r3, [pc, #4]	; (8009c44 <__errno+0x8>)
 8009c3e:	6818      	ldr	r0, [r3, #0]
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	20000028 	.word	0x20000028

08009c48 <__libc_init_array>:
 8009c48:	b570      	push	{r4, r5, r6, lr}
 8009c4a:	4d0d      	ldr	r5, [pc, #52]	; (8009c80 <__libc_init_array+0x38>)
 8009c4c:	4c0d      	ldr	r4, [pc, #52]	; (8009c84 <__libc_init_array+0x3c>)
 8009c4e:	1b64      	subs	r4, r4, r5
 8009c50:	10a4      	asrs	r4, r4, #2
 8009c52:	2600      	movs	r6, #0
 8009c54:	42a6      	cmp	r6, r4
 8009c56:	d109      	bne.n	8009c6c <__libc_init_array+0x24>
 8009c58:	4d0b      	ldr	r5, [pc, #44]	; (8009c88 <__libc_init_array+0x40>)
 8009c5a:	4c0c      	ldr	r4, [pc, #48]	; (8009c8c <__libc_init_array+0x44>)
 8009c5c:	f001 fa34 	bl	800b0c8 <_init>
 8009c60:	1b64      	subs	r4, r4, r5
 8009c62:	10a4      	asrs	r4, r4, #2
 8009c64:	2600      	movs	r6, #0
 8009c66:	42a6      	cmp	r6, r4
 8009c68:	d105      	bne.n	8009c76 <__libc_init_array+0x2e>
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c70:	4798      	blx	r3
 8009c72:	3601      	adds	r6, #1
 8009c74:	e7ee      	b.n	8009c54 <__libc_init_array+0xc>
 8009c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c7a:	4798      	blx	r3
 8009c7c:	3601      	adds	r6, #1
 8009c7e:	e7f2      	b.n	8009c66 <__libc_init_array+0x1e>
 8009c80:	0800d020 	.word	0x0800d020
 8009c84:	0800d020 	.word	0x0800d020
 8009c88:	0800d020 	.word	0x0800d020
 8009c8c:	0800d024 	.word	0x0800d024

08009c90 <memcpy>:
 8009c90:	440a      	add	r2, r1
 8009c92:	4291      	cmp	r1, r2
 8009c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c98:	d100      	bne.n	8009c9c <memcpy+0xc>
 8009c9a:	4770      	bx	lr
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ca6:	4291      	cmp	r1, r2
 8009ca8:	d1f9      	bne.n	8009c9e <memcpy+0xe>
 8009caa:	bd10      	pop	{r4, pc}

08009cac <memset>:
 8009cac:	4402      	add	r2, r0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d100      	bne.n	8009cb6 <memset+0xa>
 8009cb4:	4770      	bx	lr
 8009cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8009cba:	e7f9      	b.n	8009cb0 <memset+0x4>

08009cbc <rand>:
 8009cbc:	4b16      	ldr	r3, [pc, #88]	; (8009d18 <rand+0x5c>)
 8009cbe:	b510      	push	{r4, lr}
 8009cc0:	681c      	ldr	r4, [r3, #0]
 8009cc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009cc4:	b9b3      	cbnz	r3, 8009cf4 <rand+0x38>
 8009cc6:	2018      	movs	r0, #24
 8009cc8:	f000 f886 	bl	8009dd8 <malloc>
 8009ccc:	63a0      	str	r0, [r4, #56]	; 0x38
 8009cce:	b928      	cbnz	r0, 8009cdc <rand+0x20>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	4b12      	ldr	r3, [pc, #72]	; (8009d1c <rand+0x60>)
 8009cd4:	4812      	ldr	r0, [pc, #72]	; (8009d20 <rand+0x64>)
 8009cd6:	214e      	movs	r1, #78	; 0x4e
 8009cd8:	f000 f84e 	bl	8009d78 <__assert_func>
 8009cdc:	4a11      	ldr	r2, [pc, #68]	; (8009d24 <rand+0x68>)
 8009cde:	4b12      	ldr	r3, [pc, #72]	; (8009d28 <rand+0x6c>)
 8009ce0:	e9c0 2300 	strd	r2, r3, [r0]
 8009ce4:	4b11      	ldr	r3, [pc, #68]	; (8009d2c <rand+0x70>)
 8009ce6:	6083      	str	r3, [r0, #8]
 8009ce8:	230b      	movs	r3, #11
 8009cea:	8183      	strh	r3, [r0, #12]
 8009cec:	2201      	movs	r2, #1
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009cf4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009cf6:	4a0e      	ldr	r2, [pc, #56]	; (8009d30 <rand+0x74>)
 8009cf8:	6920      	ldr	r0, [r4, #16]
 8009cfa:	6963      	ldr	r3, [r4, #20]
 8009cfc:	490d      	ldr	r1, [pc, #52]	; (8009d34 <rand+0x78>)
 8009cfe:	4342      	muls	r2, r0
 8009d00:	fb01 2203 	mla	r2, r1, r3, r2
 8009d04:	fba0 0101 	umull	r0, r1, r0, r1
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	eb42 0001 	adc.w	r0, r2, r1
 8009d0e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009d12:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009d16:	bd10      	pop	{r4, pc}
 8009d18:	20000028 	.word	0x20000028
 8009d1c:	0800ced4 	.word	0x0800ced4
 8009d20:	0800ceeb 	.word	0x0800ceeb
 8009d24:	abcd330e 	.word	0xabcd330e
 8009d28:	e66d1234 	.word	0xe66d1234
 8009d2c:	0005deec 	.word	0x0005deec
 8009d30:	5851f42d 	.word	0x5851f42d
 8009d34:	4c957f2d 	.word	0x4c957f2d

08009d38 <siprintf>:
 8009d38:	b40e      	push	{r1, r2, r3}
 8009d3a:	b500      	push	{lr}
 8009d3c:	b09c      	sub	sp, #112	; 0x70
 8009d3e:	ab1d      	add	r3, sp, #116	; 0x74
 8009d40:	9002      	str	r0, [sp, #8]
 8009d42:	9006      	str	r0, [sp, #24]
 8009d44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d48:	4809      	ldr	r0, [pc, #36]	; (8009d70 <siprintf+0x38>)
 8009d4a:	9107      	str	r1, [sp, #28]
 8009d4c:	9104      	str	r1, [sp, #16]
 8009d4e:	4909      	ldr	r1, [pc, #36]	; (8009d74 <siprintf+0x3c>)
 8009d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d54:	9105      	str	r1, [sp, #20]
 8009d56:	6800      	ldr	r0, [r0, #0]
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	a902      	add	r1, sp, #8
 8009d5c:	f000 f980 	bl	800a060 <_svfiprintf_r>
 8009d60:	9b02      	ldr	r3, [sp, #8]
 8009d62:	2200      	movs	r2, #0
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	b01c      	add	sp, #112	; 0x70
 8009d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d6c:	b003      	add	sp, #12
 8009d6e:	4770      	bx	lr
 8009d70:	20000028 	.word	0x20000028
 8009d74:	ffff0208 	.word	0xffff0208

08009d78 <__assert_func>:
 8009d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d7a:	4614      	mov	r4, r2
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	4b09      	ldr	r3, [pc, #36]	; (8009da4 <__assert_func+0x2c>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4605      	mov	r5, r0
 8009d84:	68d8      	ldr	r0, [r3, #12]
 8009d86:	b14c      	cbz	r4, 8009d9c <__assert_func+0x24>
 8009d88:	4b07      	ldr	r3, [pc, #28]	; (8009da8 <__assert_func+0x30>)
 8009d8a:	9100      	str	r1, [sp, #0]
 8009d8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d90:	4906      	ldr	r1, [pc, #24]	; (8009dac <__assert_func+0x34>)
 8009d92:	462b      	mov	r3, r5
 8009d94:	f000 f80e 	bl	8009db4 <fiprintf>
 8009d98:	f000 fe20 	bl	800a9dc <abort>
 8009d9c:	4b04      	ldr	r3, [pc, #16]	; (8009db0 <__assert_func+0x38>)
 8009d9e:	461c      	mov	r4, r3
 8009da0:	e7f3      	b.n	8009d8a <__assert_func+0x12>
 8009da2:	bf00      	nop
 8009da4:	20000028 	.word	0x20000028
 8009da8:	0800cf46 	.word	0x0800cf46
 8009dac:	0800cf53 	.word	0x0800cf53
 8009db0:	0800cf81 	.word	0x0800cf81

08009db4 <fiprintf>:
 8009db4:	b40e      	push	{r1, r2, r3}
 8009db6:	b503      	push	{r0, r1, lr}
 8009db8:	4601      	mov	r1, r0
 8009dba:	ab03      	add	r3, sp, #12
 8009dbc:	4805      	ldr	r0, [pc, #20]	; (8009dd4 <fiprintf+0x20>)
 8009dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dc2:	6800      	ldr	r0, [r0, #0]
 8009dc4:	9301      	str	r3, [sp, #4]
 8009dc6:	f000 fa75 	bl	800a2b4 <_vfiprintf_r>
 8009dca:	b002      	add	sp, #8
 8009dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dd0:	b003      	add	sp, #12
 8009dd2:	4770      	bx	lr
 8009dd4:	20000028 	.word	0x20000028

08009dd8 <malloc>:
 8009dd8:	4b02      	ldr	r3, [pc, #8]	; (8009de4 <malloc+0xc>)
 8009dda:	4601      	mov	r1, r0
 8009ddc:	6818      	ldr	r0, [r3, #0]
 8009dde:	f000 b86f 	b.w	8009ec0 <_malloc_r>
 8009de2:	bf00      	nop
 8009de4:	20000028 	.word	0x20000028

08009de8 <_free_r>:
 8009de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dea:	2900      	cmp	r1, #0
 8009dec:	d044      	beq.n	8009e78 <_free_r+0x90>
 8009dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009df2:	9001      	str	r0, [sp, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f1a1 0404 	sub.w	r4, r1, #4
 8009dfa:	bfb8      	it	lt
 8009dfc:	18e4      	addlt	r4, r4, r3
 8009dfe:	f001 f82f 	bl	800ae60 <__malloc_lock>
 8009e02:	4a1e      	ldr	r2, [pc, #120]	; (8009e7c <_free_r+0x94>)
 8009e04:	9801      	ldr	r0, [sp, #4]
 8009e06:	6813      	ldr	r3, [r2, #0]
 8009e08:	b933      	cbnz	r3, 8009e18 <_free_r+0x30>
 8009e0a:	6063      	str	r3, [r4, #4]
 8009e0c:	6014      	str	r4, [r2, #0]
 8009e0e:	b003      	add	sp, #12
 8009e10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e14:	f001 b82a 	b.w	800ae6c <__malloc_unlock>
 8009e18:	42a3      	cmp	r3, r4
 8009e1a:	d908      	bls.n	8009e2e <_free_r+0x46>
 8009e1c:	6825      	ldr	r5, [r4, #0]
 8009e1e:	1961      	adds	r1, r4, r5
 8009e20:	428b      	cmp	r3, r1
 8009e22:	bf01      	itttt	eq
 8009e24:	6819      	ldreq	r1, [r3, #0]
 8009e26:	685b      	ldreq	r3, [r3, #4]
 8009e28:	1949      	addeq	r1, r1, r5
 8009e2a:	6021      	streq	r1, [r4, #0]
 8009e2c:	e7ed      	b.n	8009e0a <_free_r+0x22>
 8009e2e:	461a      	mov	r2, r3
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	b10b      	cbz	r3, 8009e38 <_free_r+0x50>
 8009e34:	42a3      	cmp	r3, r4
 8009e36:	d9fa      	bls.n	8009e2e <_free_r+0x46>
 8009e38:	6811      	ldr	r1, [r2, #0]
 8009e3a:	1855      	adds	r5, r2, r1
 8009e3c:	42a5      	cmp	r5, r4
 8009e3e:	d10b      	bne.n	8009e58 <_free_r+0x70>
 8009e40:	6824      	ldr	r4, [r4, #0]
 8009e42:	4421      	add	r1, r4
 8009e44:	1854      	adds	r4, r2, r1
 8009e46:	42a3      	cmp	r3, r4
 8009e48:	6011      	str	r1, [r2, #0]
 8009e4a:	d1e0      	bne.n	8009e0e <_free_r+0x26>
 8009e4c:	681c      	ldr	r4, [r3, #0]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	6053      	str	r3, [r2, #4]
 8009e52:	4421      	add	r1, r4
 8009e54:	6011      	str	r1, [r2, #0]
 8009e56:	e7da      	b.n	8009e0e <_free_r+0x26>
 8009e58:	d902      	bls.n	8009e60 <_free_r+0x78>
 8009e5a:	230c      	movs	r3, #12
 8009e5c:	6003      	str	r3, [r0, #0]
 8009e5e:	e7d6      	b.n	8009e0e <_free_r+0x26>
 8009e60:	6825      	ldr	r5, [r4, #0]
 8009e62:	1961      	adds	r1, r4, r5
 8009e64:	428b      	cmp	r3, r1
 8009e66:	bf04      	itt	eq
 8009e68:	6819      	ldreq	r1, [r3, #0]
 8009e6a:	685b      	ldreq	r3, [r3, #4]
 8009e6c:	6063      	str	r3, [r4, #4]
 8009e6e:	bf04      	itt	eq
 8009e70:	1949      	addeq	r1, r1, r5
 8009e72:	6021      	streq	r1, [r4, #0]
 8009e74:	6054      	str	r4, [r2, #4]
 8009e76:	e7ca      	b.n	8009e0e <_free_r+0x26>
 8009e78:	b003      	add	sp, #12
 8009e7a:	bd30      	pop	{r4, r5, pc}
 8009e7c:	20004d44 	.word	0x20004d44

08009e80 <sbrk_aligned>:
 8009e80:	b570      	push	{r4, r5, r6, lr}
 8009e82:	4e0e      	ldr	r6, [pc, #56]	; (8009ebc <sbrk_aligned+0x3c>)
 8009e84:	460c      	mov	r4, r1
 8009e86:	6831      	ldr	r1, [r6, #0]
 8009e88:	4605      	mov	r5, r0
 8009e8a:	b911      	cbnz	r1, 8009e92 <sbrk_aligned+0x12>
 8009e8c:	f000 fcd6 	bl	800a83c <_sbrk_r>
 8009e90:	6030      	str	r0, [r6, #0]
 8009e92:	4621      	mov	r1, r4
 8009e94:	4628      	mov	r0, r5
 8009e96:	f000 fcd1 	bl	800a83c <_sbrk_r>
 8009e9a:	1c43      	adds	r3, r0, #1
 8009e9c:	d00a      	beq.n	8009eb4 <sbrk_aligned+0x34>
 8009e9e:	1cc4      	adds	r4, r0, #3
 8009ea0:	f024 0403 	bic.w	r4, r4, #3
 8009ea4:	42a0      	cmp	r0, r4
 8009ea6:	d007      	beq.n	8009eb8 <sbrk_aligned+0x38>
 8009ea8:	1a21      	subs	r1, r4, r0
 8009eaa:	4628      	mov	r0, r5
 8009eac:	f000 fcc6 	bl	800a83c <_sbrk_r>
 8009eb0:	3001      	adds	r0, #1
 8009eb2:	d101      	bne.n	8009eb8 <sbrk_aligned+0x38>
 8009eb4:	f04f 34ff 	mov.w	r4, #4294967295
 8009eb8:	4620      	mov	r0, r4
 8009eba:	bd70      	pop	{r4, r5, r6, pc}
 8009ebc:	20004d48 	.word	0x20004d48

08009ec0 <_malloc_r>:
 8009ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec4:	1ccd      	adds	r5, r1, #3
 8009ec6:	f025 0503 	bic.w	r5, r5, #3
 8009eca:	3508      	adds	r5, #8
 8009ecc:	2d0c      	cmp	r5, #12
 8009ece:	bf38      	it	cc
 8009ed0:	250c      	movcc	r5, #12
 8009ed2:	2d00      	cmp	r5, #0
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	db01      	blt.n	8009edc <_malloc_r+0x1c>
 8009ed8:	42a9      	cmp	r1, r5
 8009eda:	d905      	bls.n	8009ee8 <_malloc_r+0x28>
 8009edc:	230c      	movs	r3, #12
 8009ede:	603b      	str	r3, [r7, #0]
 8009ee0:	2600      	movs	r6, #0
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee8:	4e2e      	ldr	r6, [pc, #184]	; (8009fa4 <_malloc_r+0xe4>)
 8009eea:	f000 ffb9 	bl	800ae60 <__malloc_lock>
 8009eee:	6833      	ldr	r3, [r6, #0]
 8009ef0:	461c      	mov	r4, r3
 8009ef2:	bb34      	cbnz	r4, 8009f42 <_malloc_r+0x82>
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	f7ff ffc2 	bl	8009e80 <sbrk_aligned>
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	4604      	mov	r4, r0
 8009f00:	d14d      	bne.n	8009f9e <_malloc_r+0xde>
 8009f02:	6834      	ldr	r4, [r6, #0]
 8009f04:	4626      	mov	r6, r4
 8009f06:	2e00      	cmp	r6, #0
 8009f08:	d140      	bne.n	8009f8c <_malloc_r+0xcc>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	4631      	mov	r1, r6
 8009f0e:	4638      	mov	r0, r7
 8009f10:	eb04 0803 	add.w	r8, r4, r3
 8009f14:	f000 fc92 	bl	800a83c <_sbrk_r>
 8009f18:	4580      	cmp	r8, r0
 8009f1a:	d13a      	bne.n	8009f92 <_malloc_r+0xd2>
 8009f1c:	6821      	ldr	r1, [r4, #0]
 8009f1e:	3503      	adds	r5, #3
 8009f20:	1a6d      	subs	r5, r5, r1
 8009f22:	f025 0503 	bic.w	r5, r5, #3
 8009f26:	3508      	adds	r5, #8
 8009f28:	2d0c      	cmp	r5, #12
 8009f2a:	bf38      	it	cc
 8009f2c:	250c      	movcc	r5, #12
 8009f2e:	4629      	mov	r1, r5
 8009f30:	4638      	mov	r0, r7
 8009f32:	f7ff ffa5 	bl	8009e80 <sbrk_aligned>
 8009f36:	3001      	adds	r0, #1
 8009f38:	d02b      	beq.n	8009f92 <_malloc_r+0xd2>
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	442b      	add	r3, r5
 8009f3e:	6023      	str	r3, [r4, #0]
 8009f40:	e00e      	b.n	8009f60 <_malloc_r+0xa0>
 8009f42:	6822      	ldr	r2, [r4, #0]
 8009f44:	1b52      	subs	r2, r2, r5
 8009f46:	d41e      	bmi.n	8009f86 <_malloc_r+0xc6>
 8009f48:	2a0b      	cmp	r2, #11
 8009f4a:	d916      	bls.n	8009f7a <_malloc_r+0xba>
 8009f4c:	1961      	adds	r1, r4, r5
 8009f4e:	42a3      	cmp	r3, r4
 8009f50:	6025      	str	r5, [r4, #0]
 8009f52:	bf18      	it	ne
 8009f54:	6059      	strne	r1, [r3, #4]
 8009f56:	6863      	ldr	r3, [r4, #4]
 8009f58:	bf08      	it	eq
 8009f5a:	6031      	streq	r1, [r6, #0]
 8009f5c:	5162      	str	r2, [r4, r5]
 8009f5e:	604b      	str	r3, [r1, #4]
 8009f60:	4638      	mov	r0, r7
 8009f62:	f104 060b 	add.w	r6, r4, #11
 8009f66:	f000 ff81 	bl	800ae6c <__malloc_unlock>
 8009f6a:	f026 0607 	bic.w	r6, r6, #7
 8009f6e:	1d23      	adds	r3, r4, #4
 8009f70:	1af2      	subs	r2, r6, r3
 8009f72:	d0b6      	beq.n	8009ee2 <_malloc_r+0x22>
 8009f74:	1b9b      	subs	r3, r3, r6
 8009f76:	50a3      	str	r3, [r4, r2]
 8009f78:	e7b3      	b.n	8009ee2 <_malloc_r+0x22>
 8009f7a:	6862      	ldr	r2, [r4, #4]
 8009f7c:	42a3      	cmp	r3, r4
 8009f7e:	bf0c      	ite	eq
 8009f80:	6032      	streq	r2, [r6, #0]
 8009f82:	605a      	strne	r2, [r3, #4]
 8009f84:	e7ec      	b.n	8009f60 <_malloc_r+0xa0>
 8009f86:	4623      	mov	r3, r4
 8009f88:	6864      	ldr	r4, [r4, #4]
 8009f8a:	e7b2      	b.n	8009ef2 <_malloc_r+0x32>
 8009f8c:	4634      	mov	r4, r6
 8009f8e:	6876      	ldr	r6, [r6, #4]
 8009f90:	e7b9      	b.n	8009f06 <_malloc_r+0x46>
 8009f92:	230c      	movs	r3, #12
 8009f94:	603b      	str	r3, [r7, #0]
 8009f96:	4638      	mov	r0, r7
 8009f98:	f000 ff68 	bl	800ae6c <__malloc_unlock>
 8009f9c:	e7a1      	b.n	8009ee2 <_malloc_r+0x22>
 8009f9e:	6025      	str	r5, [r4, #0]
 8009fa0:	e7de      	b.n	8009f60 <_malloc_r+0xa0>
 8009fa2:	bf00      	nop
 8009fa4:	20004d44 	.word	0x20004d44

08009fa8 <__ssputs_r>:
 8009fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fac:	688e      	ldr	r6, [r1, #8]
 8009fae:	429e      	cmp	r6, r3
 8009fb0:	4682      	mov	sl, r0
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	4690      	mov	r8, r2
 8009fb6:	461f      	mov	r7, r3
 8009fb8:	d838      	bhi.n	800a02c <__ssputs_r+0x84>
 8009fba:	898a      	ldrh	r2, [r1, #12]
 8009fbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fc0:	d032      	beq.n	800a028 <__ssputs_r+0x80>
 8009fc2:	6825      	ldr	r5, [r4, #0]
 8009fc4:	6909      	ldr	r1, [r1, #16]
 8009fc6:	eba5 0901 	sub.w	r9, r5, r1
 8009fca:	6965      	ldr	r5, [r4, #20]
 8009fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	444b      	add	r3, r9
 8009fd8:	106d      	asrs	r5, r5, #1
 8009fda:	429d      	cmp	r5, r3
 8009fdc:	bf38      	it	cc
 8009fde:	461d      	movcc	r5, r3
 8009fe0:	0553      	lsls	r3, r2, #21
 8009fe2:	d531      	bpl.n	800a048 <__ssputs_r+0xa0>
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	f7ff ff6b 	bl	8009ec0 <_malloc_r>
 8009fea:	4606      	mov	r6, r0
 8009fec:	b950      	cbnz	r0, 800a004 <__ssputs_r+0x5c>
 8009fee:	230c      	movs	r3, #12
 8009ff0:	f8ca 3000 	str.w	r3, [sl]
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ffa:	81a3      	strh	r3, [r4, #12]
 8009ffc:	f04f 30ff 	mov.w	r0, #4294967295
 800a000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a004:	6921      	ldr	r1, [r4, #16]
 800a006:	464a      	mov	r2, r9
 800a008:	f7ff fe42 	bl	8009c90 <memcpy>
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a016:	81a3      	strh	r3, [r4, #12]
 800a018:	6126      	str	r6, [r4, #16]
 800a01a:	6165      	str	r5, [r4, #20]
 800a01c:	444e      	add	r6, r9
 800a01e:	eba5 0509 	sub.w	r5, r5, r9
 800a022:	6026      	str	r6, [r4, #0]
 800a024:	60a5      	str	r5, [r4, #8]
 800a026:	463e      	mov	r6, r7
 800a028:	42be      	cmp	r6, r7
 800a02a:	d900      	bls.n	800a02e <__ssputs_r+0x86>
 800a02c:	463e      	mov	r6, r7
 800a02e:	6820      	ldr	r0, [r4, #0]
 800a030:	4632      	mov	r2, r6
 800a032:	4641      	mov	r1, r8
 800a034:	f000 fefa 	bl	800ae2c <memmove>
 800a038:	68a3      	ldr	r3, [r4, #8]
 800a03a:	1b9b      	subs	r3, r3, r6
 800a03c:	60a3      	str	r3, [r4, #8]
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	4433      	add	r3, r6
 800a042:	6023      	str	r3, [r4, #0]
 800a044:	2000      	movs	r0, #0
 800a046:	e7db      	b.n	800a000 <__ssputs_r+0x58>
 800a048:	462a      	mov	r2, r5
 800a04a:	f000 ff15 	bl	800ae78 <_realloc_r>
 800a04e:	4606      	mov	r6, r0
 800a050:	2800      	cmp	r0, #0
 800a052:	d1e1      	bne.n	800a018 <__ssputs_r+0x70>
 800a054:	6921      	ldr	r1, [r4, #16]
 800a056:	4650      	mov	r0, sl
 800a058:	f7ff fec6 	bl	8009de8 <_free_r>
 800a05c:	e7c7      	b.n	8009fee <__ssputs_r+0x46>
	...

0800a060 <_svfiprintf_r>:
 800a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a064:	4698      	mov	r8, r3
 800a066:	898b      	ldrh	r3, [r1, #12]
 800a068:	061b      	lsls	r3, r3, #24
 800a06a:	b09d      	sub	sp, #116	; 0x74
 800a06c:	4607      	mov	r7, r0
 800a06e:	460d      	mov	r5, r1
 800a070:	4614      	mov	r4, r2
 800a072:	d50e      	bpl.n	800a092 <_svfiprintf_r+0x32>
 800a074:	690b      	ldr	r3, [r1, #16]
 800a076:	b963      	cbnz	r3, 800a092 <_svfiprintf_r+0x32>
 800a078:	2140      	movs	r1, #64	; 0x40
 800a07a:	f7ff ff21 	bl	8009ec0 <_malloc_r>
 800a07e:	6028      	str	r0, [r5, #0]
 800a080:	6128      	str	r0, [r5, #16]
 800a082:	b920      	cbnz	r0, 800a08e <_svfiprintf_r+0x2e>
 800a084:	230c      	movs	r3, #12
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	f04f 30ff 	mov.w	r0, #4294967295
 800a08c:	e0d1      	b.n	800a232 <_svfiprintf_r+0x1d2>
 800a08e:	2340      	movs	r3, #64	; 0x40
 800a090:	616b      	str	r3, [r5, #20]
 800a092:	2300      	movs	r3, #0
 800a094:	9309      	str	r3, [sp, #36]	; 0x24
 800a096:	2320      	movs	r3, #32
 800a098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a09c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0a0:	2330      	movs	r3, #48	; 0x30
 800a0a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a24c <_svfiprintf_r+0x1ec>
 800a0a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0aa:	f04f 0901 	mov.w	r9, #1
 800a0ae:	4623      	mov	r3, r4
 800a0b0:	469a      	mov	sl, r3
 800a0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0b6:	b10a      	cbz	r2, 800a0bc <_svfiprintf_r+0x5c>
 800a0b8:	2a25      	cmp	r2, #37	; 0x25
 800a0ba:	d1f9      	bne.n	800a0b0 <_svfiprintf_r+0x50>
 800a0bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a0c0:	d00b      	beq.n	800a0da <_svfiprintf_r+0x7a>
 800a0c2:	465b      	mov	r3, fp
 800a0c4:	4622      	mov	r2, r4
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	4638      	mov	r0, r7
 800a0ca:	f7ff ff6d 	bl	8009fa8 <__ssputs_r>
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	f000 80aa 	beq.w	800a228 <_svfiprintf_r+0x1c8>
 800a0d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0d6:	445a      	add	r2, fp
 800a0d8:	9209      	str	r2, [sp, #36]	; 0x24
 800a0da:	f89a 3000 	ldrb.w	r3, [sl]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 80a2 	beq.w	800a228 <_svfiprintf_r+0x1c8>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ee:	f10a 0a01 	add.w	sl, sl, #1
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	9307      	str	r3, [sp, #28]
 800a0f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0fa:	931a      	str	r3, [sp, #104]	; 0x68
 800a0fc:	4654      	mov	r4, sl
 800a0fe:	2205      	movs	r2, #5
 800a100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a104:	4851      	ldr	r0, [pc, #324]	; (800a24c <_svfiprintf_r+0x1ec>)
 800a106:	f7f6 f89b 	bl	8000240 <memchr>
 800a10a:	9a04      	ldr	r2, [sp, #16]
 800a10c:	b9d8      	cbnz	r0, 800a146 <_svfiprintf_r+0xe6>
 800a10e:	06d0      	lsls	r0, r2, #27
 800a110:	bf44      	itt	mi
 800a112:	2320      	movmi	r3, #32
 800a114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a118:	0711      	lsls	r1, r2, #28
 800a11a:	bf44      	itt	mi
 800a11c:	232b      	movmi	r3, #43	; 0x2b
 800a11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a122:	f89a 3000 	ldrb.w	r3, [sl]
 800a126:	2b2a      	cmp	r3, #42	; 0x2a
 800a128:	d015      	beq.n	800a156 <_svfiprintf_r+0xf6>
 800a12a:	9a07      	ldr	r2, [sp, #28]
 800a12c:	4654      	mov	r4, sl
 800a12e:	2000      	movs	r0, #0
 800a130:	f04f 0c0a 	mov.w	ip, #10
 800a134:	4621      	mov	r1, r4
 800a136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a13a:	3b30      	subs	r3, #48	; 0x30
 800a13c:	2b09      	cmp	r3, #9
 800a13e:	d94e      	bls.n	800a1de <_svfiprintf_r+0x17e>
 800a140:	b1b0      	cbz	r0, 800a170 <_svfiprintf_r+0x110>
 800a142:	9207      	str	r2, [sp, #28]
 800a144:	e014      	b.n	800a170 <_svfiprintf_r+0x110>
 800a146:	eba0 0308 	sub.w	r3, r0, r8
 800a14a:	fa09 f303 	lsl.w	r3, r9, r3
 800a14e:	4313      	orrs	r3, r2
 800a150:	9304      	str	r3, [sp, #16]
 800a152:	46a2      	mov	sl, r4
 800a154:	e7d2      	b.n	800a0fc <_svfiprintf_r+0x9c>
 800a156:	9b03      	ldr	r3, [sp, #12]
 800a158:	1d19      	adds	r1, r3, #4
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	9103      	str	r1, [sp, #12]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	bfbb      	ittet	lt
 800a162:	425b      	neglt	r3, r3
 800a164:	f042 0202 	orrlt.w	r2, r2, #2
 800a168:	9307      	strge	r3, [sp, #28]
 800a16a:	9307      	strlt	r3, [sp, #28]
 800a16c:	bfb8      	it	lt
 800a16e:	9204      	strlt	r2, [sp, #16]
 800a170:	7823      	ldrb	r3, [r4, #0]
 800a172:	2b2e      	cmp	r3, #46	; 0x2e
 800a174:	d10c      	bne.n	800a190 <_svfiprintf_r+0x130>
 800a176:	7863      	ldrb	r3, [r4, #1]
 800a178:	2b2a      	cmp	r3, #42	; 0x2a
 800a17a:	d135      	bne.n	800a1e8 <_svfiprintf_r+0x188>
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	1d1a      	adds	r2, r3, #4
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	9203      	str	r2, [sp, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	bfb8      	it	lt
 800a188:	f04f 33ff 	movlt.w	r3, #4294967295
 800a18c:	3402      	adds	r4, #2
 800a18e:	9305      	str	r3, [sp, #20]
 800a190:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a25c <_svfiprintf_r+0x1fc>
 800a194:	7821      	ldrb	r1, [r4, #0]
 800a196:	2203      	movs	r2, #3
 800a198:	4650      	mov	r0, sl
 800a19a:	f7f6 f851 	bl	8000240 <memchr>
 800a19e:	b140      	cbz	r0, 800a1b2 <_svfiprintf_r+0x152>
 800a1a0:	2340      	movs	r3, #64	; 0x40
 800a1a2:	eba0 000a 	sub.w	r0, r0, sl
 800a1a6:	fa03 f000 	lsl.w	r0, r3, r0
 800a1aa:	9b04      	ldr	r3, [sp, #16]
 800a1ac:	4303      	orrs	r3, r0
 800a1ae:	3401      	adds	r4, #1
 800a1b0:	9304      	str	r3, [sp, #16]
 800a1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b6:	4826      	ldr	r0, [pc, #152]	; (800a250 <_svfiprintf_r+0x1f0>)
 800a1b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1bc:	2206      	movs	r2, #6
 800a1be:	f7f6 f83f 	bl	8000240 <memchr>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d038      	beq.n	800a238 <_svfiprintf_r+0x1d8>
 800a1c6:	4b23      	ldr	r3, [pc, #140]	; (800a254 <_svfiprintf_r+0x1f4>)
 800a1c8:	bb1b      	cbnz	r3, 800a212 <_svfiprintf_r+0x1b2>
 800a1ca:	9b03      	ldr	r3, [sp, #12]
 800a1cc:	3307      	adds	r3, #7
 800a1ce:	f023 0307 	bic.w	r3, r3, #7
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	9303      	str	r3, [sp, #12]
 800a1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d8:	4433      	add	r3, r6
 800a1da:	9309      	str	r3, [sp, #36]	; 0x24
 800a1dc:	e767      	b.n	800a0ae <_svfiprintf_r+0x4e>
 800a1de:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	e7a5      	b.n	800a134 <_svfiprintf_r+0xd4>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	3401      	adds	r4, #1
 800a1ec:	9305      	str	r3, [sp, #20]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	f04f 0c0a 	mov.w	ip, #10
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1fa:	3a30      	subs	r2, #48	; 0x30
 800a1fc:	2a09      	cmp	r2, #9
 800a1fe:	d903      	bls.n	800a208 <_svfiprintf_r+0x1a8>
 800a200:	2b00      	cmp	r3, #0
 800a202:	d0c5      	beq.n	800a190 <_svfiprintf_r+0x130>
 800a204:	9105      	str	r1, [sp, #20]
 800a206:	e7c3      	b.n	800a190 <_svfiprintf_r+0x130>
 800a208:	fb0c 2101 	mla	r1, ip, r1, r2
 800a20c:	4604      	mov	r4, r0
 800a20e:	2301      	movs	r3, #1
 800a210:	e7f0      	b.n	800a1f4 <_svfiprintf_r+0x194>
 800a212:	ab03      	add	r3, sp, #12
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	462a      	mov	r2, r5
 800a218:	4b0f      	ldr	r3, [pc, #60]	; (800a258 <_svfiprintf_r+0x1f8>)
 800a21a:	a904      	add	r1, sp, #16
 800a21c:	4638      	mov	r0, r7
 800a21e:	f3af 8000 	nop.w
 800a222:	1c42      	adds	r2, r0, #1
 800a224:	4606      	mov	r6, r0
 800a226:	d1d6      	bne.n	800a1d6 <_svfiprintf_r+0x176>
 800a228:	89ab      	ldrh	r3, [r5, #12]
 800a22a:	065b      	lsls	r3, r3, #25
 800a22c:	f53f af2c 	bmi.w	800a088 <_svfiprintf_r+0x28>
 800a230:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a232:	b01d      	add	sp, #116	; 0x74
 800a234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a238:	ab03      	add	r3, sp, #12
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	462a      	mov	r2, r5
 800a23e:	4b06      	ldr	r3, [pc, #24]	; (800a258 <_svfiprintf_r+0x1f8>)
 800a240:	a904      	add	r1, sp, #16
 800a242:	4638      	mov	r0, r7
 800a244:	f000 f9d4 	bl	800a5f0 <_printf_i>
 800a248:	e7eb      	b.n	800a222 <_svfiprintf_r+0x1c2>
 800a24a:	bf00      	nop
 800a24c:	0800cf82 	.word	0x0800cf82
 800a250:	0800cf8c 	.word	0x0800cf8c
 800a254:	00000000 	.word	0x00000000
 800a258:	08009fa9 	.word	0x08009fa9
 800a25c:	0800cf88 	.word	0x0800cf88

0800a260 <__sfputc_r>:
 800a260:	6893      	ldr	r3, [r2, #8]
 800a262:	3b01      	subs	r3, #1
 800a264:	2b00      	cmp	r3, #0
 800a266:	b410      	push	{r4}
 800a268:	6093      	str	r3, [r2, #8]
 800a26a:	da08      	bge.n	800a27e <__sfputc_r+0x1e>
 800a26c:	6994      	ldr	r4, [r2, #24]
 800a26e:	42a3      	cmp	r3, r4
 800a270:	db01      	blt.n	800a276 <__sfputc_r+0x16>
 800a272:	290a      	cmp	r1, #10
 800a274:	d103      	bne.n	800a27e <__sfputc_r+0x1e>
 800a276:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a27a:	f000 baef 	b.w	800a85c <__swbuf_r>
 800a27e:	6813      	ldr	r3, [r2, #0]
 800a280:	1c58      	adds	r0, r3, #1
 800a282:	6010      	str	r0, [r2, #0]
 800a284:	7019      	strb	r1, [r3, #0]
 800a286:	4608      	mov	r0, r1
 800a288:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <__sfputs_r>:
 800a28e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a290:	4606      	mov	r6, r0
 800a292:	460f      	mov	r7, r1
 800a294:	4614      	mov	r4, r2
 800a296:	18d5      	adds	r5, r2, r3
 800a298:	42ac      	cmp	r4, r5
 800a29a:	d101      	bne.n	800a2a0 <__sfputs_r+0x12>
 800a29c:	2000      	movs	r0, #0
 800a29e:	e007      	b.n	800a2b0 <__sfputs_r+0x22>
 800a2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2a4:	463a      	mov	r2, r7
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	f7ff ffda 	bl	800a260 <__sfputc_r>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	d1f3      	bne.n	800a298 <__sfputs_r+0xa>
 800a2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2b4 <_vfiprintf_r>:
 800a2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	460d      	mov	r5, r1
 800a2ba:	b09d      	sub	sp, #116	; 0x74
 800a2bc:	4614      	mov	r4, r2
 800a2be:	4698      	mov	r8, r3
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	b118      	cbz	r0, 800a2cc <_vfiprintf_r+0x18>
 800a2c4:	6983      	ldr	r3, [r0, #24]
 800a2c6:	b90b      	cbnz	r3, 800a2cc <_vfiprintf_r+0x18>
 800a2c8:	f000 fcaa 	bl	800ac20 <__sinit>
 800a2cc:	4b89      	ldr	r3, [pc, #548]	; (800a4f4 <_vfiprintf_r+0x240>)
 800a2ce:	429d      	cmp	r5, r3
 800a2d0:	d11b      	bne.n	800a30a <_vfiprintf_r+0x56>
 800a2d2:	6875      	ldr	r5, [r6, #4]
 800a2d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2d6:	07d9      	lsls	r1, r3, #31
 800a2d8:	d405      	bmi.n	800a2e6 <_vfiprintf_r+0x32>
 800a2da:	89ab      	ldrh	r3, [r5, #12]
 800a2dc:	059a      	lsls	r2, r3, #22
 800a2de:	d402      	bmi.n	800a2e6 <_vfiprintf_r+0x32>
 800a2e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2e2:	f000 fd3b 	bl	800ad5c <__retarget_lock_acquire_recursive>
 800a2e6:	89ab      	ldrh	r3, [r5, #12]
 800a2e8:	071b      	lsls	r3, r3, #28
 800a2ea:	d501      	bpl.n	800a2f0 <_vfiprintf_r+0x3c>
 800a2ec:	692b      	ldr	r3, [r5, #16]
 800a2ee:	b9eb      	cbnz	r3, 800a32c <_vfiprintf_r+0x78>
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f000 fb04 	bl	800a900 <__swsetup_r>
 800a2f8:	b1c0      	cbz	r0, 800a32c <_vfiprintf_r+0x78>
 800a2fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2fc:	07dc      	lsls	r4, r3, #31
 800a2fe:	d50e      	bpl.n	800a31e <_vfiprintf_r+0x6a>
 800a300:	f04f 30ff 	mov.w	r0, #4294967295
 800a304:	b01d      	add	sp, #116	; 0x74
 800a306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30a:	4b7b      	ldr	r3, [pc, #492]	; (800a4f8 <_vfiprintf_r+0x244>)
 800a30c:	429d      	cmp	r5, r3
 800a30e:	d101      	bne.n	800a314 <_vfiprintf_r+0x60>
 800a310:	68b5      	ldr	r5, [r6, #8]
 800a312:	e7df      	b.n	800a2d4 <_vfiprintf_r+0x20>
 800a314:	4b79      	ldr	r3, [pc, #484]	; (800a4fc <_vfiprintf_r+0x248>)
 800a316:	429d      	cmp	r5, r3
 800a318:	bf08      	it	eq
 800a31a:	68f5      	ldreq	r5, [r6, #12]
 800a31c:	e7da      	b.n	800a2d4 <_vfiprintf_r+0x20>
 800a31e:	89ab      	ldrh	r3, [r5, #12]
 800a320:	0598      	lsls	r0, r3, #22
 800a322:	d4ed      	bmi.n	800a300 <_vfiprintf_r+0x4c>
 800a324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a326:	f000 fd1a 	bl	800ad5e <__retarget_lock_release_recursive>
 800a32a:	e7e9      	b.n	800a300 <_vfiprintf_r+0x4c>
 800a32c:	2300      	movs	r3, #0
 800a32e:	9309      	str	r3, [sp, #36]	; 0x24
 800a330:	2320      	movs	r3, #32
 800a332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a336:	f8cd 800c 	str.w	r8, [sp, #12]
 800a33a:	2330      	movs	r3, #48	; 0x30
 800a33c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a500 <_vfiprintf_r+0x24c>
 800a340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a344:	f04f 0901 	mov.w	r9, #1
 800a348:	4623      	mov	r3, r4
 800a34a:	469a      	mov	sl, r3
 800a34c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a350:	b10a      	cbz	r2, 800a356 <_vfiprintf_r+0xa2>
 800a352:	2a25      	cmp	r2, #37	; 0x25
 800a354:	d1f9      	bne.n	800a34a <_vfiprintf_r+0x96>
 800a356:	ebba 0b04 	subs.w	fp, sl, r4
 800a35a:	d00b      	beq.n	800a374 <_vfiprintf_r+0xc0>
 800a35c:	465b      	mov	r3, fp
 800a35e:	4622      	mov	r2, r4
 800a360:	4629      	mov	r1, r5
 800a362:	4630      	mov	r0, r6
 800a364:	f7ff ff93 	bl	800a28e <__sfputs_r>
 800a368:	3001      	adds	r0, #1
 800a36a:	f000 80aa 	beq.w	800a4c2 <_vfiprintf_r+0x20e>
 800a36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a370:	445a      	add	r2, fp
 800a372:	9209      	str	r2, [sp, #36]	; 0x24
 800a374:	f89a 3000 	ldrb.w	r3, [sl]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 80a2 	beq.w	800a4c2 <_vfiprintf_r+0x20e>
 800a37e:	2300      	movs	r3, #0
 800a380:	f04f 32ff 	mov.w	r2, #4294967295
 800a384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a388:	f10a 0a01 	add.w	sl, sl, #1
 800a38c:	9304      	str	r3, [sp, #16]
 800a38e:	9307      	str	r3, [sp, #28]
 800a390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a394:	931a      	str	r3, [sp, #104]	; 0x68
 800a396:	4654      	mov	r4, sl
 800a398:	2205      	movs	r2, #5
 800a39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39e:	4858      	ldr	r0, [pc, #352]	; (800a500 <_vfiprintf_r+0x24c>)
 800a3a0:	f7f5 ff4e 	bl	8000240 <memchr>
 800a3a4:	9a04      	ldr	r2, [sp, #16]
 800a3a6:	b9d8      	cbnz	r0, 800a3e0 <_vfiprintf_r+0x12c>
 800a3a8:	06d1      	lsls	r1, r2, #27
 800a3aa:	bf44      	itt	mi
 800a3ac:	2320      	movmi	r3, #32
 800a3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3b2:	0713      	lsls	r3, r2, #28
 800a3b4:	bf44      	itt	mi
 800a3b6:	232b      	movmi	r3, #43	; 0x2b
 800a3b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a3c2:	d015      	beq.n	800a3f0 <_vfiprintf_r+0x13c>
 800a3c4:	9a07      	ldr	r2, [sp, #28]
 800a3c6:	4654      	mov	r4, sl
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	f04f 0c0a 	mov.w	ip, #10
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3d4:	3b30      	subs	r3, #48	; 0x30
 800a3d6:	2b09      	cmp	r3, #9
 800a3d8:	d94e      	bls.n	800a478 <_vfiprintf_r+0x1c4>
 800a3da:	b1b0      	cbz	r0, 800a40a <_vfiprintf_r+0x156>
 800a3dc:	9207      	str	r2, [sp, #28]
 800a3de:	e014      	b.n	800a40a <_vfiprintf_r+0x156>
 800a3e0:	eba0 0308 	sub.w	r3, r0, r8
 800a3e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	9304      	str	r3, [sp, #16]
 800a3ec:	46a2      	mov	sl, r4
 800a3ee:	e7d2      	b.n	800a396 <_vfiprintf_r+0xe2>
 800a3f0:	9b03      	ldr	r3, [sp, #12]
 800a3f2:	1d19      	adds	r1, r3, #4
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	9103      	str	r1, [sp, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	bfbb      	ittet	lt
 800a3fc:	425b      	neglt	r3, r3
 800a3fe:	f042 0202 	orrlt.w	r2, r2, #2
 800a402:	9307      	strge	r3, [sp, #28]
 800a404:	9307      	strlt	r3, [sp, #28]
 800a406:	bfb8      	it	lt
 800a408:	9204      	strlt	r2, [sp, #16]
 800a40a:	7823      	ldrb	r3, [r4, #0]
 800a40c:	2b2e      	cmp	r3, #46	; 0x2e
 800a40e:	d10c      	bne.n	800a42a <_vfiprintf_r+0x176>
 800a410:	7863      	ldrb	r3, [r4, #1]
 800a412:	2b2a      	cmp	r3, #42	; 0x2a
 800a414:	d135      	bne.n	800a482 <_vfiprintf_r+0x1ce>
 800a416:	9b03      	ldr	r3, [sp, #12]
 800a418:	1d1a      	adds	r2, r3, #4
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	9203      	str	r2, [sp, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	bfb8      	it	lt
 800a422:	f04f 33ff 	movlt.w	r3, #4294967295
 800a426:	3402      	adds	r4, #2
 800a428:	9305      	str	r3, [sp, #20]
 800a42a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a510 <_vfiprintf_r+0x25c>
 800a42e:	7821      	ldrb	r1, [r4, #0]
 800a430:	2203      	movs	r2, #3
 800a432:	4650      	mov	r0, sl
 800a434:	f7f5 ff04 	bl	8000240 <memchr>
 800a438:	b140      	cbz	r0, 800a44c <_vfiprintf_r+0x198>
 800a43a:	2340      	movs	r3, #64	; 0x40
 800a43c:	eba0 000a 	sub.w	r0, r0, sl
 800a440:	fa03 f000 	lsl.w	r0, r3, r0
 800a444:	9b04      	ldr	r3, [sp, #16]
 800a446:	4303      	orrs	r3, r0
 800a448:	3401      	adds	r4, #1
 800a44a:	9304      	str	r3, [sp, #16]
 800a44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a450:	482c      	ldr	r0, [pc, #176]	; (800a504 <_vfiprintf_r+0x250>)
 800a452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a456:	2206      	movs	r2, #6
 800a458:	f7f5 fef2 	bl	8000240 <memchr>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d03f      	beq.n	800a4e0 <_vfiprintf_r+0x22c>
 800a460:	4b29      	ldr	r3, [pc, #164]	; (800a508 <_vfiprintf_r+0x254>)
 800a462:	bb1b      	cbnz	r3, 800a4ac <_vfiprintf_r+0x1f8>
 800a464:	9b03      	ldr	r3, [sp, #12]
 800a466:	3307      	adds	r3, #7
 800a468:	f023 0307 	bic.w	r3, r3, #7
 800a46c:	3308      	adds	r3, #8
 800a46e:	9303      	str	r3, [sp, #12]
 800a470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a472:	443b      	add	r3, r7
 800a474:	9309      	str	r3, [sp, #36]	; 0x24
 800a476:	e767      	b.n	800a348 <_vfiprintf_r+0x94>
 800a478:	fb0c 3202 	mla	r2, ip, r2, r3
 800a47c:	460c      	mov	r4, r1
 800a47e:	2001      	movs	r0, #1
 800a480:	e7a5      	b.n	800a3ce <_vfiprintf_r+0x11a>
 800a482:	2300      	movs	r3, #0
 800a484:	3401      	adds	r4, #1
 800a486:	9305      	str	r3, [sp, #20]
 800a488:	4619      	mov	r1, r3
 800a48a:	f04f 0c0a 	mov.w	ip, #10
 800a48e:	4620      	mov	r0, r4
 800a490:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a494:	3a30      	subs	r2, #48	; 0x30
 800a496:	2a09      	cmp	r2, #9
 800a498:	d903      	bls.n	800a4a2 <_vfiprintf_r+0x1ee>
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d0c5      	beq.n	800a42a <_vfiprintf_r+0x176>
 800a49e:	9105      	str	r1, [sp, #20]
 800a4a0:	e7c3      	b.n	800a42a <_vfiprintf_r+0x176>
 800a4a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e7f0      	b.n	800a48e <_vfiprintf_r+0x1da>
 800a4ac:	ab03      	add	r3, sp, #12
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	462a      	mov	r2, r5
 800a4b2:	4b16      	ldr	r3, [pc, #88]	; (800a50c <_vfiprintf_r+0x258>)
 800a4b4:	a904      	add	r1, sp, #16
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	f3af 8000 	nop.w
 800a4bc:	4607      	mov	r7, r0
 800a4be:	1c78      	adds	r0, r7, #1
 800a4c0:	d1d6      	bne.n	800a470 <_vfiprintf_r+0x1bc>
 800a4c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4c4:	07d9      	lsls	r1, r3, #31
 800a4c6:	d405      	bmi.n	800a4d4 <_vfiprintf_r+0x220>
 800a4c8:	89ab      	ldrh	r3, [r5, #12]
 800a4ca:	059a      	lsls	r2, r3, #22
 800a4cc:	d402      	bmi.n	800a4d4 <_vfiprintf_r+0x220>
 800a4ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4d0:	f000 fc45 	bl	800ad5e <__retarget_lock_release_recursive>
 800a4d4:	89ab      	ldrh	r3, [r5, #12]
 800a4d6:	065b      	lsls	r3, r3, #25
 800a4d8:	f53f af12 	bmi.w	800a300 <_vfiprintf_r+0x4c>
 800a4dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4de:	e711      	b.n	800a304 <_vfiprintf_r+0x50>
 800a4e0:	ab03      	add	r3, sp, #12
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	462a      	mov	r2, r5
 800a4e6:	4b09      	ldr	r3, [pc, #36]	; (800a50c <_vfiprintf_r+0x258>)
 800a4e8:	a904      	add	r1, sp, #16
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	f000 f880 	bl	800a5f0 <_printf_i>
 800a4f0:	e7e4      	b.n	800a4bc <_vfiprintf_r+0x208>
 800a4f2:	bf00      	nop
 800a4f4:	0800cfd8 	.word	0x0800cfd8
 800a4f8:	0800cff8 	.word	0x0800cff8
 800a4fc:	0800cfb8 	.word	0x0800cfb8
 800a500:	0800cf82 	.word	0x0800cf82
 800a504:	0800cf8c 	.word	0x0800cf8c
 800a508:	00000000 	.word	0x00000000
 800a50c:	0800a28f 	.word	0x0800a28f
 800a510:	0800cf88 	.word	0x0800cf88

0800a514 <_printf_common>:
 800a514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a518:	4616      	mov	r6, r2
 800a51a:	4699      	mov	r9, r3
 800a51c:	688a      	ldr	r2, [r1, #8]
 800a51e:	690b      	ldr	r3, [r1, #16]
 800a520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a524:	4293      	cmp	r3, r2
 800a526:	bfb8      	it	lt
 800a528:	4613      	movlt	r3, r2
 800a52a:	6033      	str	r3, [r6, #0]
 800a52c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a530:	4607      	mov	r7, r0
 800a532:	460c      	mov	r4, r1
 800a534:	b10a      	cbz	r2, 800a53a <_printf_common+0x26>
 800a536:	3301      	adds	r3, #1
 800a538:	6033      	str	r3, [r6, #0]
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	0699      	lsls	r1, r3, #26
 800a53e:	bf42      	ittt	mi
 800a540:	6833      	ldrmi	r3, [r6, #0]
 800a542:	3302      	addmi	r3, #2
 800a544:	6033      	strmi	r3, [r6, #0]
 800a546:	6825      	ldr	r5, [r4, #0]
 800a548:	f015 0506 	ands.w	r5, r5, #6
 800a54c:	d106      	bne.n	800a55c <_printf_common+0x48>
 800a54e:	f104 0a19 	add.w	sl, r4, #25
 800a552:	68e3      	ldr	r3, [r4, #12]
 800a554:	6832      	ldr	r2, [r6, #0]
 800a556:	1a9b      	subs	r3, r3, r2
 800a558:	42ab      	cmp	r3, r5
 800a55a:	dc26      	bgt.n	800a5aa <_printf_common+0x96>
 800a55c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a560:	1e13      	subs	r3, r2, #0
 800a562:	6822      	ldr	r2, [r4, #0]
 800a564:	bf18      	it	ne
 800a566:	2301      	movne	r3, #1
 800a568:	0692      	lsls	r2, r2, #26
 800a56a:	d42b      	bmi.n	800a5c4 <_printf_common+0xb0>
 800a56c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a570:	4649      	mov	r1, r9
 800a572:	4638      	mov	r0, r7
 800a574:	47c0      	blx	r8
 800a576:	3001      	adds	r0, #1
 800a578:	d01e      	beq.n	800a5b8 <_printf_common+0xa4>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	68e5      	ldr	r5, [r4, #12]
 800a57e:	6832      	ldr	r2, [r6, #0]
 800a580:	f003 0306 	and.w	r3, r3, #6
 800a584:	2b04      	cmp	r3, #4
 800a586:	bf08      	it	eq
 800a588:	1aad      	subeq	r5, r5, r2
 800a58a:	68a3      	ldr	r3, [r4, #8]
 800a58c:	6922      	ldr	r2, [r4, #16]
 800a58e:	bf0c      	ite	eq
 800a590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a594:	2500      	movne	r5, #0
 800a596:	4293      	cmp	r3, r2
 800a598:	bfc4      	itt	gt
 800a59a:	1a9b      	subgt	r3, r3, r2
 800a59c:	18ed      	addgt	r5, r5, r3
 800a59e:	2600      	movs	r6, #0
 800a5a0:	341a      	adds	r4, #26
 800a5a2:	42b5      	cmp	r5, r6
 800a5a4:	d11a      	bne.n	800a5dc <_printf_common+0xc8>
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	e008      	b.n	800a5bc <_printf_common+0xa8>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	4652      	mov	r2, sl
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	47c0      	blx	r8
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	d103      	bne.n	800a5c0 <_printf_common+0xac>
 800a5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c0:	3501      	adds	r5, #1
 800a5c2:	e7c6      	b.n	800a552 <_printf_common+0x3e>
 800a5c4:	18e1      	adds	r1, r4, r3
 800a5c6:	1c5a      	adds	r2, r3, #1
 800a5c8:	2030      	movs	r0, #48	; 0x30
 800a5ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5ce:	4422      	add	r2, r4
 800a5d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5d8:	3302      	adds	r3, #2
 800a5da:	e7c7      	b.n	800a56c <_printf_common+0x58>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	4622      	mov	r2, r4
 800a5e0:	4649      	mov	r1, r9
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	47c0      	blx	r8
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	d0e6      	beq.n	800a5b8 <_printf_common+0xa4>
 800a5ea:	3601      	adds	r6, #1
 800a5ec:	e7d9      	b.n	800a5a2 <_printf_common+0x8e>
	...

0800a5f0 <_printf_i>:
 800a5f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f4:	7e0f      	ldrb	r7, [r1, #24]
 800a5f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5f8:	2f78      	cmp	r7, #120	; 0x78
 800a5fa:	4691      	mov	r9, r2
 800a5fc:	4680      	mov	r8, r0
 800a5fe:	460c      	mov	r4, r1
 800a600:	469a      	mov	sl, r3
 800a602:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a606:	d807      	bhi.n	800a618 <_printf_i+0x28>
 800a608:	2f62      	cmp	r7, #98	; 0x62
 800a60a:	d80a      	bhi.n	800a622 <_printf_i+0x32>
 800a60c:	2f00      	cmp	r7, #0
 800a60e:	f000 80d8 	beq.w	800a7c2 <_printf_i+0x1d2>
 800a612:	2f58      	cmp	r7, #88	; 0x58
 800a614:	f000 80a3 	beq.w	800a75e <_printf_i+0x16e>
 800a618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a61c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a620:	e03a      	b.n	800a698 <_printf_i+0xa8>
 800a622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a626:	2b15      	cmp	r3, #21
 800a628:	d8f6      	bhi.n	800a618 <_printf_i+0x28>
 800a62a:	a101      	add	r1, pc, #4	; (adr r1, 800a630 <_printf_i+0x40>)
 800a62c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a630:	0800a689 	.word	0x0800a689
 800a634:	0800a69d 	.word	0x0800a69d
 800a638:	0800a619 	.word	0x0800a619
 800a63c:	0800a619 	.word	0x0800a619
 800a640:	0800a619 	.word	0x0800a619
 800a644:	0800a619 	.word	0x0800a619
 800a648:	0800a69d 	.word	0x0800a69d
 800a64c:	0800a619 	.word	0x0800a619
 800a650:	0800a619 	.word	0x0800a619
 800a654:	0800a619 	.word	0x0800a619
 800a658:	0800a619 	.word	0x0800a619
 800a65c:	0800a7a9 	.word	0x0800a7a9
 800a660:	0800a6cd 	.word	0x0800a6cd
 800a664:	0800a78b 	.word	0x0800a78b
 800a668:	0800a619 	.word	0x0800a619
 800a66c:	0800a619 	.word	0x0800a619
 800a670:	0800a7cb 	.word	0x0800a7cb
 800a674:	0800a619 	.word	0x0800a619
 800a678:	0800a6cd 	.word	0x0800a6cd
 800a67c:	0800a619 	.word	0x0800a619
 800a680:	0800a619 	.word	0x0800a619
 800a684:	0800a793 	.word	0x0800a793
 800a688:	682b      	ldr	r3, [r5, #0]
 800a68a:	1d1a      	adds	r2, r3, #4
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	602a      	str	r2, [r5, #0]
 800a690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a698:	2301      	movs	r3, #1
 800a69a:	e0a3      	b.n	800a7e4 <_printf_i+0x1f4>
 800a69c:	6820      	ldr	r0, [r4, #0]
 800a69e:	6829      	ldr	r1, [r5, #0]
 800a6a0:	0606      	lsls	r6, r0, #24
 800a6a2:	f101 0304 	add.w	r3, r1, #4
 800a6a6:	d50a      	bpl.n	800a6be <_printf_i+0xce>
 800a6a8:	680e      	ldr	r6, [r1, #0]
 800a6aa:	602b      	str	r3, [r5, #0]
 800a6ac:	2e00      	cmp	r6, #0
 800a6ae:	da03      	bge.n	800a6b8 <_printf_i+0xc8>
 800a6b0:	232d      	movs	r3, #45	; 0x2d
 800a6b2:	4276      	negs	r6, r6
 800a6b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6b8:	485e      	ldr	r0, [pc, #376]	; (800a834 <_printf_i+0x244>)
 800a6ba:	230a      	movs	r3, #10
 800a6bc:	e019      	b.n	800a6f2 <_printf_i+0x102>
 800a6be:	680e      	ldr	r6, [r1, #0]
 800a6c0:	602b      	str	r3, [r5, #0]
 800a6c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6c6:	bf18      	it	ne
 800a6c8:	b236      	sxthne	r6, r6
 800a6ca:	e7ef      	b.n	800a6ac <_printf_i+0xbc>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	6820      	ldr	r0, [r4, #0]
 800a6d0:	1d19      	adds	r1, r3, #4
 800a6d2:	6029      	str	r1, [r5, #0]
 800a6d4:	0601      	lsls	r1, r0, #24
 800a6d6:	d501      	bpl.n	800a6dc <_printf_i+0xec>
 800a6d8:	681e      	ldr	r6, [r3, #0]
 800a6da:	e002      	b.n	800a6e2 <_printf_i+0xf2>
 800a6dc:	0646      	lsls	r6, r0, #25
 800a6de:	d5fb      	bpl.n	800a6d8 <_printf_i+0xe8>
 800a6e0:	881e      	ldrh	r6, [r3, #0]
 800a6e2:	4854      	ldr	r0, [pc, #336]	; (800a834 <_printf_i+0x244>)
 800a6e4:	2f6f      	cmp	r7, #111	; 0x6f
 800a6e6:	bf0c      	ite	eq
 800a6e8:	2308      	moveq	r3, #8
 800a6ea:	230a      	movne	r3, #10
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6f2:	6865      	ldr	r5, [r4, #4]
 800a6f4:	60a5      	str	r5, [r4, #8]
 800a6f6:	2d00      	cmp	r5, #0
 800a6f8:	bfa2      	ittt	ge
 800a6fa:	6821      	ldrge	r1, [r4, #0]
 800a6fc:	f021 0104 	bicge.w	r1, r1, #4
 800a700:	6021      	strge	r1, [r4, #0]
 800a702:	b90e      	cbnz	r6, 800a708 <_printf_i+0x118>
 800a704:	2d00      	cmp	r5, #0
 800a706:	d04d      	beq.n	800a7a4 <_printf_i+0x1b4>
 800a708:	4615      	mov	r5, r2
 800a70a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a70e:	fb03 6711 	mls	r7, r3, r1, r6
 800a712:	5dc7      	ldrb	r7, [r0, r7]
 800a714:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a718:	4637      	mov	r7, r6
 800a71a:	42bb      	cmp	r3, r7
 800a71c:	460e      	mov	r6, r1
 800a71e:	d9f4      	bls.n	800a70a <_printf_i+0x11a>
 800a720:	2b08      	cmp	r3, #8
 800a722:	d10b      	bne.n	800a73c <_printf_i+0x14c>
 800a724:	6823      	ldr	r3, [r4, #0]
 800a726:	07de      	lsls	r6, r3, #31
 800a728:	d508      	bpl.n	800a73c <_printf_i+0x14c>
 800a72a:	6923      	ldr	r3, [r4, #16]
 800a72c:	6861      	ldr	r1, [r4, #4]
 800a72e:	4299      	cmp	r1, r3
 800a730:	bfde      	ittt	le
 800a732:	2330      	movle	r3, #48	; 0x30
 800a734:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a738:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a73c:	1b52      	subs	r2, r2, r5
 800a73e:	6122      	str	r2, [r4, #16]
 800a740:	f8cd a000 	str.w	sl, [sp]
 800a744:	464b      	mov	r3, r9
 800a746:	aa03      	add	r2, sp, #12
 800a748:	4621      	mov	r1, r4
 800a74a:	4640      	mov	r0, r8
 800a74c:	f7ff fee2 	bl	800a514 <_printf_common>
 800a750:	3001      	adds	r0, #1
 800a752:	d14c      	bne.n	800a7ee <_printf_i+0x1fe>
 800a754:	f04f 30ff 	mov.w	r0, #4294967295
 800a758:	b004      	add	sp, #16
 800a75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a75e:	4835      	ldr	r0, [pc, #212]	; (800a834 <_printf_i+0x244>)
 800a760:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a764:	6829      	ldr	r1, [r5, #0]
 800a766:	6823      	ldr	r3, [r4, #0]
 800a768:	f851 6b04 	ldr.w	r6, [r1], #4
 800a76c:	6029      	str	r1, [r5, #0]
 800a76e:	061d      	lsls	r5, r3, #24
 800a770:	d514      	bpl.n	800a79c <_printf_i+0x1ac>
 800a772:	07df      	lsls	r7, r3, #31
 800a774:	bf44      	itt	mi
 800a776:	f043 0320 	orrmi.w	r3, r3, #32
 800a77a:	6023      	strmi	r3, [r4, #0]
 800a77c:	b91e      	cbnz	r6, 800a786 <_printf_i+0x196>
 800a77e:	6823      	ldr	r3, [r4, #0]
 800a780:	f023 0320 	bic.w	r3, r3, #32
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	2310      	movs	r3, #16
 800a788:	e7b0      	b.n	800a6ec <_printf_i+0xfc>
 800a78a:	6823      	ldr	r3, [r4, #0]
 800a78c:	f043 0320 	orr.w	r3, r3, #32
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	2378      	movs	r3, #120	; 0x78
 800a794:	4828      	ldr	r0, [pc, #160]	; (800a838 <_printf_i+0x248>)
 800a796:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a79a:	e7e3      	b.n	800a764 <_printf_i+0x174>
 800a79c:	0659      	lsls	r1, r3, #25
 800a79e:	bf48      	it	mi
 800a7a0:	b2b6      	uxthmi	r6, r6
 800a7a2:	e7e6      	b.n	800a772 <_printf_i+0x182>
 800a7a4:	4615      	mov	r5, r2
 800a7a6:	e7bb      	b.n	800a720 <_printf_i+0x130>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	6826      	ldr	r6, [r4, #0]
 800a7ac:	6961      	ldr	r1, [r4, #20]
 800a7ae:	1d18      	adds	r0, r3, #4
 800a7b0:	6028      	str	r0, [r5, #0]
 800a7b2:	0635      	lsls	r5, r6, #24
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	d501      	bpl.n	800a7bc <_printf_i+0x1cc>
 800a7b8:	6019      	str	r1, [r3, #0]
 800a7ba:	e002      	b.n	800a7c2 <_printf_i+0x1d2>
 800a7bc:	0670      	lsls	r0, r6, #25
 800a7be:	d5fb      	bpl.n	800a7b8 <_printf_i+0x1c8>
 800a7c0:	8019      	strh	r1, [r3, #0]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	6123      	str	r3, [r4, #16]
 800a7c6:	4615      	mov	r5, r2
 800a7c8:	e7ba      	b.n	800a740 <_printf_i+0x150>
 800a7ca:	682b      	ldr	r3, [r5, #0]
 800a7cc:	1d1a      	adds	r2, r3, #4
 800a7ce:	602a      	str	r2, [r5, #0]
 800a7d0:	681d      	ldr	r5, [r3, #0]
 800a7d2:	6862      	ldr	r2, [r4, #4]
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	f7f5 fd32 	bl	8000240 <memchr>
 800a7dc:	b108      	cbz	r0, 800a7e2 <_printf_i+0x1f2>
 800a7de:	1b40      	subs	r0, r0, r5
 800a7e0:	6060      	str	r0, [r4, #4]
 800a7e2:	6863      	ldr	r3, [r4, #4]
 800a7e4:	6123      	str	r3, [r4, #16]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7ec:	e7a8      	b.n	800a740 <_printf_i+0x150>
 800a7ee:	6923      	ldr	r3, [r4, #16]
 800a7f0:	462a      	mov	r2, r5
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	47d0      	blx	sl
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	d0ab      	beq.n	800a754 <_printf_i+0x164>
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	079b      	lsls	r3, r3, #30
 800a800:	d413      	bmi.n	800a82a <_printf_i+0x23a>
 800a802:	68e0      	ldr	r0, [r4, #12]
 800a804:	9b03      	ldr	r3, [sp, #12]
 800a806:	4298      	cmp	r0, r3
 800a808:	bfb8      	it	lt
 800a80a:	4618      	movlt	r0, r3
 800a80c:	e7a4      	b.n	800a758 <_printf_i+0x168>
 800a80e:	2301      	movs	r3, #1
 800a810:	4632      	mov	r2, r6
 800a812:	4649      	mov	r1, r9
 800a814:	4640      	mov	r0, r8
 800a816:	47d0      	blx	sl
 800a818:	3001      	adds	r0, #1
 800a81a:	d09b      	beq.n	800a754 <_printf_i+0x164>
 800a81c:	3501      	adds	r5, #1
 800a81e:	68e3      	ldr	r3, [r4, #12]
 800a820:	9903      	ldr	r1, [sp, #12]
 800a822:	1a5b      	subs	r3, r3, r1
 800a824:	42ab      	cmp	r3, r5
 800a826:	dcf2      	bgt.n	800a80e <_printf_i+0x21e>
 800a828:	e7eb      	b.n	800a802 <_printf_i+0x212>
 800a82a:	2500      	movs	r5, #0
 800a82c:	f104 0619 	add.w	r6, r4, #25
 800a830:	e7f5      	b.n	800a81e <_printf_i+0x22e>
 800a832:	bf00      	nop
 800a834:	0800cf93 	.word	0x0800cf93
 800a838:	0800cfa4 	.word	0x0800cfa4

0800a83c <_sbrk_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4d06      	ldr	r5, [pc, #24]	; (800a858 <_sbrk_r+0x1c>)
 800a840:	2300      	movs	r3, #0
 800a842:	4604      	mov	r4, r0
 800a844:	4608      	mov	r0, r1
 800a846:	602b      	str	r3, [r5, #0]
 800a848:	f7f6 fd40 	bl	80012cc <_sbrk>
 800a84c:	1c43      	adds	r3, r0, #1
 800a84e:	d102      	bne.n	800a856 <_sbrk_r+0x1a>
 800a850:	682b      	ldr	r3, [r5, #0]
 800a852:	b103      	cbz	r3, 800a856 <_sbrk_r+0x1a>
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	bd38      	pop	{r3, r4, r5, pc}
 800a858:	20004d50 	.word	0x20004d50

0800a85c <__swbuf_r>:
 800a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85e:	460e      	mov	r6, r1
 800a860:	4614      	mov	r4, r2
 800a862:	4605      	mov	r5, r0
 800a864:	b118      	cbz	r0, 800a86e <__swbuf_r+0x12>
 800a866:	6983      	ldr	r3, [r0, #24]
 800a868:	b90b      	cbnz	r3, 800a86e <__swbuf_r+0x12>
 800a86a:	f000 f9d9 	bl	800ac20 <__sinit>
 800a86e:	4b21      	ldr	r3, [pc, #132]	; (800a8f4 <__swbuf_r+0x98>)
 800a870:	429c      	cmp	r4, r3
 800a872:	d12b      	bne.n	800a8cc <__swbuf_r+0x70>
 800a874:	686c      	ldr	r4, [r5, #4]
 800a876:	69a3      	ldr	r3, [r4, #24]
 800a878:	60a3      	str	r3, [r4, #8]
 800a87a:	89a3      	ldrh	r3, [r4, #12]
 800a87c:	071a      	lsls	r2, r3, #28
 800a87e:	d52f      	bpl.n	800a8e0 <__swbuf_r+0x84>
 800a880:	6923      	ldr	r3, [r4, #16]
 800a882:	b36b      	cbz	r3, 800a8e0 <__swbuf_r+0x84>
 800a884:	6923      	ldr	r3, [r4, #16]
 800a886:	6820      	ldr	r0, [r4, #0]
 800a888:	1ac0      	subs	r0, r0, r3
 800a88a:	6963      	ldr	r3, [r4, #20]
 800a88c:	b2f6      	uxtb	r6, r6
 800a88e:	4283      	cmp	r3, r0
 800a890:	4637      	mov	r7, r6
 800a892:	dc04      	bgt.n	800a89e <__swbuf_r+0x42>
 800a894:	4621      	mov	r1, r4
 800a896:	4628      	mov	r0, r5
 800a898:	f000 f92e 	bl	800aaf8 <_fflush_r>
 800a89c:	bb30      	cbnz	r0, 800a8ec <__swbuf_r+0x90>
 800a89e:	68a3      	ldr	r3, [r4, #8]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	60a3      	str	r3, [r4, #8]
 800a8a4:	6823      	ldr	r3, [r4, #0]
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	6022      	str	r2, [r4, #0]
 800a8aa:	701e      	strb	r6, [r3, #0]
 800a8ac:	6963      	ldr	r3, [r4, #20]
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	4283      	cmp	r3, r0
 800a8b2:	d004      	beq.n	800a8be <__swbuf_r+0x62>
 800a8b4:	89a3      	ldrh	r3, [r4, #12]
 800a8b6:	07db      	lsls	r3, r3, #31
 800a8b8:	d506      	bpl.n	800a8c8 <__swbuf_r+0x6c>
 800a8ba:	2e0a      	cmp	r6, #10
 800a8bc:	d104      	bne.n	800a8c8 <__swbuf_r+0x6c>
 800a8be:	4621      	mov	r1, r4
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	f000 f919 	bl	800aaf8 <_fflush_r>
 800a8c6:	b988      	cbnz	r0, 800a8ec <__swbuf_r+0x90>
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <__swbuf_r+0x9c>)
 800a8ce:	429c      	cmp	r4, r3
 800a8d0:	d101      	bne.n	800a8d6 <__swbuf_r+0x7a>
 800a8d2:	68ac      	ldr	r4, [r5, #8]
 800a8d4:	e7cf      	b.n	800a876 <__swbuf_r+0x1a>
 800a8d6:	4b09      	ldr	r3, [pc, #36]	; (800a8fc <__swbuf_r+0xa0>)
 800a8d8:	429c      	cmp	r4, r3
 800a8da:	bf08      	it	eq
 800a8dc:	68ec      	ldreq	r4, [r5, #12]
 800a8de:	e7ca      	b.n	800a876 <__swbuf_r+0x1a>
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f000 f80c 	bl	800a900 <__swsetup_r>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d0cb      	beq.n	800a884 <__swbuf_r+0x28>
 800a8ec:	f04f 37ff 	mov.w	r7, #4294967295
 800a8f0:	e7ea      	b.n	800a8c8 <__swbuf_r+0x6c>
 800a8f2:	bf00      	nop
 800a8f4:	0800cfd8 	.word	0x0800cfd8
 800a8f8:	0800cff8 	.word	0x0800cff8
 800a8fc:	0800cfb8 	.word	0x0800cfb8

0800a900 <__swsetup_r>:
 800a900:	4b32      	ldr	r3, [pc, #200]	; (800a9cc <__swsetup_r+0xcc>)
 800a902:	b570      	push	{r4, r5, r6, lr}
 800a904:	681d      	ldr	r5, [r3, #0]
 800a906:	4606      	mov	r6, r0
 800a908:	460c      	mov	r4, r1
 800a90a:	b125      	cbz	r5, 800a916 <__swsetup_r+0x16>
 800a90c:	69ab      	ldr	r3, [r5, #24]
 800a90e:	b913      	cbnz	r3, 800a916 <__swsetup_r+0x16>
 800a910:	4628      	mov	r0, r5
 800a912:	f000 f985 	bl	800ac20 <__sinit>
 800a916:	4b2e      	ldr	r3, [pc, #184]	; (800a9d0 <__swsetup_r+0xd0>)
 800a918:	429c      	cmp	r4, r3
 800a91a:	d10f      	bne.n	800a93c <__swsetup_r+0x3c>
 800a91c:	686c      	ldr	r4, [r5, #4]
 800a91e:	89a3      	ldrh	r3, [r4, #12]
 800a920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a924:	0719      	lsls	r1, r3, #28
 800a926:	d42c      	bmi.n	800a982 <__swsetup_r+0x82>
 800a928:	06dd      	lsls	r5, r3, #27
 800a92a:	d411      	bmi.n	800a950 <__swsetup_r+0x50>
 800a92c:	2309      	movs	r3, #9
 800a92e:	6033      	str	r3, [r6, #0]
 800a930:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a934:	81a3      	strh	r3, [r4, #12]
 800a936:	f04f 30ff 	mov.w	r0, #4294967295
 800a93a:	e03e      	b.n	800a9ba <__swsetup_r+0xba>
 800a93c:	4b25      	ldr	r3, [pc, #148]	; (800a9d4 <__swsetup_r+0xd4>)
 800a93e:	429c      	cmp	r4, r3
 800a940:	d101      	bne.n	800a946 <__swsetup_r+0x46>
 800a942:	68ac      	ldr	r4, [r5, #8]
 800a944:	e7eb      	b.n	800a91e <__swsetup_r+0x1e>
 800a946:	4b24      	ldr	r3, [pc, #144]	; (800a9d8 <__swsetup_r+0xd8>)
 800a948:	429c      	cmp	r4, r3
 800a94a:	bf08      	it	eq
 800a94c:	68ec      	ldreq	r4, [r5, #12]
 800a94e:	e7e6      	b.n	800a91e <__swsetup_r+0x1e>
 800a950:	0758      	lsls	r0, r3, #29
 800a952:	d512      	bpl.n	800a97a <__swsetup_r+0x7a>
 800a954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a956:	b141      	cbz	r1, 800a96a <__swsetup_r+0x6a>
 800a958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a95c:	4299      	cmp	r1, r3
 800a95e:	d002      	beq.n	800a966 <__swsetup_r+0x66>
 800a960:	4630      	mov	r0, r6
 800a962:	f7ff fa41 	bl	8009de8 <_free_r>
 800a966:	2300      	movs	r3, #0
 800a968:	6363      	str	r3, [r4, #52]	; 0x34
 800a96a:	89a3      	ldrh	r3, [r4, #12]
 800a96c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a970:	81a3      	strh	r3, [r4, #12]
 800a972:	2300      	movs	r3, #0
 800a974:	6063      	str	r3, [r4, #4]
 800a976:	6923      	ldr	r3, [r4, #16]
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	89a3      	ldrh	r3, [r4, #12]
 800a97c:	f043 0308 	orr.w	r3, r3, #8
 800a980:	81a3      	strh	r3, [r4, #12]
 800a982:	6923      	ldr	r3, [r4, #16]
 800a984:	b94b      	cbnz	r3, 800a99a <__swsetup_r+0x9a>
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a98c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a990:	d003      	beq.n	800a99a <__swsetup_r+0x9a>
 800a992:	4621      	mov	r1, r4
 800a994:	4630      	mov	r0, r6
 800a996:	f000 fa09 	bl	800adac <__smakebuf_r>
 800a99a:	89a0      	ldrh	r0, [r4, #12]
 800a99c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9a0:	f010 0301 	ands.w	r3, r0, #1
 800a9a4:	d00a      	beq.n	800a9bc <__swsetup_r+0xbc>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	60a3      	str	r3, [r4, #8]
 800a9aa:	6963      	ldr	r3, [r4, #20]
 800a9ac:	425b      	negs	r3, r3
 800a9ae:	61a3      	str	r3, [r4, #24]
 800a9b0:	6923      	ldr	r3, [r4, #16]
 800a9b2:	b943      	cbnz	r3, 800a9c6 <__swsetup_r+0xc6>
 800a9b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9b8:	d1ba      	bne.n	800a930 <__swsetup_r+0x30>
 800a9ba:	bd70      	pop	{r4, r5, r6, pc}
 800a9bc:	0781      	lsls	r1, r0, #30
 800a9be:	bf58      	it	pl
 800a9c0:	6963      	ldrpl	r3, [r4, #20]
 800a9c2:	60a3      	str	r3, [r4, #8]
 800a9c4:	e7f4      	b.n	800a9b0 <__swsetup_r+0xb0>
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	e7f7      	b.n	800a9ba <__swsetup_r+0xba>
 800a9ca:	bf00      	nop
 800a9cc:	20000028 	.word	0x20000028
 800a9d0:	0800cfd8 	.word	0x0800cfd8
 800a9d4:	0800cff8 	.word	0x0800cff8
 800a9d8:	0800cfb8 	.word	0x0800cfb8

0800a9dc <abort>:
 800a9dc:	b508      	push	{r3, lr}
 800a9de:	2006      	movs	r0, #6
 800a9e0:	f000 faa2 	bl	800af28 <raise>
 800a9e4:	2001      	movs	r0, #1
 800a9e6:	f7f6 fbfa 	bl	80011de <_exit>
	...

0800a9ec <__sflush_r>:
 800a9ec:	898a      	ldrh	r2, [r1, #12]
 800a9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f2:	4605      	mov	r5, r0
 800a9f4:	0710      	lsls	r0, r2, #28
 800a9f6:	460c      	mov	r4, r1
 800a9f8:	d458      	bmi.n	800aaac <__sflush_r+0xc0>
 800a9fa:	684b      	ldr	r3, [r1, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	dc05      	bgt.n	800aa0c <__sflush_r+0x20>
 800aa00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	dc02      	bgt.n	800aa0c <__sflush_r+0x20>
 800aa06:	2000      	movs	r0, #0
 800aa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa0e:	2e00      	cmp	r6, #0
 800aa10:	d0f9      	beq.n	800aa06 <__sflush_r+0x1a>
 800aa12:	2300      	movs	r3, #0
 800aa14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa18:	682f      	ldr	r7, [r5, #0]
 800aa1a:	602b      	str	r3, [r5, #0]
 800aa1c:	d032      	beq.n	800aa84 <__sflush_r+0x98>
 800aa1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	075a      	lsls	r2, r3, #29
 800aa24:	d505      	bpl.n	800aa32 <__sflush_r+0x46>
 800aa26:	6863      	ldr	r3, [r4, #4]
 800aa28:	1ac0      	subs	r0, r0, r3
 800aa2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa2c:	b10b      	cbz	r3, 800aa32 <__sflush_r+0x46>
 800aa2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa30:	1ac0      	subs	r0, r0, r3
 800aa32:	2300      	movs	r3, #0
 800aa34:	4602      	mov	r2, r0
 800aa36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa38:	6a21      	ldr	r1, [r4, #32]
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	47b0      	blx	r6
 800aa3e:	1c43      	adds	r3, r0, #1
 800aa40:	89a3      	ldrh	r3, [r4, #12]
 800aa42:	d106      	bne.n	800aa52 <__sflush_r+0x66>
 800aa44:	6829      	ldr	r1, [r5, #0]
 800aa46:	291d      	cmp	r1, #29
 800aa48:	d82c      	bhi.n	800aaa4 <__sflush_r+0xb8>
 800aa4a:	4a2a      	ldr	r2, [pc, #168]	; (800aaf4 <__sflush_r+0x108>)
 800aa4c:	40ca      	lsrs	r2, r1
 800aa4e:	07d6      	lsls	r6, r2, #31
 800aa50:	d528      	bpl.n	800aaa4 <__sflush_r+0xb8>
 800aa52:	2200      	movs	r2, #0
 800aa54:	6062      	str	r2, [r4, #4]
 800aa56:	04d9      	lsls	r1, r3, #19
 800aa58:	6922      	ldr	r2, [r4, #16]
 800aa5a:	6022      	str	r2, [r4, #0]
 800aa5c:	d504      	bpl.n	800aa68 <__sflush_r+0x7c>
 800aa5e:	1c42      	adds	r2, r0, #1
 800aa60:	d101      	bne.n	800aa66 <__sflush_r+0x7a>
 800aa62:	682b      	ldr	r3, [r5, #0]
 800aa64:	b903      	cbnz	r3, 800aa68 <__sflush_r+0x7c>
 800aa66:	6560      	str	r0, [r4, #84]	; 0x54
 800aa68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa6a:	602f      	str	r7, [r5, #0]
 800aa6c:	2900      	cmp	r1, #0
 800aa6e:	d0ca      	beq.n	800aa06 <__sflush_r+0x1a>
 800aa70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa74:	4299      	cmp	r1, r3
 800aa76:	d002      	beq.n	800aa7e <__sflush_r+0x92>
 800aa78:	4628      	mov	r0, r5
 800aa7a:	f7ff f9b5 	bl	8009de8 <_free_r>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	6360      	str	r0, [r4, #52]	; 0x34
 800aa82:	e7c1      	b.n	800aa08 <__sflush_r+0x1c>
 800aa84:	6a21      	ldr	r1, [r4, #32]
 800aa86:	2301      	movs	r3, #1
 800aa88:	4628      	mov	r0, r5
 800aa8a:	47b0      	blx	r6
 800aa8c:	1c41      	adds	r1, r0, #1
 800aa8e:	d1c7      	bne.n	800aa20 <__sflush_r+0x34>
 800aa90:	682b      	ldr	r3, [r5, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d0c4      	beq.n	800aa20 <__sflush_r+0x34>
 800aa96:	2b1d      	cmp	r3, #29
 800aa98:	d001      	beq.n	800aa9e <__sflush_r+0xb2>
 800aa9a:	2b16      	cmp	r3, #22
 800aa9c:	d101      	bne.n	800aaa2 <__sflush_r+0xb6>
 800aa9e:	602f      	str	r7, [r5, #0]
 800aaa0:	e7b1      	b.n	800aa06 <__sflush_r+0x1a>
 800aaa2:	89a3      	ldrh	r3, [r4, #12]
 800aaa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa8:	81a3      	strh	r3, [r4, #12]
 800aaaa:	e7ad      	b.n	800aa08 <__sflush_r+0x1c>
 800aaac:	690f      	ldr	r7, [r1, #16]
 800aaae:	2f00      	cmp	r7, #0
 800aab0:	d0a9      	beq.n	800aa06 <__sflush_r+0x1a>
 800aab2:	0793      	lsls	r3, r2, #30
 800aab4:	680e      	ldr	r6, [r1, #0]
 800aab6:	bf08      	it	eq
 800aab8:	694b      	ldreq	r3, [r1, #20]
 800aaba:	600f      	str	r7, [r1, #0]
 800aabc:	bf18      	it	ne
 800aabe:	2300      	movne	r3, #0
 800aac0:	eba6 0807 	sub.w	r8, r6, r7
 800aac4:	608b      	str	r3, [r1, #8]
 800aac6:	f1b8 0f00 	cmp.w	r8, #0
 800aaca:	dd9c      	ble.n	800aa06 <__sflush_r+0x1a>
 800aacc:	6a21      	ldr	r1, [r4, #32]
 800aace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aad0:	4643      	mov	r3, r8
 800aad2:	463a      	mov	r2, r7
 800aad4:	4628      	mov	r0, r5
 800aad6:	47b0      	blx	r6
 800aad8:	2800      	cmp	r0, #0
 800aada:	dc06      	bgt.n	800aaea <__sflush_r+0xfe>
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aae2:	81a3      	strh	r3, [r4, #12]
 800aae4:	f04f 30ff 	mov.w	r0, #4294967295
 800aae8:	e78e      	b.n	800aa08 <__sflush_r+0x1c>
 800aaea:	4407      	add	r7, r0
 800aaec:	eba8 0800 	sub.w	r8, r8, r0
 800aaf0:	e7e9      	b.n	800aac6 <__sflush_r+0xda>
 800aaf2:	bf00      	nop
 800aaf4:	20400001 	.word	0x20400001

0800aaf8 <_fflush_r>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	690b      	ldr	r3, [r1, #16]
 800aafc:	4605      	mov	r5, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	b913      	cbnz	r3, 800ab08 <_fflush_r+0x10>
 800ab02:	2500      	movs	r5, #0
 800ab04:	4628      	mov	r0, r5
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	b118      	cbz	r0, 800ab12 <_fflush_r+0x1a>
 800ab0a:	6983      	ldr	r3, [r0, #24]
 800ab0c:	b90b      	cbnz	r3, 800ab12 <_fflush_r+0x1a>
 800ab0e:	f000 f887 	bl	800ac20 <__sinit>
 800ab12:	4b14      	ldr	r3, [pc, #80]	; (800ab64 <_fflush_r+0x6c>)
 800ab14:	429c      	cmp	r4, r3
 800ab16:	d11b      	bne.n	800ab50 <_fflush_r+0x58>
 800ab18:	686c      	ldr	r4, [r5, #4]
 800ab1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d0ef      	beq.n	800ab02 <_fflush_r+0xa>
 800ab22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab24:	07d0      	lsls	r0, r2, #31
 800ab26:	d404      	bmi.n	800ab32 <_fflush_r+0x3a>
 800ab28:	0599      	lsls	r1, r3, #22
 800ab2a:	d402      	bmi.n	800ab32 <_fflush_r+0x3a>
 800ab2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab2e:	f000 f915 	bl	800ad5c <__retarget_lock_acquire_recursive>
 800ab32:	4628      	mov	r0, r5
 800ab34:	4621      	mov	r1, r4
 800ab36:	f7ff ff59 	bl	800a9ec <__sflush_r>
 800ab3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab3c:	07da      	lsls	r2, r3, #31
 800ab3e:	4605      	mov	r5, r0
 800ab40:	d4e0      	bmi.n	800ab04 <_fflush_r+0xc>
 800ab42:	89a3      	ldrh	r3, [r4, #12]
 800ab44:	059b      	lsls	r3, r3, #22
 800ab46:	d4dd      	bmi.n	800ab04 <_fflush_r+0xc>
 800ab48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab4a:	f000 f908 	bl	800ad5e <__retarget_lock_release_recursive>
 800ab4e:	e7d9      	b.n	800ab04 <_fflush_r+0xc>
 800ab50:	4b05      	ldr	r3, [pc, #20]	; (800ab68 <_fflush_r+0x70>)
 800ab52:	429c      	cmp	r4, r3
 800ab54:	d101      	bne.n	800ab5a <_fflush_r+0x62>
 800ab56:	68ac      	ldr	r4, [r5, #8]
 800ab58:	e7df      	b.n	800ab1a <_fflush_r+0x22>
 800ab5a:	4b04      	ldr	r3, [pc, #16]	; (800ab6c <_fflush_r+0x74>)
 800ab5c:	429c      	cmp	r4, r3
 800ab5e:	bf08      	it	eq
 800ab60:	68ec      	ldreq	r4, [r5, #12]
 800ab62:	e7da      	b.n	800ab1a <_fflush_r+0x22>
 800ab64:	0800cfd8 	.word	0x0800cfd8
 800ab68:	0800cff8 	.word	0x0800cff8
 800ab6c:	0800cfb8 	.word	0x0800cfb8

0800ab70 <std>:
 800ab70:	2300      	movs	r3, #0
 800ab72:	b510      	push	{r4, lr}
 800ab74:	4604      	mov	r4, r0
 800ab76:	e9c0 3300 	strd	r3, r3, [r0]
 800ab7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab7e:	6083      	str	r3, [r0, #8]
 800ab80:	8181      	strh	r1, [r0, #12]
 800ab82:	6643      	str	r3, [r0, #100]	; 0x64
 800ab84:	81c2      	strh	r2, [r0, #14]
 800ab86:	6183      	str	r3, [r0, #24]
 800ab88:	4619      	mov	r1, r3
 800ab8a:	2208      	movs	r2, #8
 800ab8c:	305c      	adds	r0, #92	; 0x5c
 800ab8e:	f7ff f88d 	bl	8009cac <memset>
 800ab92:	4b05      	ldr	r3, [pc, #20]	; (800aba8 <std+0x38>)
 800ab94:	6263      	str	r3, [r4, #36]	; 0x24
 800ab96:	4b05      	ldr	r3, [pc, #20]	; (800abac <std+0x3c>)
 800ab98:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab9a:	4b05      	ldr	r3, [pc, #20]	; (800abb0 <std+0x40>)
 800ab9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab9e:	4b05      	ldr	r3, [pc, #20]	; (800abb4 <std+0x44>)
 800aba0:	6224      	str	r4, [r4, #32]
 800aba2:	6323      	str	r3, [r4, #48]	; 0x30
 800aba4:	bd10      	pop	{r4, pc}
 800aba6:	bf00      	nop
 800aba8:	0800af61 	.word	0x0800af61
 800abac:	0800af83 	.word	0x0800af83
 800abb0:	0800afbb 	.word	0x0800afbb
 800abb4:	0800afdf 	.word	0x0800afdf

0800abb8 <_cleanup_r>:
 800abb8:	4901      	ldr	r1, [pc, #4]	; (800abc0 <_cleanup_r+0x8>)
 800abba:	f000 b8af 	b.w	800ad1c <_fwalk_reent>
 800abbe:	bf00      	nop
 800abc0:	0800aaf9 	.word	0x0800aaf9

0800abc4 <__sfmoreglue>:
 800abc4:	b570      	push	{r4, r5, r6, lr}
 800abc6:	2268      	movs	r2, #104	; 0x68
 800abc8:	1e4d      	subs	r5, r1, #1
 800abca:	4355      	muls	r5, r2
 800abcc:	460e      	mov	r6, r1
 800abce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abd2:	f7ff f975 	bl	8009ec0 <_malloc_r>
 800abd6:	4604      	mov	r4, r0
 800abd8:	b140      	cbz	r0, 800abec <__sfmoreglue+0x28>
 800abda:	2100      	movs	r1, #0
 800abdc:	e9c0 1600 	strd	r1, r6, [r0]
 800abe0:	300c      	adds	r0, #12
 800abe2:	60a0      	str	r0, [r4, #8]
 800abe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abe8:	f7ff f860 	bl	8009cac <memset>
 800abec:	4620      	mov	r0, r4
 800abee:	bd70      	pop	{r4, r5, r6, pc}

0800abf0 <__sfp_lock_acquire>:
 800abf0:	4801      	ldr	r0, [pc, #4]	; (800abf8 <__sfp_lock_acquire+0x8>)
 800abf2:	f000 b8b3 	b.w	800ad5c <__retarget_lock_acquire_recursive>
 800abf6:	bf00      	nop
 800abf8:	20004d4d 	.word	0x20004d4d

0800abfc <__sfp_lock_release>:
 800abfc:	4801      	ldr	r0, [pc, #4]	; (800ac04 <__sfp_lock_release+0x8>)
 800abfe:	f000 b8ae 	b.w	800ad5e <__retarget_lock_release_recursive>
 800ac02:	bf00      	nop
 800ac04:	20004d4d 	.word	0x20004d4d

0800ac08 <__sinit_lock_acquire>:
 800ac08:	4801      	ldr	r0, [pc, #4]	; (800ac10 <__sinit_lock_acquire+0x8>)
 800ac0a:	f000 b8a7 	b.w	800ad5c <__retarget_lock_acquire_recursive>
 800ac0e:	bf00      	nop
 800ac10:	20004d4e 	.word	0x20004d4e

0800ac14 <__sinit_lock_release>:
 800ac14:	4801      	ldr	r0, [pc, #4]	; (800ac1c <__sinit_lock_release+0x8>)
 800ac16:	f000 b8a2 	b.w	800ad5e <__retarget_lock_release_recursive>
 800ac1a:	bf00      	nop
 800ac1c:	20004d4e 	.word	0x20004d4e

0800ac20 <__sinit>:
 800ac20:	b510      	push	{r4, lr}
 800ac22:	4604      	mov	r4, r0
 800ac24:	f7ff fff0 	bl	800ac08 <__sinit_lock_acquire>
 800ac28:	69a3      	ldr	r3, [r4, #24]
 800ac2a:	b11b      	cbz	r3, 800ac34 <__sinit+0x14>
 800ac2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac30:	f7ff bff0 	b.w	800ac14 <__sinit_lock_release>
 800ac34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac38:	6523      	str	r3, [r4, #80]	; 0x50
 800ac3a:	4b13      	ldr	r3, [pc, #76]	; (800ac88 <__sinit+0x68>)
 800ac3c:	4a13      	ldr	r2, [pc, #76]	; (800ac8c <__sinit+0x6c>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac42:	42a3      	cmp	r3, r4
 800ac44:	bf04      	itt	eq
 800ac46:	2301      	moveq	r3, #1
 800ac48:	61a3      	streq	r3, [r4, #24]
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 f820 	bl	800ac90 <__sfp>
 800ac50:	6060      	str	r0, [r4, #4]
 800ac52:	4620      	mov	r0, r4
 800ac54:	f000 f81c 	bl	800ac90 <__sfp>
 800ac58:	60a0      	str	r0, [r4, #8]
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f000 f818 	bl	800ac90 <__sfp>
 800ac60:	2200      	movs	r2, #0
 800ac62:	60e0      	str	r0, [r4, #12]
 800ac64:	2104      	movs	r1, #4
 800ac66:	6860      	ldr	r0, [r4, #4]
 800ac68:	f7ff ff82 	bl	800ab70 <std>
 800ac6c:	68a0      	ldr	r0, [r4, #8]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	2109      	movs	r1, #9
 800ac72:	f7ff ff7d 	bl	800ab70 <std>
 800ac76:	68e0      	ldr	r0, [r4, #12]
 800ac78:	2202      	movs	r2, #2
 800ac7a:	2112      	movs	r1, #18
 800ac7c:	f7ff ff78 	bl	800ab70 <std>
 800ac80:	2301      	movs	r3, #1
 800ac82:	61a3      	str	r3, [r4, #24]
 800ac84:	e7d2      	b.n	800ac2c <__sinit+0xc>
 800ac86:	bf00      	nop
 800ac88:	0800ced0 	.word	0x0800ced0
 800ac8c:	0800abb9 	.word	0x0800abb9

0800ac90 <__sfp>:
 800ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac92:	4607      	mov	r7, r0
 800ac94:	f7ff ffac 	bl	800abf0 <__sfp_lock_acquire>
 800ac98:	4b1e      	ldr	r3, [pc, #120]	; (800ad14 <__sfp+0x84>)
 800ac9a:	681e      	ldr	r6, [r3, #0]
 800ac9c:	69b3      	ldr	r3, [r6, #24]
 800ac9e:	b913      	cbnz	r3, 800aca6 <__sfp+0x16>
 800aca0:	4630      	mov	r0, r6
 800aca2:	f7ff ffbd 	bl	800ac20 <__sinit>
 800aca6:	3648      	adds	r6, #72	; 0x48
 800aca8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800acac:	3b01      	subs	r3, #1
 800acae:	d503      	bpl.n	800acb8 <__sfp+0x28>
 800acb0:	6833      	ldr	r3, [r6, #0]
 800acb2:	b30b      	cbz	r3, 800acf8 <__sfp+0x68>
 800acb4:	6836      	ldr	r6, [r6, #0]
 800acb6:	e7f7      	b.n	800aca8 <__sfp+0x18>
 800acb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800acbc:	b9d5      	cbnz	r5, 800acf4 <__sfp+0x64>
 800acbe:	4b16      	ldr	r3, [pc, #88]	; (800ad18 <__sfp+0x88>)
 800acc0:	60e3      	str	r3, [r4, #12]
 800acc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acc6:	6665      	str	r5, [r4, #100]	; 0x64
 800acc8:	f000 f847 	bl	800ad5a <__retarget_lock_init_recursive>
 800accc:	f7ff ff96 	bl	800abfc <__sfp_lock_release>
 800acd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800acd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800acd8:	6025      	str	r5, [r4, #0]
 800acda:	61a5      	str	r5, [r4, #24]
 800acdc:	2208      	movs	r2, #8
 800acde:	4629      	mov	r1, r5
 800ace0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ace4:	f7fe ffe2 	bl	8009cac <memset>
 800ace8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acf0:	4620      	mov	r0, r4
 800acf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acf4:	3468      	adds	r4, #104	; 0x68
 800acf6:	e7d9      	b.n	800acac <__sfp+0x1c>
 800acf8:	2104      	movs	r1, #4
 800acfa:	4638      	mov	r0, r7
 800acfc:	f7ff ff62 	bl	800abc4 <__sfmoreglue>
 800ad00:	4604      	mov	r4, r0
 800ad02:	6030      	str	r0, [r6, #0]
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d1d5      	bne.n	800acb4 <__sfp+0x24>
 800ad08:	f7ff ff78 	bl	800abfc <__sfp_lock_release>
 800ad0c:	230c      	movs	r3, #12
 800ad0e:	603b      	str	r3, [r7, #0]
 800ad10:	e7ee      	b.n	800acf0 <__sfp+0x60>
 800ad12:	bf00      	nop
 800ad14:	0800ced0 	.word	0x0800ced0
 800ad18:	ffff0001 	.word	0xffff0001

0800ad1c <_fwalk_reent>:
 800ad1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad20:	4606      	mov	r6, r0
 800ad22:	4688      	mov	r8, r1
 800ad24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad28:	2700      	movs	r7, #0
 800ad2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad2e:	f1b9 0901 	subs.w	r9, r9, #1
 800ad32:	d505      	bpl.n	800ad40 <_fwalk_reent+0x24>
 800ad34:	6824      	ldr	r4, [r4, #0]
 800ad36:	2c00      	cmp	r4, #0
 800ad38:	d1f7      	bne.n	800ad2a <_fwalk_reent+0xe>
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad40:	89ab      	ldrh	r3, [r5, #12]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d907      	bls.n	800ad56 <_fwalk_reent+0x3a>
 800ad46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	d003      	beq.n	800ad56 <_fwalk_reent+0x3a>
 800ad4e:	4629      	mov	r1, r5
 800ad50:	4630      	mov	r0, r6
 800ad52:	47c0      	blx	r8
 800ad54:	4307      	orrs	r7, r0
 800ad56:	3568      	adds	r5, #104	; 0x68
 800ad58:	e7e9      	b.n	800ad2e <_fwalk_reent+0x12>

0800ad5a <__retarget_lock_init_recursive>:
 800ad5a:	4770      	bx	lr

0800ad5c <__retarget_lock_acquire_recursive>:
 800ad5c:	4770      	bx	lr

0800ad5e <__retarget_lock_release_recursive>:
 800ad5e:	4770      	bx	lr

0800ad60 <__swhatbuf_r>:
 800ad60:	b570      	push	{r4, r5, r6, lr}
 800ad62:	460e      	mov	r6, r1
 800ad64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad68:	2900      	cmp	r1, #0
 800ad6a:	b096      	sub	sp, #88	; 0x58
 800ad6c:	4614      	mov	r4, r2
 800ad6e:	461d      	mov	r5, r3
 800ad70:	da08      	bge.n	800ad84 <__swhatbuf_r+0x24>
 800ad72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	602a      	str	r2, [r5, #0]
 800ad7a:	061a      	lsls	r2, r3, #24
 800ad7c:	d410      	bmi.n	800ada0 <__swhatbuf_r+0x40>
 800ad7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad82:	e00e      	b.n	800ada2 <__swhatbuf_r+0x42>
 800ad84:	466a      	mov	r2, sp
 800ad86:	f000 f951 	bl	800b02c <_fstat_r>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	dbf1      	blt.n	800ad72 <__swhatbuf_r+0x12>
 800ad8e:	9a01      	ldr	r2, [sp, #4]
 800ad90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad98:	425a      	negs	r2, r3
 800ad9a:	415a      	adcs	r2, r3
 800ad9c:	602a      	str	r2, [r5, #0]
 800ad9e:	e7ee      	b.n	800ad7e <__swhatbuf_r+0x1e>
 800ada0:	2340      	movs	r3, #64	; 0x40
 800ada2:	2000      	movs	r0, #0
 800ada4:	6023      	str	r3, [r4, #0]
 800ada6:	b016      	add	sp, #88	; 0x58
 800ada8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800adac <__smakebuf_r>:
 800adac:	898b      	ldrh	r3, [r1, #12]
 800adae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800adb0:	079d      	lsls	r5, r3, #30
 800adb2:	4606      	mov	r6, r0
 800adb4:	460c      	mov	r4, r1
 800adb6:	d507      	bpl.n	800adc8 <__smakebuf_r+0x1c>
 800adb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	6123      	str	r3, [r4, #16]
 800adc0:	2301      	movs	r3, #1
 800adc2:	6163      	str	r3, [r4, #20]
 800adc4:	b002      	add	sp, #8
 800adc6:	bd70      	pop	{r4, r5, r6, pc}
 800adc8:	ab01      	add	r3, sp, #4
 800adca:	466a      	mov	r2, sp
 800adcc:	f7ff ffc8 	bl	800ad60 <__swhatbuf_r>
 800add0:	9900      	ldr	r1, [sp, #0]
 800add2:	4605      	mov	r5, r0
 800add4:	4630      	mov	r0, r6
 800add6:	f7ff f873 	bl	8009ec0 <_malloc_r>
 800adda:	b948      	cbnz	r0, 800adf0 <__smakebuf_r+0x44>
 800addc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade0:	059a      	lsls	r2, r3, #22
 800ade2:	d4ef      	bmi.n	800adc4 <__smakebuf_r+0x18>
 800ade4:	f023 0303 	bic.w	r3, r3, #3
 800ade8:	f043 0302 	orr.w	r3, r3, #2
 800adec:	81a3      	strh	r3, [r4, #12]
 800adee:	e7e3      	b.n	800adb8 <__smakebuf_r+0xc>
 800adf0:	4b0d      	ldr	r3, [pc, #52]	; (800ae28 <__smakebuf_r+0x7c>)
 800adf2:	62b3      	str	r3, [r6, #40]	; 0x28
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	6020      	str	r0, [r4, #0]
 800adf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adfc:	81a3      	strh	r3, [r4, #12]
 800adfe:	9b00      	ldr	r3, [sp, #0]
 800ae00:	6163      	str	r3, [r4, #20]
 800ae02:	9b01      	ldr	r3, [sp, #4]
 800ae04:	6120      	str	r0, [r4, #16]
 800ae06:	b15b      	cbz	r3, 800ae20 <__smakebuf_r+0x74>
 800ae08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f000 f91f 	bl	800b050 <_isatty_r>
 800ae12:	b128      	cbz	r0, 800ae20 <__smakebuf_r+0x74>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f023 0303 	bic.w	r3, r3, #3
 800ae1a:	f043 0301 	orr.w	r3, r3, #1
 800ae1e:	81a3      	strh	r3, [r4, #12]
 800ae20:	89a0      	ldrh	r0, [r4, #12]
 800ae22:	4305      	orrs	r5, r0
 800ae24:	81a5      	strh	r5, [r4, #12]
 800ae26:	e7cd      	b.n	800adc4 <__smakebuf_r+0x18>
 800ae28:	0800abb9 	.word	0x0800abb9

0800ae2c <memmove>:
 800ae2c:	4288      	cmp	r0, r1
 800ae2e:	b510      	push	{r4, lr}
 800ae30:	eb01 0402 	add.w	r4, r1, r2
 800ae34:	d902      	bls.n	800ae3c <memmove+0x10>
 800ae36:	4284      	cmp	r4, r0
 800ae38:	4623      	mov	r3, r4
 800ae3a:	d807      	bhi.n	800ae4c <memmove+0x20>
 800ae3c:	1e43      	subs	r3, r0, #1
 800ae3e:	42a1      	cmp	r1, r4
 800ae40:	d008      	beq.n	800ae54 <memmove+0x28>
 800ae42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae4a:	e7f8      	b.n	800ae3e <memmove+0x12>
 800ae4c:	4402      	add	r2, r0
 800ae4e:	4601      	mov	r1, r0
 800ae50:	428a      	cmp	r2, r1
 800ae52:	d100      	bne.n	800ae56 <memmove+0x2a>
 800ae54:	bd10      	pop	{r4, pc}
 800ae56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae5e:	e7f7      	b.n	800ae50 <memmove+0x24>

0800ae60 <__malloc_lock>:
 800ae60:	4801      	ldr	r0, [pc, #4]	; (800ae68 <__malloc_lock+0x8>)
 800ae62:	f7ff bf7b 	b.w	800ad5c <__retarget_lock_acquire_recursive>
 800ae66:	bf00      	nop
 800ae68:	20004d4c 	.word	0x20004d4c

0800ae6c <__malloc_unlock>:
 800ae6c:	4801      	ldr	r0, [pc, #4]	; (800ae74 <__malloc_unlock+0x8>)
 800ae6e:	f7ff bf76 	b.w	800ad5e <__retarget_lock_release_recursive>
 800ae72:	bf00      	nop
 800ae74:	20004d4c 	.word	0x20004d4c

0800ae78 <_realloc_r>:
 800ae78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7c:	4680      	mov	r8, r0
 800ae7e:	4614      	mov	r4, r2
 800ae80:	460e      	mov	r6, r1
 800ae82:	b921      	cbnz	r1, 800ae8e <_realloc_r+0x16>
 800ae84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae88:	4611      	mov	r1, r2
 800ae8a:	f7ff b819 	b.w	8009ec0 <_malloc_r>
 800ae8e:	b92a      	cbnz	r2, 800ae9c <_realloc_r+0x24>
 800ae90:	f7fe ffaa 	bl	8009de8 <_free_r>
 800ae94:	4625      	mov	r5, r4
 800ae96:	4628      	mov	r0, r5
 800ae98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae9c:	f000 f8fa 	bl	800b094 <_malloc_usable_size_r>
 800aea0:	4284      	cmp	r4, r0
 800aea2:	4607      	mov	r7, r0
 800aea4:	d802      	bhi.n	800aeac <_realloc_r+0x34>
 800aea6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aeaa:	d812      	bhi.n	800aed2 <_realloc_r+0x5a>
 800aeac:	4621      	mov	r1, r4
 800aeae:	4640      	mov	r0, r8
 800aeb0:	f7ff f806 	bl	8009ec0 <_malloc_r>
 800aeb4:	4605      	mov	r5, r0
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d0ed      	beq.n	800ae96 <_realloc_r+0x1e>
 800aeba:	42bc      	cmp	r4, r7
 800aebc:	4622      	mov	r2, r4
 800aebe:	4631      	mov	r1, r6
 800aec0:	bf28      	it	cs
 800aec2:	463a      	movcs	r2, r7
 800aec4:	f7fe fee4 	bl	8009c90 <memcpy>
 800aec8:	4631      	mov	r1, r6
 800aeca:	4640      	mov	r0, r8
 800aecc:	f7fe ff8c 	bl	8009de8 <_free_r>
 800aed0:	e7e1      	b.n	800ae96 <_realloc_r+0x1e>
 800aed2:	4635      	mov	r5, r6
 800aed4:	e7df      	b.n	800ae96 <_realloc_r+0x1e>

0800aed6 <_raise_r>:
 800aed6:	291f      	cmp	r1, #31
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4604      	mov	r4, r0
 800aedc:	460d      	mov	r5, r1
 800aede:	d904      	bls.n	800aeea <_raise_r+0x14>
 800aee0:	2316      	movs	r3, #22
 800aee2:	6003      	str	r3, [r0, #0]
 800aee4:	f04f 30ff 	mov.w	r0, #4294967295
 800aee8:	bd38      	pop	{r3, r4, r5, pc}
 800aeea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aeec:	b112      	cbz	r2, 800aef4 <_raise_r+0x1e>
 800aeee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aef2:	b94b      	cbnz	r3, 800af08 <_raise_r+0x32>
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 f831 	bl	800af5c <_getpid_r>
 800aefa:	462a      	mov	r2, r5
 800aefc:	4601      	mov	r1, r0
 800aefe:	4620      	mov	r0, r4
 800af00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af04:	f000 b818 	b.w	800af38 <_kill_r>
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d00a      	beq.n	800af22 <_raise_r+0x4c>
 800af0c:	1c59      	adds	r1, r3, #1
 800af0e:	d103      	bne.n	800af18 <_raise_r+0x42>
 800af10:	2316      	movs	r3, #22
 800af12:	6003      	str	r3, [r0, #0]
 800af14:	2001      	movs	r0, #1
 800af16:	e7e7      	b.n	800aee8 <_raise_r+0x12>
 800af18:	2400      	movs	r4, #0
 800af1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af1e:	4628      	mov	r0, r5
 800af20:	4798      	blx	r3
 800af22:	2000      	movs	r0, #0
 800af24:	e7e0      	b.n	800aee8 <_raise_r+0x12>
	...

0800af28 <raise>:
 800af28:	4b02      	ldr	r3, [pc, #8]	; (800af34 <raise+0xc>)
 800af2a:	4601      	mov	r1, r0
 800af2c:	6818      	ldr	r0, [r3, #0]
 800af2e:	f7ff bfd2 	b.w	800aed6 <_raise_r>
 800af32:	bf00      	nop
 800af34:	20000028 	.word	0x20000028

0800af38 <_kill_r>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	4d07      	ldr	r5, [pc, #28]	; (800af58 <_kill_r+0x20>)
 800af3c:	2300      	movs	r3, #0
 800af3e:	4604      	mov	r4, r0
 800af40:	4608      	mov	r0, r1
 800af42:	4611      	mov	r1, r2
 800af44:	602b      	str	r3, [r5, #0]
 800af46:	f7f6 f93a 	bl	80011be <_kill>
 800af4a:	1c43      	adds	r3, r0, #1
 800af4c:	d102      	bne.n	800af54 <_kill_r+0x1c>
 800af4e:	682b      	ldr	r3, [r5, #0]
 800af50:	b103      	cbz	r3, 800af54 <_kill_r+0x1c>
 800af52:	6023      	str	r3, [r4, #0]
 800af54:	bd38      	pop	{r3, r4, r5, pc}
 800af56:	bf00      	nop
 800af58:	20004d50 	.word	0x20004d50

0800af5c <_getpid_r>:
 800af5c:	f7f6 b927 	b.w	80011ae <_getpid>

0800af60 <__sread>:
 800af60:	b510      	push	{r4, lr}
 800af62:	460c      	mov	r4, r1
 800af64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af68:	f000 f89c 	bl	800b0a4 <_read_r>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	bfab      	itete	ge
 800af70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af72:	89a3      	ldrhlt	r3, [r4, #12]
 800af74:	181b      	addge	r3, r3, r0
 800af76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af7a:	bfac      	ite	ge
 800af7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800af7e:	81a3      	strhlt	r3, [r4, #12]
 800af80:	bd10      	pop	{r4, pc}

0800af82 <__swrite>:
 800af82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af86:	461f      	mov	r7, r3
 800af88:	898b      	ldrh	r3, [r1, #12]
 800af8a:	05db      	lsls	r3, r3, #23
 800af8c:	4605      	mov	r5, r0
 800af8e:	460c      	mov	r4, r1
 800af90:	4616      	mov	r6, r2
 800af92:	d505      	bpl.n	800afa0 <__swrite+0x1e>
 800af94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af98:	2302      	movs	r3, #2
 800af9a:	2200      	movs	r2, #0
 800af9c:	f000 f868 	bl	800b070 <_lseek_r>
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afaa:	81a3      	strh	r3, [r4, #12]
 800afac:	4632      	mov	r2, r6
 800afae:	463b      	mov	r3, r7
 800afb0:	4628      	mov	r0, r5
 800afb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afb6:	f000 b817 	b.w	800afe8 <_write_r>

0800afba <__sseek>:
 800afba:	b510      	push	{r4, lr}
 800afbc:	460c      	mov	r4, r1
 800afbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc2:	f000 f855 	bl	800b070 <_lseek_r>
 800afc6:	1c43      	adds	r3, r0, #1
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	bf15      	itete	ne
 800afcc:	6560      	strne	r0, [r4, #84]	; 0x54
 800afce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afd6:	81a3      	strheq	r3, [r4, #12]
 800afd8:	bf18      	it	ne
 800afda:	81a3      	strhne	r3, [r4, #12]
 800afdc:	bd10      	pop	{r4, pc}

0800afde <__sclose>:
 800afde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afe2:	f000 b813 	b.w	800b00c <_close_r>
	...

0800afe8 <_write_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4d07      	ldr	r5, [pc, #28]	; (800b008 <_write_r+0x20>)
 800afec:	4604      	mov	r4, r0
 800afee:	4608      	mov	r0, r1
 800aff0:	4611      	mov	r1, r2
 800aff2:	2200      	movs	r2, #0
 800aff4:	602a      	str	r2, [r5, #0]
 800aff6:	461a      	mov	r2, r3
 800aff8:	f7f6 f918 	bl	800122c <_write>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d102      	bne.n	800b006 <_write_r+0x1e>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	b103      	cbz	r3, 800b006 <_write_r+0x1e>
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	20004d50 	.word	0x20004d50

0800b00c <_close_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4d06      	ldr	r5, [pc, #24]	; (800b028 <_close_r+0x1c>)
 800b010:	2300      	movs	r3, #0
 800b012:	4604      	mov	r4, r0
 800b014:	4608      	mov	r0, r1
 800b016:	602b      	str	r3, [r5, #0]
 800b018:	f7f6 f924 	bl	8001264 <_close>
 800b01c:	1c43      	adds	r3, r0, #1
 800b01e:	d102      	bne.n	800b026 <_close_r+0x1a>
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	b103      	cbz	r3, 800b026 <_close_r+0x1a>
 800b024:	6023      	str	r3, [r4, #0]
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	20004d50 	.word	0x20004d50

0800b02c <_fstat_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	4d07      	ldr	r5, [pc, #28]	; (800b04c <_fstat_r+0x20>)
 800b030:	2300      	movs	r3, #0
 800b032:	4604      	mov	r4, r0
 800b034:	4608      	mov	r0, r1
 800b036:	4611      	mov	r1, r2
 800b038:	602b      	str	r3, [r5, #0]
 800b03a:	f7f6 f91f 	bl	800127c <_fstat>
 800b03e:	1c43      	adds	r3, r0, #1
 800b040:	d102      	bne.n	800b048 <_fstat_r+0x1c>
 800b042:	682b      	ldr	r3, [r5, #0]
 800b044:	b103      	cbz	r3, 800b048 <_fstat_r+0x1c>
 800b046:	6023      	str	r3, [r4, #0]
 800b048:	bd38      	pop	{r3, r4, r5, pc}
 800b04a:	bf00      	nop
 800b04c:	20004d50 	.word	0x20004d50

0800b050 <_isatty_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4d06      	ldr	r5, [pc, #24]	; (800b06c <_isatty_r+0x1c>)
 800b054:	2300      	movs	r3, #0
 800b056:	4604      	mov	r4, r0
 800b058:	4608      	mov	r0, r1
 800b05a:	602b      	str	r3, [r5, #0]
 800b05c:	f7f6 f91e 	bl	800129c <_isatty>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d102      	bne.n	800b06a <_isatty_r+0x1a>
 800b064:	682b      	ldr	r3, [r5, #0]
 800b066:	b103      	cbz	r3, 800b06a <_isatty_r+0x1a>
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	bd38      	pop	{r3, r4, r5, pc}
 800b06c:	20004d50 	.word	0x20004d50

0800b070 <_lseek_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4d07      	ldr	r5, [pc, #28]	; (800b090 <_lseek_r+0x20>)
 800b074:	4604      	mov	r4, r0
 800b076:	4608      	mov	r0, r1
 800b078:	4611      	mov	r1, r2
 800b07a:	2200      	movs	r2, #0
 800b07c:	602a      	str	r2, [r5, #0]
 800b07e:	461a      	mov	r2, r3
 800b080:	f7f6 f917 	bl	80012b2 <_lseek>
 800b084:	1c43      	adds	r3, r0, #1
 800b086:	d102      	bne.n	800b08e <_lseek_r+0x1e>
 800b088:	682b      	ldr	r3, [r5, #0]
 800b08a:	b103      	cbz	r3, 800b08e <_lseek_r+0x1e>
 800b08c:	6023      	str	r3, [r4, #0]
 800b08e:	bd38      	pop	{r3, r4, r5, pc}
 800b090:	20004d50 	.word	0x20004d50

0800b094 <_malloc_usable_size_r>:
 800b094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b098:	1f18      	subs	r0, r3, #4
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	bfbc      	itt	lt
 800b09e:	580b      	ldrlt	r3, [r1, r0]
 800b0a0:	18c0      	addlt	r0, r0, r3
 800b0a2:	4770      	bx	lr

0800b0a4 <_read_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4d07      	ldr	r5, [pc, #28]	; (800b0c4 <_read_r+0x20>)
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	4608      	mov	r0, r1
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	602a      	str	r2, [r5, #0]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	f7f6 f89d 	bl	80011f2 <_read>
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	d102      	bne.n	800b0c2 <_read_r+0x1e>
 800b0bc:	682b      	ldr	r3, [r5, #0]
 800b0be:	b103      	cbz	r3, 800b0c2 <_read_r+0x1e>
 800b0c0:	6023      	str	r3, [r4, #0]
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}
 800b0c4:	20004d50 	.word	0x20004d50

0800b0c8 <_init>:
 800b0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ca:	bf00      	nop
 800b0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ce:	bc08      	pop	{r3}
 800b0d0:	469e      	mov	lr, r3
 800b0d2:	4770      	bx	lr

0800b0d4 <_fini>:
 800b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d6:	bf00      	nop
 800b0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0da:	bc08      	pop	{r3}
 800b0dc:	469e      	mov	lr, r3
 800b0de:	4770      	bx	lr
